<?xml version="1.0"?>
<!--
Sample license text.
-->
<doc>
    <assembly>
        <name>Cadru.Contracts</name>
    </assembly>
    <members>
        <member name="T:Cadru.Contracts.Assumes">
            <summary>
            Provides a set of methods to simplify debugging your code.
            </summary>
        </member>
        <member name="M:Cadru.Contracts.Assumes.Fail(System.String)">
            <summary>
            Fails with the provided message as the reason.
            </summary>
            <param name="message">The message of the resulting <see cref="T:Cadru.Contracts.AssumptionException" />.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">An assumption failed.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsEnum(System.Enum,System.String)">
            <summary>
            Checks that <paramref name="value" /> is an enumerated type.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" />  is not an enumerated type.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsEnum(System.Object,System.String)">
            <summary>
            Checks that <paramref name="value" /> is an enumerated type.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" />  is not an enumerated type.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsFalse(System.Boolean)">
            <summary>
            Checks for a condition and displays a message and throws an exception if the condition is <see langword="true" />.
            </summary>
            <param name="condition"><see langword="false" /> to prevent a message being displayed; otherwise, <see langword="true" />.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">The condition is <see langword="false" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsFalse(System.Boolean,System.String)">
            <summary>
            Checks for a condition and displays a message and throws an exception if the condition is <see langword="true" />.
            </summary>
            <param name="condition"><see langword="false" /> to prevent a message being displayed; otherwise, <see langword="true" />.</param>
            <param name="message">A message to display and to be used in the resulting exception.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">The condition is <see langword="false" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsTrue(System.Boolean)">
            <summary>
            Checks for a condition and displays a message and throws an exception if the condition is <see langword="false" />.
            </summary>
            <param name="condition"><see langword="true" /> to prevent a message being displayed; otherwise, <see langword="false" />.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">The condition is <see langword="false" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsTrue(System.Boolean,System.String)">
            <summary>
            Checks for a condition and displays a message and throws an exception if the condition is <see langword="false" />.
            </summary>
            <param name="condition"><see langword="true" /> to prevent a message being displayed; otherwise, <see langword="false" />.</param>
            <param name="message">A message to display and to be used in the resulting exception.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">The condition is <see langword="false" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsType(System.Object,System.Type,System.String)">
            <summary>
            Checks that <paramref name="value" /> is an enumerated type.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="expectedType">The type <paramref name="value" /> is expected to be.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" />  is not an enumerated type.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.IsType``1(System.Object,System.String)">
            <summary>
            Checks that <paramref name="value" /> is an enumerated type.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" />  is not an enumerated type.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.NotNull``1(``0)">
            <summary>
            Checks that <paramref name="value" /> is not <see langword="null" />.
            </summary>
            <typeparam name="T">The type of the value to test.</typeparam>
            <param name="value">The value to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.NotNull``2(``0,``1)">
            <summary>
            Checks that <paramref name="value1" /> and <paramref name="value2" /> are not <see langword="null" />.
            </summary>
            <typeparam name="T1">The type of the first value to test.</typeparam>
            <typeparam name="T2">The type of the second value to test.</typeparam>
            <param name="value1">The first value to test.</param>
            <param name="value2">The second value to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">
            <para><paramref name="value1" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="value2" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.NotNull``3(``0,``1,``2)">
            <summary>
            Checks that <paramref name="value1" />, <paramref name="value2" />, and <paramref name="value3" /> are not <see langword="null" />.
            </summary>
            <typeparam name="T1">The type of the first value to test.</typeparam>
            <typeparam name="T2">The type of the second value to test.</typeparam>
            <typeparam name="T3">The type of the third value to test.</typeparam>
            <param name="value1">The first value to test.</param>
            <param name="value2">The second value to test.</param>
            <param name="value3">The third value to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">
            <para><paramref name="value1" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="value2" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="value3" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.NotNull``4(``0,``1,``2,``3)">
            <summary>
            Checks that <paramref name="value1" />, <paramref name="value2" />,
            <paramref name="value3" />, and <paramref name="value4" /> are not <see langword="null" />.
            </summary>
            <typeparam name="T1">The type of the first value to test.</typeparam>
            <typeparam name="T2">The type of the second value to test.</typeparam>
            <typeparam name="T3">The type of the third value to test.</typeparam>
            <typeparam name="T4">The type of the fourth value to test.</typeparam>
            <param name="value1">The first value to test.</param>
            <param name="value2">The second value to test.</param>
            <param name="value3">The third value to test.</param>
            <param name="value4">The fourth value to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">
            <para><paramref name="value1" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="value2" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="value3" /> is <see langword="null" />.</para>
            <para>-or-</para>
            <para><paramref name="value4" /> is <see langword="null" />.</para>
            </exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.NotNullOrEmpty(System.String)">
            <summary>
            Checks that <paramref name="value" /> is not <see langword="null" /> or a zero-length string.
            </summary>
            <param name="value">The value to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException"><paramref name="value" /> is <see langword="null" /> or zero-length.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.Null(System.Object)">
            <summary>
            Checks that <paramref name="value" /> is <see langword="null" />.
            </summary>
            <param name="value">The object to test.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException"><paramref name="value" /> is not <see langword="null" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Assumes.FailFast(System.String)">
            <summary>
            Throws a new <see cref="T:Cadru.Contracts.AssumptionException" /> and a <see cref="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)" /> assertion failure.
            </summary>
            <param name="message">The message of the resulting AssumptionException.</param>
            <exception cref="T:Cadru.Contracts.AssumptionException">An assumption failed.</exception>
        </member>
        <member name="T:Cadru.Contracts.AssumptionException">
            <summary>
            The exception that is thrown when an assumption fails.
            </summary>
        </member>
        <member name="M:Cadru.Contracts.AssumptionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Contracts.AssumptionException" /> class.
            </summary>
        </member>
        <member name="M:Cadru.Contracts.AssumptionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Contracts.AssumptionException" /> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cadru.Contracts.AssumptionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Contracts.AssumptionException" /> class with a specified
            error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a <see langword="null" /> if no inner exception is specified.</param>
        </member>
        <member name="T:Cadru.Contracts.ContractArgumentValidatorAttribute">
            <summary>
            Enables factoring legacy if-then-throw into separate methods for reuse and full control over
            thrown exception and arguments.
            </summary>
            <devdoc>
            Important: the ContractArgumentValidatorAttribute type is not needed in the .Net Framework
            prior to mscorlib.dll 4.5. In order to use this feature in earlier versions, please add the
            file ContractExtensions.cs or ContractExtensions.vb to all of your projects that contain
            contract validator methods.
            </devdoc>
        </member>
        <member name="T:Cadru.Contracts.Internal.EnumerableExtensions">
            <summary>
            Provides basic routines for common sequence and collection manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Contracts.Internal.EnumerableExtensions.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines if the collection contains values.
            </summary>
            <param name="source">The collection to test.</param>
            <returns><see langword="true" /> if the collection does not contain values;
            otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Cadru.Contracts.Internal.EnumerableExtensions.IsNull(System.Collections.IEnumerable)">
            <summary>
            Determines if the collection is <see langword="null" />.
            </summary>
            <param name="source">The collection to test.</param>
            <returns><see langword="true" /> if the collection is <see langword="null" />;
            otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Cadru.Contracts.Internal.EnumerableExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines if the collection is <see langword="null" /> or contains values.
            </summary>
            <param name="source">The collection to test.</param>
            <returns><see langword="true" /> if the collection is <see langword="null" />
            or does not contain values; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Cadru.Contracts.Internal.ExceptionBuilder">
            <summary>
            Provides methods to create specific exceptions.
            </summary>
        </member>
        <member name="M:Cadru.Contracts.Internal.ExceptionBuilder.CreateArgumentException(System.String,System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentException" />.
            </summary>
            <param name="parameterName">The name of the parameter that caused the exception.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <returns>A new <see cref="T:System.ArgumentException" />.</returns>
        </member>
        <member name="M:Cadru.Contracts.Internal.ExceptionBuilder.CreateArgumentNullException(System.String,System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentNullException" />.
            </summary>
            <param name="parameterName">The name of the parameter that caused the exception.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <returns>A new <see cref="T:System.ArgumentNullException" />.</returns>
        </member>
        <member name="M:Cadru.Contracts.Internal.ExceptionBuilder.CreateArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentOutOfRangeException" />.
            </summary>
            <param name="parameterName">The name of the parameter that caused the exception.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <returns>A new <see cref="T:System.ArgumentOutOfRangeException" />.</returns>
        </member>
        <member name="M:Cadru.Contracts.Internal.ExceptionBuilder.CreateContainsNullElement(System.String)">
            <summary>
            Create an exception indicating that an array or collection element was <see langword="null" />.
            </summary>
            <param name="parameterName">The name of the parameter that caused the exception.</param>
            <returns>A new <see cref="T:System.ArgumentException" />.</returns>
        </member>
        <member name="M:Cadru.Contracts.Internal.ExceptionBuilder.CreateFormatException(System.String)">
            <summary>
            Create a new <see cref="T:System.FormatException" />.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <returns>A new <see cref="T:System.FormatException" />.</returns>
        </member>
        <member name="M:Cadru.Contracts.Internal.ExceptionBuilder.CreateInvalidOperation(System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentException" />.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <returns>A new <see cref="T:System.InvalidOperationException" />.</returns>
        </member>
        <member name="M:Cadru.Contracts.Internal.ExceptionBuilder.CreateNotOverriddenByDerived(System.String)">
            <summary>
            Create an exception indicating that a member was not overridden by a derived class.
            </summary>
            <param name="memberName">The name of the member that caused the exception.</param>
            <returns>A new <see cref="T:System.NotImplementedException" />.</returns>
        </member>
        <member name="M:Cadru.Contracts.Internal.ExceptionBuilder.CreateObjectDisposed(System.String)">
            <summary>
            Create a new <see cref="T:System.ObjectDisposedException" />.
            </summary>
            <param name="objectName">A string containing the name of the disposed object.</param>
            <returns>A new <see cref="T:System.ObjectDisposedException" />.</returns>
        </member>
        <member name="M:Cadru.Contracts.Internal.ExceptionBuilder.Format(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent
            of the value of a corresponding <see cref="T:System.String" /> instance in a specified array.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arguments">A <see cref="T:System.String" /> array containing zero or more strings to format.</param>
            <returns>A copy of format in which the format items have been replaced by the corresponding
            instances of <see cref="T:System.String" /> in args.</returns>
        </member>
        <member name="T:Cadru.Contracts.Internal.ValidatedNotNullAttribute">
            <summary>
            Indicates to Code Analysis that a method validates a particular parameter.
            </summary>
        </member>
        <member name="T:Cadru.Contracts.Requires">
            <summary>
            Provides a set of methods to simplify code contract requirements.
            </summary>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsEnum(System.Enum,System.String)">
            <summary>
            Checks that <paramref name="value" /> is an enumerated type.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" />  is not an enumerated type.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsEnum(System.Object,System.String)">
            <summary>
            Checks that <paramref name="value" /> is an enumerated type.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" />  is not an enumerated type.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsFalse(System.Boolean)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="true" />.
            </summary>
            <param name="condition"><see langword="false" /> to prevent a message being displayed; otherwise, <see langword="true" />.</param>
            <exception cref="T:System.InvalidOperationException">The condition is <see langword="true" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsFalse(System.Boolean,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="true" />.
            </summary>
            <param name="condition"><see langword="false" /> to prevent a message being displayed; otherwise, <see langword="true" />.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.InvalidOperationException">The condition is <see langword="true" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="true" />.
            </summary>
            <param name="condition"><see langword="false" /> to prevent a message being displayed; otherwise, <see langword="true" />.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentException">The condition is <see langword="true" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsTrue(System.Boolean)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="false" />.
            </summary>
            <param name="condition"><see langword="true" /> to prevent a message being displayed; otherwise, <see langword="false" />.</param>
            <exception cref="T:System.InvalidOperationException">The condition is <see langword="false" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsTrue(System.Boolean,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="false" />.
            </summary>
            <param name="condition"><see langword="true" /> to prevent a message being displayed; otherwise, <see langword="false" />.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.InvalidOperationException">The condition is <see langword="false" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="false" />.
            </summary>
            <param name="condition"><see langword="true" /> to prevent a message being displayed; otherwise, <see langword="false" />.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentException">The condition is <see langword="false" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsType(System.Object,System.Type,System.String)">
            <summary>
            Checks that <paramref name="value" /> is an enumerated type.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="expectedType">The type <paramref name="value" /> is expected to be.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" />  is not an enumerated type.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.IsType``1(System.Object,System.String)">
            <summary>
            Checks that <paramref name="value" /> is an enumerated type.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" />  is not an enumerated type.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNull``1(``0,System.String)">
            <summary>
            Checks that <paramref name="value" /> is not <see langword="null" />.
            </summary>
            <typeparam name="T">The type of the value to test.</typeparam>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNull``1(``0,System.String,System.String)">
            <summary>
            Checks that <paramref name="value" /> is not <see langword="null" />.
            </summary>
            <typeparam name="T">The type of the value to test.</typeparam>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullElements(System.Collections.IEnumerable,System.String)">
            <summary>
            Checks that <paramref name="values" /> is not <see langword="null" />
            and contains no <see langword="null" /> elements.
            </summary>
            <param name="values">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="values" /> contains a <see langword="null" /> element.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Checks that <paramref name="value" /> is not <see langword="null" /> or a zero-length string.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is a zero-length string.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Checks that <paramref name="value" /> is not <see langword="null" /> or a zero-length string.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is a zero-length string.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullOrEmpty(System.Collections.IEnumerable,System.String)">
            <summary>
            Checks that <paramref name="values" /> is not <see langword="null" /> or empty.
            </summary>
            <param name="values">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="values" /> is empty.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullOrEmpty(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Checks that <paramref name="values" /> is not <see langword="null" /> or empty.
            </summary>
            <param name="values">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="values" /> is empty.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Checks that <paramref name="value" /> is not <see langword="null" /> or a zero-length string.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is a zero-length string.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.NotNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
            Checks that <paramref name="value" /> is not <see langword="null" /> or a zero-length string.
            </summary>
            <param name="value">The parameter to test.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is a zero-length string.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.ValidElements``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.String,System.String)">
            <summary>
            Checks that <paramref name="values" /> is not <see langword="null" />
            and contains valid elements based on the given predicate.
            </summary>
            <typeparam name="T">The type of the members of <paramref name="values" />.</typeparam>
            <param name="values">The parameter to test.</param>
            <param name="match">The predicate used to test the elements.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values" /> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="values" /> contains an element which does not match the given predicate.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.ValidRange(System.Boolean,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="true" />.
            </summary>
            <param name="condition"><see langword="false" /> to prevent a message being displayed; otherwise, <see langword="true" />.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The condition is <see langword="true" />.</exception>
        </member>
        <member name="M:Cadru.Contracts.Requires.ValidRange(System.Boolean,System.String,System.String)">
            <summary>
            Checks for a condition and throws an exception if the condition is <see langword="true" />.
            </summary>
            <param name="condition"><see langword="false" /> to prevent a message being displayed; otherwise, <see langword="true" />.</param>
            <param name="parameterName">The name of the parameter being tested.</param>
            <param name="message">A message to be used in the resulting exception.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The condition is <see langword="true" />.</exception>
        </member>
        <member name="T:Cadru.Contracts.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.Argument_EnumIllegalVal">
            <summary>
              Looks up a localized string similar to Illegal enum value: {0}..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.Argument_InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for this usage of the type {1}..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.Argument_InvalidFlag">
            <summary>
              Looks up a localized string similar to Value of flags is invalid..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.Argument_InvalidIndexValuesString">
            <summary>
              Looks up a localized string similar to The starting index and ending index refer to the same location in the string..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.Argument_NullElement">
            <summary>
              Looks up a localized string similar to {0} cannot contain a null (Nothing in Visual Basic) element..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.Argument_StartIndexGreaterThanEndIndex">
            <summary>
              Looks up a localized string similar to The starting index refers to a location that is after the ending index..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.Argument_StartIndexGreaterThanEndIndexString">
            <summary>
              Looks up a localized string similar to The starting index refers to a location in the string that is after the ending index..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.Argument_StringZeroLength">
            <summary>
              Looks up a localized string similar to String cannot be of zero length..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.Argument_UnixTimestampIsInvalid">
            <summary>
              Looks up a localized string similar to The supplied UnixTimestamp represents an invalid time.  For example, when the clock is adjusted forward, any time in the period that is skipped is invalid..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.ArgumentException_EmptyString">
            <summary>
              Looks up a localized string similar to {0} cannot be an empty string..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.ArgumentExceptionMustBeEnum">
            <summary>
              Looks up a localized string similar to Type provided must be an Enum..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.ArgumentNull_String">
            <summary>
              Looks up a localized string similar to String reference not set to an instance of a String..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.ArgumentOutOfRange_IndexLessThanLength">
            <summary>
              Looks up a localized string similar to Index must be less than the length of string..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.ArgumentOutOfRange_IndexLessThanZero">
            <summary>
              Looks up a localized string similar to Index must be non-negative..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.ArgumentOutOfRange_IndexString">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the length of the string..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.ArgumentOutOfRange_Range">
            <summary>
              Looks up a localized string similar to Valid values are between {0} and {1}..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.ArgumentOutOfRange_RangeInclusive">
            <summary>
              Looks up a localized string similar to Valid values are between {0} and {1}, inclusive..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.ArgumentOutOfRange_UpperBound">
            <summary>
              Looks up a localized string similar to The upper bound must be greater than the lower bound ..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.AssumptionException_EmptyMessage">
            <summary>
              Looks up a localized string similar to Assumption failed..
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.AssumptionException_Message">
            <summary>
              Looks up a localized string similar to Assumption failed. {0}.
            </summary>
        </member>
        <member name="P:Cadru.Contracts.Resources.Strings.NotImplemented_NotOverriddenByDerived">
            <summary>
              Looks up a localized string similar to The {0} member must be overridden by a derived class..
            </summary>
        </member>
    </members>
</doc>