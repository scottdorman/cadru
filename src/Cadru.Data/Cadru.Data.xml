<?xml version="1.0"?>
<!--
Sample license text.
-->
<doc>
    <assembly>
        <name>Cadru.Data</name>
    </assembly>
    <members>
        <member name="T:Cadru.Data.DataReaderExtensions">
            <summary>
            Extension methods for working with an <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="M:Cadru.Data.DataReaderExtensions.Field``1(System.Data.IDataReader,System.Int32)">
            <summary>
            Provides strongly-typed access to each of the column values in the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <typeparam name="T">The return type of the column.</typeparam>
            <param name="reader">
            The input <see cref="T:System.Data.IDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnIndex">The column index.</param>
            <returns>
            The value, of type <typeparamref name="T"/>, of the column specified
            by <paramref name="columnIndex"/>.
            </returns>
        </member>
        <member name="M:Cadru.Data.DataReaderExtensions.Field``1(System.Data.IDataReader,System.String)">
            <summary>
            Provides strongly-typed access to each of the column values in the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <typeparam name="T">The return type of the column.</typeparam>
            <param name="reader">
            The input <see cref="T:System.Data.IDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnName">The column name.</param>
            <returns>
            The value, of type <typeparamref name="T"/>, of the column specified
            by <paramref name="columnName"/>.
            </returns>
        </member>
        <member name="M:Cadru.Data.DataReaderExtensions.FieldOrDefault``1(System.Data.IDataReader,System.Int32)">
            <summary>
            Provides strongly-typed access to each of the column values in the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <typeparam name="T">The return type of the column.</typeparam>
            <param name="reader">
            The input <see cref="T:System.Data.IDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnIndex">The column index.</param>
            <returns>
            The value, of type <typeparamref name="T"/>, of the column specified
            by <paramref name="columnIndex"/> or the default for
            <typeparamref name="T"/> if the field is not found.
            </returns>
        </member>
        <member name="M:Cadru.Data.DataReaderExtensions.FieldOrDefault``1(System.Data.IDataReader,System.Int32,``0)">
            <summary>
            Provides strongly-typed access to each of the column values in the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <typeparam name="T">The return type of the column.</typeparam>
            <param name="reader">
            The input <see cref="T:System.Data.IDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnIndex">The column index.</param>
            <param name="nullValue">The value to use as the default.</param>
            <returns>
            The value, of type <typeparamref name="T"/>, of the column specified
            by <paramref name="columnIndex"/> or <paramref name="nullValue"/> if
            the field is not found.
            </returns>
        </member>
        <member name="M:Cadru.Data.DataReaderExtensions.IsNull(System.Data.IDataReader,System.Int32)">
            <summary>
            Indicates if the value of the specified column in the
            <see cref="T:System.Data.IDataReader"/> is <see langword="null"/>.
            </summary>
            <param name="reader">
            The input <see cref="T:System.Data.IDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnIndex">The column index.</param>
            <returns>
            <see langword="true"/> if the value is <see langword="null"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Data.DataReaderExtensions.IsNullOrWhiteSpace(System.Data.IDataReader,System.Int32)">
            <summary>
            Indicates if the value of the specified column in the
            <see cref="T:System.Data.IDataReader"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="reader">
            The input <see cref="T:System.Data.IDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnIndex">The column index.</param>
            <returns>
            <see langword="true"/> if the value is <see langword="null"/> or
            <see cref="F:System.String.Empty"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Cadru.Data.Excel.ExcelDataReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access
            to data contained in an Excel spreadsheet (.xlsx) file.
            </summary>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.Data.Excel.DataReaderExtensions"/> class.
            </summary>
            <param name="path">The path to the Excel spreadsheet file.</param>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.Data.Excel.DataReaderExtensions"/> class.
            </summary>
            <param name="stream">
            An unopened stream to the Excel spreadsheet file.
            </param>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.CurrentRowIndex">
            <summary>
            Gets the index of the current row in the spreadsheet.
            </summary>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.CurrentSheetId">
            <summary>
            Gets the current sheet Id.
            </summary>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.CurrentSheetIndex">
            <summary>
            Gets the index of the current sheet in the spreadsheet.
            </summary>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.CurrentSheetName">
            <summary>
            Gets the current sheet name.
            </summary>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.FieldNames">
            <summary>
            Gets the column header names.
            </summary>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.FirstRowAsHeader">
            <summary>
            Gets or sets a value indicating whether or not the first row
            contains column header names.
            </summary>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.IsClosed">
            <summary>
            Gets a value indicating if the reader is closed.
            </summary>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.ResultsCount">
            <summary>
            Gets a value indicating the number of sheets read.
            </summary>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.SheetNames">
            <summary>
            Gets the sheet names.
            </summary>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.Item(System.String)">
            <summary>
            Gets a value from the current sheet by name.
            </summary>
            <param name="name">The column header name of the value to get.</param>
            <returns>The value associated with the column header.</returns>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.Item(System.Int32)">
            <summary>
            Gets a value from the current sheet by index.
            </summary>
            <param name="i">The column index of the value to get.</param>
            <returns>The value at the column index.</returns>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.NextResult(System.String,System.Boolean)">
            <summary>
            Advances the reader to the named sheet.
            </summary>
            <param name="sheetName">The name of the sheet to advance to.</param>
            <param name="firstRowAsHeader">
            Indicates whether or not the first row contains column header names.
            </param>
            <returns>
            <see langword="true"/> if the reader was able to advance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.NextResult(System.String)">
            <summary>
            Advances the reader to the named sheet.
            </summary>
            <param name="sheetName">The name of the sheet to advance to.</param>
            <returns>
            <see langword="true"/> if the reader was able to advance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.Depth">
            <inheritdoc/>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.RecordsAffected">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetColumnIndexByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.Close">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetSchemaTable">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.IsCurrentRowEmpty">
            <summary>
            Gets a value indicating if the current row is empty.
            </summary>
            <returns><see langword="true"/> if the current row is empty; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.NextResult">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.Read">
            <inheritdoc/>
        </member>
        <member name="P:Cadru.Data.Excel.ExcelDataReader.FieldCount">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetBoolean(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetByte(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetChar(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetData(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetDataTypeName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetDateTime(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetDecimal(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetDouble(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetFieldType(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetFloat(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetGuid(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetInt16(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetInt32(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetInt64(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetOrdinal(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetString(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.GetValues(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataReader.IsDBNull(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Data.Excel.DataReaderExtensions">
            <summary>
            Extension methods for working with an <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>.
            </summary>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.Field``1(Cadru.Data.Excel.ExcelDataReader,System.Int32)">
            <summary>
            Provides strongly-typed access to each of the column values in the <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>.
            </summary>
            <typeparam name="T">The return type of the column.</typeparam>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnIndex">The column index.</param>
            <returns>
            The value, of type <typeparamref name="T"/>, of the column specified
            by <paramref name="columnIndex"/>.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.Field``1(Cadru.Data.Excel.ExcelDataReader,System.String)">
            <summary>
            Provides strongly-typed access to each of the column values in the <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>.
            </summary>
            <typeparam name="T">The return type of the column.</typeparam>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnName">The column name.</param>
            <returns>
            The value, of type <typeparamref name="T"/>, of the column specified
            by <paramref name="columnName"/>.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.FieldOrDefault``1(Cadru.Data.Excel.ExcelDataReader,System.Int32)">
            <summary>
            Provides strongly-typed access to each of the column values in the <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>.
            </summary>
            <typeparam name="T">The return type of the column.</typeparam>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnIndex">The column index.</param>
            <returns>
            The value, of type <typeparamref name="T"/>, of the column specified
            by <paramref name="columnIndex"/> or the default for
            <typeparamref name="T"/> if the field is not found.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.FieldOrDefault``1(Cadru.Data.Excel.ExcelDataReader,System.String)">
            <summary>
            Provides strongly-typed access to each of the column values in the <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>.
            </summary>
            <typeparam name="T">The return type of the column.</typeparam>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnName">The column name.</param>
            <returns>
            The value, of type <typeparamref name="T"/>, of the column specified
            by <paramref name="columnName"/> or the default for
            <typeparamref name="T"/> if the field is not found.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.FieldOrDefault``1(Cadru.Data.Excel.ExcelDataReader,System.Int32,``0)">
            <summary>
            Provides strongly-typed access to each of the column values in the <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>.
            </summary>
            <typeparam name="T">The return type of the column.</typeparam>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnIndex">The column index.</param>
            <param name="nullValue">The value to use as the default.</param>
            <returns>
            The value, of type <typeparamref name="T"/>, of the column specified
            by <paramref name="columnIndex"/> or <paramref name="nullValue"/> if
            the field is not found.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.FieldOrDefault``1(Cadru.Data.Excel.ExcelDataReader,System.String,``0)">
            <summary>
            Provides strongly-typed access to each of the column values in the <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>.
            </summary>
            <typeparam name="T">The return type of the column.</typeparam>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnName">The column name.</param>
            <param name="nullValue">The value to use as the default.</param>
            <returns>
            The value, of type <typeparamref name="T"/>, of the column specified
            by <paramref name="columnName"/> or <paramref name="nullValue"/> if
            the field is not found.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.IsNull(Cadru.Data.Excel.ExcelDataReader,System.Int32)">
            <summary>
            Indicates if the value of the specified column in the
            <see cref="T:Cadru.Data.Excel.ExcelDataReader"/> is <see langword="null"/>.
            </summary>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnIndex">The column index.</param>
            <returns>
            <see langword="true"/> if the value is <see langword="null"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.IsNull(Cadru.Data.Excel.ExcelDataReader,System.String)">
            <summary>
            Indicates if the value of the specified column in the
            <see cref="T:Cadru.Data.Excel.ExcelDataReader"/> is <see langword="null"/>.
            </summary>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnName">The column name.</param>
            <returns>
            <see langword="true"/> if the value is <see langword="null"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.IsNullOrWhiteSpace(Cadru.Data.Excel.ExcelDataReader,System.Int32)">
            <summary>
            Indicates if the value of the specified column in the
            <see cref="T:Cadru.Data.Excel.ExcelDataReader"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnIndex">The column index.</param>
            <returns>
            <see langword="true"/> if the value is <see langword="null"/> or
            <see cref="F:System.String.Empty"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.IsNullOrWhiteSpace(Cadru.Data.Excel.ExcelDataReader,System.String)">
            <summary>
            Indicates if the value of the specified column in the
            <see cref="T:Cadru.Data.Excel.ExcelDataReader"/> is <see langword="null"/> or <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="columnName">The column name.</param>
            <returns>
            <see langword="true"/> if the value is <see langword="null"/> or
            <see cref="F:System.String.Empty"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.ToDelimitedString(Cadru.Data.Excel.ExcelDataReader)">
            <summary>
            Formats the values of the current row in the
            <see cref="T:Cadru.Data.Excel.ExcelDataReader"/> as a comma delimited string.
            </summary>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <returns>
            The values of the current row in the <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>
            as a comma delimited string.
            </returns>
        </member>
        <member name="M:Cadru.Data.Excel.DataReaderExtensions.ToDelimitedString(Cadru.Data.Excel.ExcelDataReader,System.Boolean)">
            <summary>
            Formats the values of the current row in the
            <see cref="T:Cadru.Data.Excel.ExcelDataReader"/> as a comma delimited string.
            </summary>
            <param name="reader">
            The input <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>, which acts as the this
            instance for the extension method.
            </param>
            <param name="includeHeaders">
            Indicates if the colunn headers should be included in the output.
            </param>
            <returns>
            The values of the current row in the <see cref="T:Cadru.Data.Excel.ExcelDataReader"/>
            as a comma delimited string.
            </returns>
        </member>
        <member name="T:Cadru.Data.Excel.ExcelDataWriter">
            <summary>
            Represents a writer for Excel data
            </summary>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Data.Excel.ExcelDataWriter"/> class.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Cadru.Data.Excel.ExcelDataWriter.AddWorksheet``1(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a new worksheet to the spreadsheet.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="headers"></param>
            <param name="data"></param>
        </member>
        <member name="M:Cadru.Data.FileSystem.OpenTextFieldParser(System.String)">
            <summary>
            Return an instance of a TextFieldParser for the given file.
            </summary>
            <param name="file">The path to the file to parse.</param>
            <returns>An instance of a TextFieldParser.</returns>
        </member>
        <member name="M:Cadru.Data.FileSystem.OpenTextFieldParser(System.String,System.String[])">
            <summary>
            Return an instance of a TextFieldParser for the given file using the given delimiters.
            </summary>
            <param name="file">The path to the file to parse.</param>
            <param name="delimiters">A list of delimiters.</param>
            <returns>An instance of a TextFieldParser</returns>
        </member>
        <member name="M:Cadru.Data.FileSystem.OpenTextFieldParser(System.String,System.Int32[])">
            <summary>
            Return an instance of a TextFieldParser for the given file using the given field widths.
            </summary>
            <param name="file">The path to the file to parse.</param>
            <param name="fieldWidths">A list of field widths.</param>
            <returns>An instance of a TextFieldParser</returns>
        </member>
        <member name="M:Cadru.Data.FileSystem.NormalizeFilePath(System.String,System.String)">
            <summary>
            Normalize the path, but throw exception if the path ends with separator.
            </summary>
            <param name="path">The input path.</param>
            <param name="paramName">The parameter name to include in the exception if one is raised.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="M:Cadru.Data.FileSystem.NormalizePath(System.String)">
            <summary>
            Get full path, get long format, and remove any pending separator.
            </summary>
            <param name="path">The path to be normalized.</param>
            <returns>The normalized path.</returns>
            <remarks>Keep this function since we might change the implementation / behavior later.</remarks>
        </member>
        <member name="M:Cadru.Data.FileSystem.CheckFilePathTrailingSeparator(System.String,System.String)">
            <summary>
            Throw ArgumentException if the file path ends with a separator.
            </summary>
            <param name="path">The file path.</param>
            <param name="paramName">The parameter name to include in ArgumentException.</param>
        </member>
        <member name="M:Cadru.Data.FileSystem.RemoveEndingSeparator(System.String)">
            <summary>
            Removes all directory separators at the end of a path.
            </summary>
            <param name="path">a full or relative path.</param>
            <returns>If Path is a root path, the same value. Otherwise, removes any directory separators at the end.</returns>
            <remarks>We decided not to return path with separators at the end.</remarks>
        </member>
        <member name="T:Cadru.Data.IO.FieldType">
            <summary>
            Indicate the kind of file being read, either delimited or fixed length
            </summary>
        </member>
        <member name="F:Cadru.Data.IO.FieldType.Delimited">
            <summary>
            The file being read has delimited records.
            </summary>
        </member>
        <member name="F:Cadru.Data.IO.FieldType.FixedWidth">
            <summary>
            The file being read has fixed length records.
            </summary>
        </member>
        <member name="T:Cadru.Data.IO.NullRemovalStream">
            <summary>
            A stream implementation that removes consecutive null bytes above a
            threshold from source
            </summary>
        </member>
        <member name="M:Cadru.Data.IO.NullRemovalStream.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Data.IO.NullRemovalStream"/> class.
            </summary>
            <param name="source">
            A <see cref="T:Stream"/> pointing to the source data
            </param>
            <param name="addMark">
            Indicates if a mark ([removed x null bytes]) should be added to
            indicate removal
            </param>
            <param name="threshold">
            The number above which any consecutive null bytes above this
            threshold will be removed or replaced by a mark.
            </param>
            <param name="bufferSize">Size of buffer</param>
        </member>
        <member name="P:Cadru.Data.IO.NullRemovalStream.CanRead">
            <inheritdoc cref="P:System.IO.Stream.CanRead"/>
        </member>
        <member name="P:Cadru.Data.IO.NullRemovalStream.CanSeek">
            <inheritdoc cref="P:System.IO.Stream.CanSeek"/>
        </member>
        <member name="P:Cadru.Data.IO.NullRemovalStream.CanWrite">
            <inheritdoc cref="P:System.IO.Stream.CanWrite"/>
        </member>
        <member name="P:Cadru.Data.IO.NullRemovalStream.Length">
            <inheritdoc cref="P:System.IO.Stream.Length"/>
        </member>
        <member name="P:Cadru.Data.IO.NullRemovalStream.Position">
            <inheritdoc cref="P:System.IO.Stream.Position"/>
        </member>
        <member name="M:Cadru.Data.IO.NullRemovalStream.Close">
            <inheritdoc cref="M:System.IO.Stream.Close"/>
        </member>
        <member name="M:Cadru.Data.IO.NullRemovalStream.Flush">
            <inheritdoc cref="M:System.IO.Stream.Flush"/>
        </member>
        <member name="M:Cadru.Data.IO.NullRemovalStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:Cadru.Data.IO.NullRemovalStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/>
        </member>
        <member name="M:Cadru.Data.IO.NullRemovalStream.SetLength(System.Int64)">
            <inheritdoc cref="M:System.IO.Stream.SetLength(System.Int64)"/>
        </member>
        <member name="M:Cadru.Data.IO.NullRemovalStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="T:Cadru.Data.IO.NullRemovalStreamReader">
            <summary>
            Implements a <see cref="T:System.IO.TextReader"/> that reads characters from a byte
            stream in a particular encoding.
            </summary>
        </member>
        <member name="M:Cadru.Data.IO.NullRemovalStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.Data.IO.NullRemovalStreamReader"/> class for the specified stream
            based on the specified character encoding, byte order mark detection
            option, and buffer size, and optionally leaves the stream open.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="addMark">
            Indicates if a mark ([removed x null bytes]) should be added to
            indicate removal
            </param>
            <param name="threshold">
            The number above which any consecutive null bytes above this
            threshold will be removed or replaced by a mark.
            </param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">The minimum buffer size.</param>
            <param name="detectEncoding">
            <see langword="true"/> to look for byte order marks at the beginning
            of the file; otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="T:Cadru.Data.IO.QuoteDelimitedFieldBuilder">
            <summary>
            Helper class that when passed a line and an index to a quote delimited
            field will build the field and handle escaped quotes
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.QuoteDelimitedFieldBuilder.#ctor(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Creates an instance of the class and sets some properties
            </summary>
            <param name="delimiterRegex">
            The regex used to find any of the delimiters
            </param>
            <param name="spaceChars">
            Characters treated as space (usually space and tab)
            </param>
            <remarks></remarks>
        </member>
        <member name="P:Cadru.Data.IO.QuoteDelimitedFieldBuilder.DelimiterLength">
            <summary>
            The length of the closing delimiter if one was found
            </summary>
            <value>The length of the delimiter</value>
            <remarks></remarks>
        </member>
        <member name="P:Cadru.Data.IO.QuoteDelimitedFieldBuilder.Field">
            <summary>
            The field being built
            </summary>
            <value>The field</value>
            <remarks></remarks>
        </member>
        <member name="P:Cadru.Data.IO.QuoteDelimitedFieldBuilder.FieldFinished">
            <summary>
            Indicates whether or not the field has been built.
            </summary>
            <value>True if the field has been built, otherwise False</value>
            <remarks>
            If the Field has been built, the Field property will return the
            entire field
            </remarks>
        </member>
        <member name="P:Cadru.Data.IO.QuoteDelimitedFieldBuilder.Index">
            <summary>
            The current index on the line. Used to indicate how much of the line
            was used to build the field
            </summary>
            <value>The current position on the line</value>
            <remarks></remarks>
        </member>
        <member name="P:Cadru.Data.IO.QuoteDelimitedFieldBuilder.MalformedLine">
            <summary>
            Indicates that the current field breaks the subset of csv rules we enforce
            </summary>
            <value>True if the line is malformed, otherwise False</value>
            <remarks>
            The rules we enforce are: Embedded quotes must be escaped Only space
            characters can occur between a delimiter and a quote
            </remarks>
        </member>
        <member name="M:Cadru.Data.IO.QuoteDelimitedFieldBuilder.BuildField(System.String,System.Int32)">
            <summary>
            Builds a field by walking through the passed in line starting at StartAt
            </summary>
            <param name="line">The line containing the data</param>
            <param name="startAt">
            The index at which we start building the field
            </param>
            <remarks></remarks>
        </member>
        <member name="T:Cadru.Data.IO.TextFieldParser">
            <summary>
            Enables parsing very large delimited or fixed width field files
            </summary>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.#ctor(System.String)">
            <summary>
            Creates a new TextFieldParser to parse the passed in file
            </summary>
            <param name="path">The path of the file to be parsed</param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates a new TextFieldParser to parse the passed in file
            </summary>
            <param name="path">The path of the file to be parsed</param>
            <param name="defaultEncoding">
            The decoding to default to if encoding isn't determined from file
            </param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a new TextFieldParser to parse the passed in file
            </summary>
            <param name="path">The path of the file to be parsed</param>
            <param name="defaultEncoding">
            The decoding to default to if encoding isn't determined from file
            </param>
            <param name="detectEncoding">
            Indicates whether or not to try to detect the encoding from the BOM
            </param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.#ctor(System.IO.Stream)">
            <summary>
            Creates a new TextFieldParser to parse a file represented by the
            passed in stream
            </summary>
            <param name="stream"></param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new TextFieldParser to parse a file represented by the
            passed in stream
            </summary>
            <param name="stream"></param>
            <param name="defaultEncoding">
            The decoding to default to if encoding isn't determined from file
            </param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a new TextFieldParser to parse a file represented by the
            passed in stream
            </summary>
            <param name="stream"></param>
            <param name="defaultEncoding">
            The decoding to default to if encoding isn't determined from file
            </param>
            <param name="detectEncoding">
            Indicates whether or not to try to detect the encoding from the BOM
            </param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Creates a new TextFieldParser to parse a file represented by the
            passed in stream
            </summary>
            <param name="stream"></param>
            <param name="defaultEncoding">
            The decoding to default to if encoding isn't determined from file
            </param>
            <param name="detectEncoding">
            Indicates whether or not to try to detect the encoding from the BOM
            </param>
            <param name="leaveOpen">
            Indicates whether or not to leave the passed in stream open
            </param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.#ctor(System.IO.TextReader)">
            <summary>
            Creates a new TextFieldParser to parse a stream or file represented
            by the passed in TextReader
            </summary>
            <param name="reader">The TextReader that does the reading</param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.Finalize">
            <summary>
            Clean up following dispose pattern
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Cadru.Data.IO.TextFieldParser.ChangeBufferFunction">
            <summary>
            Function to call when we're at the end of the buffer. We either re
            fill the buffer or change the size of the buffer
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Cadru.Data.IO.TextFieldParser.CommentTokens">
            <summary>
            Gets the strings that indicate a line is a comment
            </summary>
        </member>
        <member name="P:Cadru.Data.IO.TextFieldParser.Delimiters">
            <summary>
            Gets the delimiters used in a file
            </summary>
        </member>
        <member name="P:Cadru.Data.IO.TextFieldParser.EndOfData">
            <summary>
            Gets a value indicating whether or not there is any data (non
            ignorable lines) left to read in the file
            </summary>
            <value>
            <see langword="true"/> if there is more data to read; otherwise <see langword="false"/>
            </value>
            <remarks>This ignores comments and blank lines.</remarks>
        </member>
        <member name="P:Cadru.Data.IO.TextFieldParser.ErrorLine">
            <summary>
            Returns the last malformed line if there is one.
            </summary>
            <value>The last malformed line</value>
        </member>
        <member name="P:Cadru.Data.IO.TextFieldParser.ErrorLineNumber">
            <summary>
            Returns the line number of last malformed line if there is one.
            </summary>
            <value>The last malformed line number</value>
        </member>
        <member name="P:Cadru.Data.IO.TextFieldParser.FieldWidths">
            <summary>
            Gets or sets the widths of the fields for reading a fixed width file
            </summary>
            <value>An array of the widths</value>
        </member>
        <member name="P:Cadru.Data.IO.TextFieldParser.HasFieldsEnclosedInQuotes">
            <summary>
            Indicates whether or not to handle quotes in a csv friendly way
            </summary>
            <value>True if we escape quotes otherwise false</value>
        </member>
        <member name="P:Cadru.Data.IO.TextFieldParser.LineNumber">
            <summary>
            The line to the right of the cursor.
            </summary>
            <value>The number of the line</value>
            <remarks>
            LineNumber returns the location in the file and has nothing to do
            with rows or fields
            </remarks>
        </member>
        <member name="P:Cadru.Data.IO.TextFieldParser.TextFieldType">
            <summary>
            Gets or sets a value indicating the type of file being read, either
            fixed width or delimited
            </summary>
        </member>
        <member name="P:Cadru.Data.IO.TextFieldParser.TrimWhiteSpace">
            <summary>
            Indicates whether or not leading and trailing white space should be
            removed when returning a field
            </summary>
            <value><see langword="true"/> if white space should be removed; otherwise <see langword="true"/></value>
        </member>
        <member name="P:Cadru.Data.IO.TextFieldParser.EndQuotePattern">
            <summary>
            Gets the appropriate expression for finding ending quote of a field
            </summary>
            <value>The expression</value>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.Close">
            <summary>
            Closes the StreamReader
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.Dispose">
            <summary>
            Closes the StreamReader
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.PeekChars(System.Int32)">
            <summary>
            Enables looking at the passed in number of characters of the next
            data line without reading the line
            </summary>
            <param name="numberOfChars"></param>
            <returns>
            A string consisting of the first <paramref name="numberOfChars"/>
            characters of the next line
            </returns>
            <remarks>
            If <paramref name="numberOfChars"/> is greater than the next line,
            only the next line is returned
            </remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ReadFields">
            <summary>
            Reads a non ignorable line and parses it into fields
            </summary>
            <returns>The line parsed into fields</returns>
            <remarks>
            This is a data aware method. Comments and blank lines are ignored.
            </remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ReadLine">
            <summary>
            Reads and returns the next line from the file
            </summary>
            <returns>
            The line read or <see langword="null"/> if at the end of the file
            </returns>
            <remarks>
            This is data unaware method. It simply reads the next line in the file.
            </remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ReadToEnd">
            <summary>
            Reads the file starting at the current position and moving to the
            end of the file
            </summary>
            <returns>
            The contents of the file from the current position to the end of the file
            </returns>
            <remarks>
            This is not a data aware method. Everything in the file from the
            current position to the end is read
            </remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.SetCommentTokens(System.String[])">
            <summary>
            Set the comment tokens
            </summary>
            <param name="tokens">A list of the comment tokens</param>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.SetDelimiters(System.String[])">
            <summary>
            Set the delimiters
            </summary>
            <param name="delimiters">A list of the delimiters</param>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.SetFieldWidths(System.Int32[])">
            <summary>
            Set the field widths
            </summary>
            <param name="fieldWidths">A list of field widths</param>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.Dispose(System.Boolean)">
            <summary>
            Standard implementation of IDisposable.Dispose for non sealed
            classes. Classes derived from TextFieldParser should override this
            method. After doing their own cleanup, they should call this method (MyBase.Dispose(disposing))
            </summary>
            <param name="disposing">
            Indicates we are called by Dispose and not GC
            </param>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.CharacterIsInDelimiter(System.Char)">
            <summary>
            Checks to see if the passed in character is in any of the delimiters
            </summary>
            <param name="testCharacter">The character to look for</param>
            <returns>
            <see langword="true"/> if the character is found in a delimiter; otherwise <see langword="false"/>
            </returns>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.CloseReader">
            <summary>
            Closes the StreamReader
            </summary>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.FinishReading">
            <summary>
            Cleans up managed resources except the StreamReader and indicates
            reading is finished
            </summary>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.GetBeginQuotesRegex">
            <summary>
            Gets the appropriate regex for finding a field beginning with quotes
            </summary>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.GetEndOfLineIndex(System.String)">
            <summary>
            Gets the index of the first end of line character
            </summary>
            <param name="line"></param>
            <returns></returns>
            <remarks>
            When there are no end of line characters, the index is the length
            (one past the end)
            </remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.GetFixedWidthField(System.Globalization.StringInfo,System.Int32,System.Int32)">
            <summary>
            Returns the field at the passed in index
            </summary>
            <param name="line">The string containing the fields</param>
            <param name="index">The start of the field</param>
            <param name="fieldLength">The length of the field</param>
            <returns>The field</returns>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.GetWhitespacePattern">
            <summary>
            Gets the character set of white-spaces to be used in a regex pattern
            </summary>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.IgnoreLine(System.String)">
            <summary>
            Indicates whether or not the passed in line should be ignored
            </summary>
            <param name="line">The line to be tested</param>
            <returns><see langword="true"/> if the line should be ignored; otherwise <see langword="false"/></returns>
            <remarks>Lines to ignore are blank lines and comments</remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.IncreaseBufferSize">
            <summary>
            Increases the size of the buffer. Used when we are at the end of the
            buffer, we need to read more data from the file, and we can't
            discard what we've already read.
            </summary>
            <returns>The number of characters read to fill the new buffer</returns>
            <remarks>This is needed for PeekChars and EndOfData</remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.InitializeFromPath(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a StreamReader for the passed in Path
            </summary>
            <param name="path">The passed in path</param>
            <param name="defaultEncoding">
            The encoding to default to if encoding can't be detected
            </param>
            <param name="detectEncoding">
            Indicates whether or not to detect encoding from the BOM
            </param>
            <remarks>
            We validate the arguments here for the three Public constructors
            that take a Path
            </remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.InitializeFromStream(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a StreamReader for a passed in stream
            </summary>
            <param name="stream">The passed in stream</param>
            <param name="defaultEncoding">
            The encoding to default to if encoding can't be detected
            </param>
            <param name="detectEncoding">
            Indicates whether or not to detect encoding from the BOM
            </param>
            <remarks>
            We validate the arguments here for the three Public constructors
            that take a Stream
            </remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ParseDelimitedLine">
            <summary>
            Gets the next data line and parses it with the delimiters
            </summary>
            <returns>An array of the fields in the line</returns>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ParseFixedWidthLine">
            <summary>
            Gets the next data line and parses into fixed width fields
            </summary>
            <returns>An array of the fields in the line</returns>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.PeekNextDataLine(System.String@)">
            <summary>
            Returns the next data line but doesn't move the cursor
            </summary>
            <returns>
            The next data line, or <see langword="null"/> if there's no more data
            </returns>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ReadNextDataLine(System.String@)">
            <summary>
            Returns the next line of data or nothing if there's no more data to
            be read
            </summary>
            <returns>The next line of data</returns>
            <remarks>Moves the cursor past the line read</remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ReadNextLine(System.Int32@,Cadru.Data.IO.TextFieldParser.ChangeBufferFunction)">
            <summary>
            Gets the next line from the file and moves the passed in cursor past
            the line
            </summary>
            <param name="cursor">Indicates the current position in the buffer</param>
            <param name="changeBuffer">
            Function to call when we've reached the end of the buffer
            </param>
            <returns>The next line in the file</returns>
            <remarks>Returns Nothing if we are at the end of the file</remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ReadToBuffer">
            <summary>
            Reads characters from the file into the buffer
            </summary>
            <returns>
            The number of Chars read. If no Chars are read, we're at the end of
            the file
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.SlideCursorToStartOfBuffer">
            <summary>
            Moves the cursor and all the data to the right of the cursor to the
            front of the buffer. It then fills the remainder of the buffer from
            the file
            </summary>
            <returns>
            The number of Chars read in filling the remainder of the buffer
            </returns>
            <remarks>
            This should be called when we want to make maximum use of the space
            in the buffer. Characters to the left of the cursor have already
            been read and can be discarded.
            </remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ValidateAndEscapeDelimiters">
            <summary>
            Validates the delimiters and creates the Regex objects for finding
            delimiters or quotes followed by delimiters
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ValidateFieldWidths">
            <summary>
            Determines whether or not the field widths are valid, and sets the
            size of a line
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ValidateFixedWidthLine(System.Globalization.StringInfo,System.Int64)">
            <summary>
            Indicates whether or not a line is valid
            </summary>
            <param name="line">The line to be tested</param>
            <param name="lineNumber">The line number, used for exception</param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ValidatePath(System.String)">
            <summary>
            Gets full name and path from passed in path.
            </summary>
            <param name="path">The path to be validated</param>
            <returns>The full name and path</returns>
            <remarks>Throws if the file doesn't exist or if the path is malformed</remarks>
        </member>
        <member name="M:Cadru.Data.IO.TextFieldParser.ValidateReadyToRead">
            <summary>
            Checks property settings to ensure we're able to read fields.
            </summary>
            <remarks>
            Throws if we're not able to read fields with current property settings
            </remarks>
        </member>
        <member name="T:Cadru.Data.MalformedLineException">
            <summary>
            Indicates a line cannot be parsed into fields
            </summary>
        </member>
        <member name="M:Cadru.Data.MalformedLineException.#ctor">
            <summary>
            Creates a new exception with no properties set
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.MalformedLineException.#ctor(System.String,System.Int64)">
            <summary>
            Creates a new exception, setting Message and LineNumber
            </summary>
            <param name="message">The message for the exception</param>
            <param name="lineNumber">The number of the line that is malformed</param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.MalformedLineException.#ctor(System.String)">
            <summary>
            Creates a new exception, setting Message
            </summary>
            <param name="message">The message for the exception</param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.MalformedLineException.#ctor(System.String,System.Int64,System.Exception)">
            <summary>
            Creates a new exception, setting Message, LineNumber, and InnerException
            </summary>
            <param name="message">The message for the exception</param>
            <param name="lineNumber">The number of the line that is malformed</param>
            <param name="innerException">The inner exception for the exception</param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.MalformedLineException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new exception, setting Message and InnerException
            </summary>
            <param name="message">The message for the exception</param>
            <param name="innerException">The inner exception for the exception</param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.MalformedLineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used for serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Cadru.Data.MalformedLineException.LineNumber">
            <summary>
            The number of the offending line
            </summary>
            <value>The line number</value>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.MalformedLineException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Supports serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
            <remarks></remarks>
        </member>
        <member name="M:Cadru.Data.MalformedLineException.ToString">
            <summary>
            Appends extra data to string so that it's available when the exception is caught as an Exception
            </summary>
            <returns>The base ToString plus the Line Number</returns>
            <remarks></remarks>
        </member>
        <member name="T:Cadru.Data.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.Arg_ArgumentOutOfRangeException">
            <summary>
              Looks up a localized string similar to Specified argument was out of the range of valid values..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.BufferSizeTooSmall">
            <summary>
              Looks up a localized string similar to Buffer size must be 1 or more..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.CannotMovePreviousRecordInForwardOnly">
            <summary>
              Looks up a localized string similar to Cannot move to a previous record in forward-only mode..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.CannotReadRecordAtIndex">
            <summary>
              Looks up a localized string similar to Cannot read record at index &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.EnumerationFinishedOrNotStarted">
            <summary>
              Looks up a localized string similar to Enumeration has either not started or has already finished..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.EnumerationVersionCheckFailed">
            <summary>
              Looks up a localized string similar to Collection was modified; enumeration operation may not execute..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.FieldHeaderNotFound">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; field header not found..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.FieldIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Field index must be included in [0, FieldCount[. Specified field index was : &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.IO_FileNotFound_Path">
            <summary>
              Looks up a localized string similar to Could not find file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.IO_FilePathException">
            <summary>
              Looks up a localized string similar to The given file path ends with a directory separator character..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.MalformedCsvException">
            <summary>
              Looks up a localized string similar to The CSV appears to be corrupt near record &apos;{0}&apos; field &apos;{1} at position &apos;{2}&apos;. Current raw data : &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.MissingFieldActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported missing field action..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.NoCurrentRecord">
            <summary>
              Looks up a localized string similar to No current record..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.NoHeaders">
            <summary>
              Looks up a localized string similar to The CSV does not have headers (CsvReader.HasHeaders property is false)..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.NotEnoughSpaceInArray">
            <summary>
              Looks up a localized string similar to The number of fields in the record is greater than the available space from index to the end of the destination array..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.ParseErrorActionInvalidInsideParseErrorEvent">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid ParseErrorAction while inside a ParseError event..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.ParseErrorActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported ParseErrorAction..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.ReaderClosed">
            <summary>
              Looks up a localized string similar to This operation is invalid when the reader is closed..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.RecordIndexLessThanZero">
            <summary>
              Looks up a localized string similar to Record index must be 0 or more..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_BufferExceededMaxSize">
            <summary>
              Looks up a localized string similar to TextFieldParser is unable to complete the read operation because maximum buffer size has been exceeded..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_DelimiterNothing">
            <summary>
              Looks up a localized string similar to A delimiter cannot be Nothing or an empty String..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_DelimitersNothing">
            <summary>
              Looks up a localized string similar to Unable to read delimited fields because Delimiters is Nothing or empty..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_EndCharsInDelimiter">
            <summary>
              Looks up a localized string similar to TextFieldParser does not support delimiters that contain end-of-line characters..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_FieldWidthsMustPositive">
            <summary>
              Looks up a localized string similar to All field widths, except the last element, must be greater than zero. A field width less than or equal to zero in the last element indicates the last field is of variable length..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_FieldWidthsNothing">
            <summary>
              Looks up a localized string similar to Unable to read fixed width fields because FieldWidths is Nothing or empty..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_IllegalDelimiter">
            <summary>
              Looks up a localized string similar to Unable to read delimited fields because a double quote is not a legal delimiter when HasFieldsEnclosedInQuotes is set to True..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_InvalidComment">
            <summary>
              Looks up a localized string similar to A double quote is not a valid comment token for delimited fields where HasFieldsEnclosedInQuotes is set to True..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_MalFormedDelimitedLine">
            <summary>
              Looks up a localized string similar to Line {0} cannot be parsed using the current Delimiters..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_MalformedExtraData">
            <summary>
              Looks up a localized string similar to Line Number:{0}.
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_MalFormedFixedWidthLine">
            <summary>
              Looks up a localized string similar to Line {0} cannot be parsed using the current FieldWidths..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_MaxLineSizeExceeded">
            <summary>
              Looks up a localized string similar to Line {0} cannot be read because it exceeds the maximum line size..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_NumberOfCharsMustBePositive">
            <summary>
              Looks up a localized string similar to {0} must be greater than zero..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_StreamNotReadable">
            <summary>
              Looks up a localized string similar to The stream passed to TextFieldParser cannot be read..
            </summary>
        </member>
        <member name="P:Cadru.Data.Resources.Strings.TextFieldParser_WhitespaceInToken">
            <summary>
              Looks up a localized string similar to TextFieldParser does not support comment tokens that contain white space..
            </summary>
        </member>
    </members>
</doc>
