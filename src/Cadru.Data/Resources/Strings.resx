<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BufferSizeTooSmall" xml:space="preserve">
    <value>Buffer size must be 1 or more.</value>
  </data>
  <data name="CannotMovePreviousRecordInForwardOnly" xml:space="preserve">
    <value>Cannot move to a previous record in forward-only mode.</value>
  </data>
  <data name="CannotReadRecordAtIndex" xml:space="preserve">
    <value>Cannot read record at index '{0}'.</value>
  </data>
  <data name="EnumerationFinishedOrNotStarted" xml:space="preserve">
    <value>Enumeration has either not started or has already finished.</value>
  </data>
  <data name="EnumerationVersionCheckFailed" xml:space="preserve">
    <value>Collection was modified; enumeration operation may not execute.</value>
  </data>
  <data name="FieldHeaderNotFound" xml:space="preserve">
    <value>'{0}' field header not found.</value>
  </data>
  <data name="FieldIndexOutOfRange" xml:space="preserve">
    <value>Field index must be included in [0, FieldCount[. Specified field index was : '{0}'.</value>
  </data>
  <data name="MalformedCsvException" xml:space="preserve">
    <value>The CSV appears to be corrupt near record '{0}' field '{1} at position '{2}'. Current raw data : '{3}'.</value>
  </data>
  <data name="MissingFieldActionNotSupported" xml:space="preserve">
    <value>'{0}' is not a supported missing field action.</value>
  </data>
  <data name="NoCurrentRecord" xml:space="preserve">
    <value>No current record.</value>
  </data>
  <data name="NoHeaders" xml:space="preserve">
    <value>The CSV does not have headers (CsvReader.HasHeaders property is false).</value>
  </data>
  <data name="NotEnoughSpaceInArray" xml:space="preserve">
    <value>The number of fields in the record is greater than the available space from index to the end of the destination array.</value>
  </data>
  <data name="ParseErrorActionInvalidInsideParseErrorEvent" xml:space="preserve">
    <value>'{0}' is not a valid ParseErrorAction while inside a ParseError event.</value>
  </data>
  <data name="ParseErrorActionNotSupported" xml:space="preserve">
    <value>'{0}' is not a supported ParseErrorAction.</value>
  </data>
  <data name="ReaderClosed" xml:space="preserve">
    <value>This operation is invalid when the reader is closed.</value>
  </data>
  <data name="RecordIndexLessThanZero" xml:space="preserve">
    <value>Record index must be 0 or more.</value>
  </data>
  <data name="TextFieldParser_NumberOfCharsMustBePositive" xml:space="preserve">
    <value>{0} must be greater than zero.</value>
  </data>
  <data name="TextFieldParser_StreamNotReadable" xml:space="preserve">
    <value>The stream passed to TextFieldParser cannot be read.</value>
  </data>
  <data name="TextFieldParser_BufferExceededMaxSize" xml:space="preserve">
    <value>TextFieldParser is unable to complete the read operation because maximum buffer size has been exceeded.</value>
  </data>
  <data name="TextFieldParser_MalFormedDelimitedLine" xml:space="preserve">
    <value>Line {0} cannot be parsed using the current Delimiters.</value>
  </data>
  <data name="TextFieldParser_MalFormedFixedWidthLine" xml:space="preserve">
    <value>Line {0} cannot be parsed using the current FieldWidths.</value>
  </data>
  <data name="TextFieldParser_MaxLineSizeExceeded" xml:space="preserve">
    <value>Line {0} cannot be read because it exceeds the maximum line size.</value>
  </data>
  <data name="TextFieldParser_FieldWidthsNothing" xml:space="preserve">
    <value>Unable to read fixed width fields because FieldWidths is Nothing or empty.</value>
  </data>
  <data name="TextFieldParser_DelimitersNothing" xml:space="preserve">
    <value>Unable to read delimited fields because Delimiters is Nothing or empty.</value>
  </data>
  <data name="TextFieldParser_FieldWidthsMustPositive" xml:space="preserve">
    <value>All field widths, except the last element, must be greater than zero. A field width less than or equal to zero in the last element indicates the last field is of variable length.</value>
  </data>
  <data name="TextFieldParser_IllegalDelimiter" xml:space="preserve">
    <value>Unable to read delimited fields because a double quote is not a legal delimiter when HasFieldsEnclosedInQuotes is set to True.</value>
  </data>
  <data name="TextFieldParser_DelimiterNothing" xml:space="preserve">
    <value>A delimiter cannot be Nothing or an empty String.</value>
  </data>
  <data name="TextFieldParser_InvalidComment" xml:space="preserve">
    <value>A double quote is not a valid comment token for delimited fields where HasFieldsEnclosedInQuotes is set to True.</value>
  </data>
  <data name="TextFieldParser_MalformedExtraData" xml:space="preserve">
    <value>Line Number:{0}</value>
  </data>
  <data name="TextFieldParser_WhitespaceInToken" xml:space="preserve">
    <value>TextFieldParser does not support comment tokens that contain white space.</value>
  </data>
  <data name="TextFieldParser_EndCharsInDelimiter" xml:space="preserve">
    <value>TextFieldParser does not support delimiters that contain end-of-line characters.</value>
  </data>
  <data name="IO_FileNotFound_Path" xml:space="preserve">
    <value>Could not find file '{0}'.</value>
  </data>
  <data name="Arg_ArgumentOutOfRangeException" xml:space="preserve">
    <value>Specified argument was out of the range of valid values.</value>
  </data>
  <data name="IO_FilePathException" xml:space="preserve">
    <value>The given file path ends with a directory separator character.</value>
  </data>
</root>