<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cadru.StronglyTypedId</name>
    </assembly>
    <members>
        <member name="T:Cadru.StronglyTypedId.BackingType">
            <summary>
            The type used for the value of a strongly-typed ID
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.BackingType.Default">
            <summary>
            Use the default backing type, either the globally configured default
            or <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.BackingType.Guid">
            <summary>
            Use <see cref="T:System.Guid"/> as the backing type.
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.BackingType.Int">
            <summary>
            Use <see cref="T:System.Int32"/> as the backing type.
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.BackingType.String">
            <summary>
            Use <see cref="T:System.String"/> as the backing type.
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.BackingType.Long">
            <summary>
            Use <see cref="T:System.Int64"/> as the backing type.
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.BackingType.NullableString">
            <summary>
            Use a nullable <see cref="T:System.String"/> as the backing type.
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.BackingType.Short">
            <summary>
            Use <see cref="T:System.Int16"/> as the backing type.
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.BackingType.Byte">
            <summary>
            Use <see cref="T:System.Byte"/> as the backing type.
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.BackingType.Char">
            <summary>
            Use <see cref="T:System.Char"/> as the backing type.
            </summary>
        </member>
        <member name="T:Cadru.StronglyTypedId.StronglyTypedIdAttribute">
            <summary>
            Instructs the Cadru.StronglyTypedId source generator to generate source
            code that causes the specified type to represent a strongly typed ID.
            </summary>
        </member>
        <member name="M:Cadru.StronglyTypedId.StronglyTypedIdAttribute.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Cadru.StronglyTypedId.StronglyTypedIdAttribute"/>.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.StronglyTypedIdAttribute.BackingType">
            <summary>
            The <see cref="T:System.Type"/> to use to store the strongly-typed ID value
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.StronglyTypedIdAttribute.Converters">
            <summary>
            The <see cref="T:Cadru.StronglyTypedId.StronglyTypedIdConverter"/> options to use when
            generating the strongly-typed ID value
            </summary>
        </member>
        <member name="T:Cadru.StronglyTypedId.StronglyTypedIdConverter">
            <summary>
            Converters used to serialize/deserialize strongly-typed ID values
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.StronglyTypedIdConverter.None">
            <summary>
            Don't create any converters for the strongly typed ID
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.StronglyTypedIdConverter.Default">
            <summary>
            Use the default converters for the strongly typed Id. This will be
            the value provided in the
            <see cref="T:Cadru.StronglyTypedId.StronglyTypedIdDefaultsAttribute"/>, which falls back to
            <see cref="F:Cadru.StronglyTypedId.StronglyTypedIdConverter.TypeConverter"/> and <see cref="F:Cadru.StronglyTypedId.StronglyTypedIdConverter.SystemTextJson"/>
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.StronglyTypedIdConverter.TypeConverter">
            <summary>
            Creates a <see cref="T:System.ComponentModel.TypeConverter"/> for converting from the
            strongly typed ID to and from a string
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.StronglyTypedIdConverter.NewtonsoftJson">
            <summary>
            Creates a Newtonsoft.Json.JsonConverter for serializing the strongly
            typed id to its primitive value
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.StronglyTypedIdConverter.SystemTextJson">
            <summary>
            Creates a System.Text.Json.Serialization.JsonConverter for
            serializing the strongly typed id to its primitive value
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.StronglyTypedIdConverter.EfCoreValueConverter">
            <summary>
            Creates an Entity Framework Core Value Converter for extracting the
            primitive value
            </summary>
        </member>
        <member name="F:Cadru.StronglyTypedId.StronglyTypedIdConverter.DapperTypeHandler">
            <summary>
            Creates a Dapper TypeHandler for converting to and from the type
            </summary>
        </member>
        <member name="T:Cadru.StronglyTypedId.StronglyTypedIdDefaultsAttribute">
            <summary>
            Provides assembly-global defaults for the Cadru.StronglyTypedId source
            generator to use when generating a strongly typed ID.
            </summary>
        </member>
        <member name="M:Cadru.StronglyTypedId.StronglyTypedIdDefaultsAttribute.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Cadru.StronglyTypedId.StronglyTypedIdDefaultsAttribute"/>.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.StronglyTypedIdDefaultsAttribute.BackingType">
            <summary>
            The <see cref="P:Cadru.StronglyTypedId.StronglyTypedIdDefaultsAttribute.BackingType"/> to use for storing the strongly-typed
            ID value
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.StronglyTypedIdDefaultsAttribute.Converters">
            <summary>
            The <see cref="T:Cadru.StronglyTypedId.StronglyTypedIdConverter"/> options to use when
            generating the strongly-typed ID value
            </summary>
        </member>
        <member name="T:Cadru.StronglyTypedId.Diagnostics.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.InvalidBackingTypeDiagnostic_Id">
            <summary>
              Looks up a localized string similar to STI14.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.InvalidBackingTypeDiagnostic_Message">
            <summary>
              Looks up a localized string similar to The BackingType value provided is not valid and no globally configured default was found..
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.InvalidBackingTypeDiagnostic_Title">
            <summary>
              Looks up a localized string similar to Invalid backing type.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.InvalidConfigurationDiagnostic_Id">
            <summary>
              Looks up a localized string similar to ST11.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.InvalidConfigurationDiagnostic_Message">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.InvalidConfigurationDiagnostic_Title">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.InvalidConverterDiagnostic_Id">
            <summary>
              Looks up a localized string similar to ST15.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.InvalidConverterDiagnostic_Message">
            <summary>
              Looks up a localized string similar to The StronglyTypedIdConverter value provided is not valid and no globally configured default was found..
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.InvalidConverterDiagnostic_Title">
            <summary>
              Looks up a localized string similar to Invalid converters.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.NotPartialDiagnostic_Id">
            <summary>
              Looks up a localized string similar to STI2.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.NotPartialDiagnostic_Message">
            <summary>
              Looks up a localized string similar to The target of the StronglyTypedId attribute must be declared as partial..
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.NotPartialDiagnostic_Title">
            <summary>
              Looks up a localized string similar to Must be partial.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.NotRecordDiagnostic_Id">
            <summary>
              Looks up a localized string similar to STI3.
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.NotRecordDiagnostic_Message">
            <summary>
              Looks up a localized string similar to The target of the StronglyTypedId attribute must be declared as a record or a record struct..
            </summary>
        </member>
        <member name="P:Cadru.StronglyTypedId.Diagnostics.Resources.NotRecordDiagnostic_Title">
            <summary>
              Looks up a localized string similar to Must be record or record struct.
            </summary>
        </member>
        <member name="T:Scriban.Functions.ArrayFunctions">
            <summary>
            Array functions available through the object 'array' in scriban.
            </summary>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Add(System.Collections.IEnumerable,System.Object)">
            <summary>
            Adds a value to the input list.
            </summary>
            <param name="list">The input list</param>
            <param name="value">The value to add at the end of the list</param>
            <returns>A new list with the value added</returns>
            <remarks>
            ```scriban-html
            {{ [1, 2, 3] | array.add 4 }}
            ```
            ```html
            [1, 2, 3, 4]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.AddRange(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Concatenates two lists.
            </summary>
            <param name="list1">The 1st input list</param>
            <param name="list2">The 2nd input list</param>
            <returns>The concatenation of the two input lists</returns>
            <remarks>
            ```scriban-html
            {{ [1, 2, 3] | array.add_range [4, 5] }}
            ```
            ```html
            [1, 2, 3, 4, 5]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Compact(System.Collections.IEnumerable)">
            <summary>
            Removes any null values from the input list.
            </summary>
            <param name="list">An input list</param>
            <returns>Returns a list with null value removed</returns>
            <remarks>
            ```scriban-html
            {{ [1, null, 3] | array.compact }}
            ```
            ```html
            [1, 3]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Concat(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Concatenates two lists.
            </summary>
            <param name="list1">The 1st input list</param>
            <param name="list2">The 2nd input list</param>
            <returns>The concatenation of the two input lists</returns>
            <remarks>
            ```scriban-html
            {{ [1, 2, 3] | array.concat [4, 5] }}
            ```
            ```html
            [1, 2, 3, 4, 5]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Cycle(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Collections.IList,System.Object)">
            <summary>
            Loops through a group of strings and outputs them in the order that they were passed as parameters. Each time cycle is called, the next string that was passed as a parameter is output.
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="list">An input list</param>
            <param name="group">The group used. Default is `null`</param>
            <returns>Returns a list with null value removed</returns>
            <remarks>
            ```scriban-html
            {{ array.cycle ['one', 'two', 'three'] }}
            {{ array.cycle ['one', 'two', 'three'] }}
            {{ array.cycle ['one', 'two', 'three'] }}
            {{ array.cycle ['one', 'two', 'three'] }}
            ```
            ```html
            one
            two
            three
            one
            ```
            `cycle` accepts a parameter called cycle group in cases where you need multiple cycle blocks in one template.
            If no name is supplied for the cycle group, then it is assumed that multiple calls with the same parameters are one group.
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Each(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Collections.IEnumerable,System.Object)">
            <summary>
            Applies the specified function to each element of the input.
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="list">An input list</param>
            <param name="function">The function to apply to each item in the list</param>
            <returns>Returns a list with each item being transformed by the function.</returns>
            <remarks>
            ```scriban-html
            {{ [" a", " 5", "6 "] | array.each @string.strip }}
            ```
            ```html
            ["a", "5", "6"]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Filter(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Collections.IEnumerable,System.Object)">
            <summary>
            Filters the input list according the supplied filter function.
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="list">An input list</param>
            <param name="function">The function used to test each elemement of the list</param>
            <returns>Returns a new list which contains only those elements which match the filter function.</returns>
            <remarks>
            ```scriban-html
            {{["", "200", "","400"] | array.filter @string.empty}}
            ```
            ```html
            ["", ""]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.First(System.Collections.IEnumerable)">
            <summary>
            Returns the first element of the input `list`.
            </summary>
            <param name="list">The input list</param>
            <returns>The first element of the input `list`.</returns>
            <remarks>
            ```scriban-html
            {{ [4, 5, 6] | array.first }}
            ```
            ```html
            4
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.InsertAt(System.Collections.IEnumerable,System.Int32,System.Object)">
            <summary>
            Inserts a `value` at the specified index in the input `list`.
            </summary>
            <param name="list">The input list</param>
            <param name="index">The index in the list where to insert the element</param>
            <param name="value">The value to insert</param>
            <returns>A new list with the element inserted.</returns>
            <remarks>
            ```scriban-html
            {{ ["a", "b", "c"] | array.insert_at 2 "Yo" }}
            ```
            ```html
            ["a", "b", "Yo", "c"]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Join(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Collections.IEnumerable,System.String,System.Object)">
            <summary>
            Joins the element of a list separated by a delimiter string and return the concatenated string.
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="list">The input list</param>
            <param name="delimiter">The delimiter string to use to separate elements in the output string</param>
            <param name="function">An optional function that will receive the string representation of the item to join and can transform the text before joining.</param>
            <returns>A new list with the element inserted.</returns>
            <remarks>
            ```scriban-html
            {{ [1, 2, 3] | array.join "|" }}
            ```
            ```html
            1|2|3
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Last(System.Collections.IEnumerable)">
            <summary>
            Returns the last element of the input `list`.
            </summary>
            <param name="list">The input list</param>
            <returns>The last element of the input `list`.</returns>
            <remarks>
            ```scriban-html
            {{ [4, 5, 6] | array.last }}
            ```
            ```html
            6
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Limit(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns a limited number of elments from the input list
            </summary>
            <param name="list">The input list</param>
            <param name="count">The number of elements to return from the input list</param>
            <remarks>
            ```scriban-html
            {{ [4, 5, 6] | array.limit 2 }}
            ```
            ```html
            [4, 5]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Map(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.String)">
            <summary>
            Accepts an array element's attribute as a parameter and creates an array out of each array element's value.
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="list">The input list</param>
            <param name="member">The member to extract the value from</param>
            <remarks>
            ```scriban-html
            {{
            products = [{title: "orange", type: "fruit"}, {title: "computer", type: "electronics"}, {title: "sofa", type: "furniture"}]
            products | array.map "type" | array.uniq | array.sort }}
            ```
            ```html
            ["electronics", "fruit", "furniture"]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Offset(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the remaining of the list after the specified offset
            </summary>
            <param name="list">The input list</param>
            <param name="index">The index of a list to return elements</param>
            <remarks>
            ```scriban-html
            {{ [4, 5, 6, 7, 8] | array.offset 2 }}
            ```
            ```html
            [6, 7, 8]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.RemoveAt(System.Collections.IList,System.Int32)">
            <summary>
            Removes an element at the specified `index` from the input `list`
            </summary>
            <param name="list">The input list</param>
            <param name="index">The index of a list to return elements</param>
            <returns>A new list with the element removed. If index is negative, remove at the end of the list.</returns>
            <remarks>
            ```scriban-html
            {{ [4, 5, 6, 7, 8] | array.remove_at 2 }}
            ```
            ```html
            [4, 5, 7, 8]
            ```
            If the `index` is negative, removes at the end of the list (notice that we need to put -1 in parenthesis to avoid confusing the parser with a binary `-` operation):
            ```scriban-html
            {{ [4, 5, 6, 7, 8] | array.remove_at (-1) }}
            ```
            ```html
            [4, 5, 6, 7]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Reverse(System.Collections.IEnumerable)">
            <summary>
            Reverses the input `list`
            </summary>
            <param name="list">The input list</param>
            <returns>A new list in reversed order.</returns>
            <remarks>
            ```scriban-html
            {{ [4, 5, 6, 7] | array.reverse }}
            ```
            ```html
            [7, 6, 5, 4]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Size(System.Collections.IEnumerable)">
            <summary>
            Returns the number of elements in the input `list`
            </summary>
            <param name="list">The input list</param>
            <returns>A number of elements in the input `list`.</returns>
            <remarks>
            ```scriban-html
            {{ [4, 5, 6] | array.size }}
            ```
            ```html
            3
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Sort(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.String)">
            <summary>
            Sorts the elements of the input `list` according to the value of each element or the value of the specified `member` of each element
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="list">The input list</param>
            <param name="member">The member name to sort according to its value. Null by default, meaning that the element's value are used instead.</param>
            <returns>A list sorted according to the value of each element or the value of the specified `member` of each element.</returns>
            <remarks>
            Sorts by element's value:
            ```scriban-html
            {{ [10, 2, 6] | array.sort }}
            ```
            ```html
            [2, 6, 10]
            ```
            Sorts by elements member's value:
            ```scriban-html
            {{
            products = [{title: "orange", type: "fruit"}, {title: "computer", type: "electronics"}, {title: "sofa", type: "furniture"}]
            products | array.sort "title" | array.map "title"
            }}
            ```
            ```html
            ["computer", "orange", "sofa"]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Uniq(System.Collections.IEnumerable)">
            <summary>
            Returns the unique elements of the input `list`.
            </summary>
            <param name="list">The input list</param>
            <returns>A list of unique elements of the input `list`.</returns>
            <remarks>
            ```scriban-html
            {{ [1, 1, 4, 5, 8, 8] | array.uniq }}
            ```
            ```html
            [1, 4, 5, 8]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.Contains(System.Collections.IEnumerable,System.Object)">
            <summary>
            Returns if a `list` contains a specific `item`.
            </summary>
            <param name="list">The input list</param>
            <param name="item">The input item</param>
            <returns>**true** if `item` is in `list`; otherwise **false**</returns>
            <remarks>
            ```scriban-html
            {{ [1, 2, 3, 4] | array.contains 4 }}
            ```
            ```html
            true
            ```
            </remarks>
        </member>
        <member name="T:Scriban.Functions.ArrayFunctions.ListProcessor">
            <summary>
            Delegate type for function used to process a list
            </summary>
        </member>
        <member name="M:Scriban.Functions.ArrayFunctions.ApplyFunction(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Collections.IEnumerable,System.Object,Scriban.Functions.ArrayFunctions.ListProcessor)">
            <summary>
            Attempts to apply a Scriban function to a list and returns the results as a ScriptRange
            </summary>
            <remarks>
            Encapsulates a common approach to parameter checking for any method that will take a Scriban function and apply it to a list
            </remarks>
        </member>
        <member name="F:Scriban.Functions.BuiltinFunctions.Default">
            <summary>
            This object is readonly, should not be modified by any other objects internally.
            </summary>
        </member>
        <member name="T:Scriban.Functions.BuiltinFunctions.DefaultBuiltins">
            <summary>
            Use an internal object to create all default builtins just once to avoid allocations of delegates/IScriptCustomFunction
            </summary>
        </member>
        <member name="T:Scriban.Functions.DateTimeFunctions">
             <summary>
             A datetime object represents an instant in time, expressed as a date and time of day.
            
             | Name             | Description
             |--------------    |-----------------
             | `.year`          | Gets the year of a date object
             | `.month`         | Gets the month of a date object
             | `.day`           | Gets the day in the month of a date object
             | `.day_of_year`   | Gets the day within the year
             | `.hour`          | Gets the hour of the date object
             | `.minute`        | Gets the minute of the date object
             | `.second`        | Gets the second of the date object
             | `.millisecond`   | Gets the millisecond of the date object
            
             [:top:](#builtins)
             #### Binary operations
            
             The subtract operation `date1 - date2`: Subtract `date2` from `date1` and return a timespan internal object (see timespan object below).
            
             Other comparison operators(`==`, `!=`, `&lt;=`, `&gt;=`, `&lt;`, `&gt;`) are also working with date objects.
            
             A `timespan` and also the added to a `datetime` object.
             </summary>
             <seealso cref="T:Scriban.Runtime.ScriptObject" />
        </member>
        <member name="M:Scriban.Functions.DateTimeFunctions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Functions.DateTimeFunctions"/> class.
            </summary>
        </member>
        <member name="P:Scriban.Functions.DateTimeFunctions.Format">
            <summary>
            Gets or sets the format used to format all dates
            </summary>
        </member>
        <member name="M:Scriban.Functions.DateTimeFunctions.Now">
            <summary>
            Returns a datetime object of the current time, including the hour, minutes, seconds and milliseconds.
            </summary>
            <remarks>
            ```scriban-html
            {{ date.now.year }}
            ```
            ```html
            2023
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.DateTimeFunctions.AddDays(System.DateTime,System.Double)">
            <summary>
            Adds the specified number of days to the input date.
            </summary>
            <param name="date">The date.</param>
            <param name="days">The days.</param>
            <returns>A new date</returns>
            <remarks>
            ```scriban-html
            {{ date.parse '2016/01/05' | date.add_days 1 }}
            ```
            ```html
            06 Jan 2016
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.DateTimeFunctions.AddMonths(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of months to the input date.
            </summary>
            <param name="date">The date.</param>
            <param name="months">The months.</param>
            <returns>A new date</returns>
            <remarks>
            ```scriban-html
            {{ date.parse '2016/01/05' | date.add_months 1 }}
            ```
            ```html
            05 Feb 2016
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.DateTimeFunctions.AddYears(System.DateTime,System.Int32)">
            <summary>
            Adds the specified number of years to the input date.
            </summary>
            <param name="date">The date.</param>
            <param name="years">The years.</param>
            <returns>A new date</returns>
            <remarks>
            ```scriban-html
            {{ date.parse '2016/01/05' | date.add_years 1 }}
            ```
            ```html
            05 Jan 2017
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.DateTimeFunctions.AddHours(System.DateTime,System.Double)">
            <summary>
            Adds the specified number of hours to the input date.
            </summary>
            <param name="date">The date.</param>
            <param name="hours">The hours.</param>
            <returns>A new date</returns>
        </member>
        <member name="M:Scriban.Functions.DateTimeFunctions.AddMinutes(System.DateTime,System.Double)">
            <summary>
            Adds the specified number of minutes to the input date.
            </summary>
            <param name="date">The date.</param>
            <param name="minutes">The minutes.</param>
            <returns>A new date</returns>
        </member>
        <member name="M:Scriban.Functions.DateTimeFunctions.AddSeconds(System.DateTime,System.Double)">
            <summary>
            Adds the specified number of seconds to the input date.
            </summary>
            <param name="date">The date.</param>
            <param name="seconds">The seconds.</param>
            <returns>A new date</returns>
        </member>
        <member name="M:Scriban.Functions.DateTimeFunctions.AddMilliseconds(System.DateTime,System.Double)">
            <summary>
            Adds the specified number of milliseconds to the input date.
            </summary>
            <param name="date">The date.</param>
            <param name="millis">The milliseconds.</param>
            <returns>A new date</returns>
        </member>
        <member name="M:Scriban.Functions.DateTimeFunctions.Parse(Scriban.TemplateContext,System.String,System.String,System.String)">
            <summary>
            Parses the specified input string to a date object.
            </summary>
            <param name="context">The template context.</param>
            <param name="text">A text representing a date.</param>
            <param name="pattern">The date format pattern. See `to_string` method about the format of a pattern.</param>
            <param name="culture">The culture used to format the datetime. Default is current culture.</param>
            <returns>A date object</returns>
            <remarks>
            ```scriban-html
            {{ date.parse '2016/01/05' }}
            {{ date.parse '2018--06--17' '%Y--%m--%d' }}
            {{ date.parse '2021/11/30 20:50:23Z' }}
            {{ date.parse '20/01/2022 08:32:48 +00:00' culture:'en-GB' }}
            ```
            ```html
            05 Jan 2016
            17 Jun 2018
            30 Nov 2021
            20 Jan 2022
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.DateTimeFunctions.ToString(System.Nullable{System.DateTime},System.String,System.Globalization.CultureInfo)">
             <summary>
             Converts a datetime object to a textual representation using the specified format string.
            
             By default, if you are using a date, it will use the format specified by `date.format` which defaults to `date.default_format` (readonly) which default to `%d %b %Y`
            
             You can override the format used for formatting all dates by assigning the a new format: `date.format = '%a %b %e %T %Y';`
            
             You can recover the default format by using `date.format = date.default_format;`
            
             By default, the to_string format is using the **current culture**, but you can switch to an invariant culture by using the modifier `%g`
            
             For example, using `%g %d %b %Y` will output the date using an invariant culture.
            
             If you are using `%g` alone, it will output the date with `date.format` using an invariant culture.
            
             Suppose that `date.now` would return the date `2013-09-12 22:49:27 +0530`, the following table explains the format modifiers:
            
             | Format | Result            | Description
             |--------|-------------------|--------------------------------------------
             | `"%a"` |  `"Thu"`          | Name of week day in short form of the
             | `"%A"` |  `"Thursday"`     | Week day in full form of the time
             | `"%b"` |  `"Sep"`          | Month in short form of the time
             | `"%B"` |  `"September"`    | Month in full form of the time
             | `"%c"` |                   | Date and time (%a %b %e %T %Y)
             | `"%C"` |  `"20"`           | Century of the time
             | `"%d"` |  `"12"`           | Day of the month of the time
             | `"%D"` |  `"09/12/13"`     | Date (%m/%d/%y)
             | `"%e"` |  `"12"`           | Day of the month, blank-padded ( 1..31)
             | `"%F"` |  `"2013-09-12"`   | ISO 8601 date (%Y-%m-%d)
             | `"%h"` |  `"Sep"`          | Alias for %b
             | `"%H"` |  `"22"`           | Hour of the time in 24 hour clock format
             | `"%I"` |  `"10"`           | Hour of the time in 12 hour clock format
             | `"%j"` |  `"255"`          | Day of the year (001..366) (3 digits, left padded with zero)
             | `"%k"` |  `"22"`           | Hour of the time in 24 hour clock format, blank-padded ( 0..23)
             | `"%l"` |  `"10"`           | Hour of the time in 12 hour clock format, blank-padded ( 0..12)
             | `"%L"` |  `"000"`          | Millisecond of the time (3 digits, left padded with zero)
             | `"%m"` |  `"09"`           | Month of the time
             | `"%M"` |  `"49"`           | Minutes of the time (2 digits, left padded with zero e.g 01 02)
             | `"%n"` |                   | Newline character (\n)
             | `"%N"` |  `"000000000"`    | Nanoseconds of the time (9 digits, left padded with zero)
             | `"%p"` |  `"PM"`           | Gives AM / PM of the time
             | `"%P"` |  `"pm"`           | Gives am / pm of the time
             | `"%r"` |  `"10:49:27 PM"`  | Long time in 12 hour clock format (%I:%M:%S %p)
             | `"%R"` |  `"22:49"`        | Short time in 24 hour clock format (%H:%M)
             | `"%s"` |                   | Number of seconds since 1970-01-01 00:00:00 +0000
             | `"%S"` |  `"27"`           | Seconds of the time
             | `"%t"` |                   | Tab character (\t)
             | `"%T"` |  `"22:49:27"`     | Long time in 24 hour clock format (%H:%M:%S)
             | `"%u"` |  `"4"`            | Day of week of the time (from 1 for Monday to 7 for Sunday)
             | `"%U"` |  `"36"`           | Week number of the current year, starting with the first Sunday as the first day of the first week (00..53)
             | `"%v"` |  `"12-SEP-2013"`  | VMS date (%e-%b-%Y) (culture invariant)
             | `"%V"` |  `"37"`           | Week number of the current year according to ISO 8601 (01..53)
             | `"%W"` |  `"36"`           | Week number of the current year, starting with the first Monday as the first day of the first week (00..53)
             | `"%w"` |  `"4"`            | Day of week of the time (from 0 for Sunday to 6 for Saturday)
             | `"%x"` |                   | Preferred representation for the date alone, no time
             | `"%X"` |                   | Preferred representation for the time alone, no date
             | `"%y"` |  `"13"`           | Gives year without century of the time
             | `"%Y"` |  `"2013"`         | Year of the time
             | `"%Z"` |  `"+05:30"`       | Gives Time Zone of the time
             | `"%%"` |  `"%"`            | Output the character `%`
            
             Note that the format is using a good part of the ruby format ([source](http://apidock.com/ruby/DateTime/strftime))
             ```scriban-html
             {{ date.parse '2016/01/05' | date.to_string '%d %b %Y' }}
             {{ date.parse '2016/01/05' | date.to_string '%d %B %Y' 'fr-FR' }}
             ```
             ```html
             05 Jan 2016
             05 janvier 2016
             ```
             </summary>
             <param name="datetime">The input datetime to format</param>
             <param name="pattern">The date format pattern.</param>
             <param name="culture">The culture used to format the datetime</param>
             <returns>
             A <see cref="T:System.String" /> that represents this instance.
             </returns>
        </member>
        <member name="T:Scriban.Functions.HtmlFunctions">
            <summary>
            Html functions available through the builtin object 'html'.
            </summary>
        </member>
        <member name="M:Scriban.Functions.HtmlFunctions.Strip(Scriban.TemplateContext,System.String)">
            <summary>
            Removes any HTML tags from the input string
            </summary>
            <param name="context">The template context (used for <see cref="P:Scriban.TemplateContext.RegexTimeOut"/>)</param>
            <param name="text">The input string</param>
            <returns>The input string removed with any HTML tags</returns>
            <remarks>
            Notice that the implementation of this function is using a simple regex, so it can fail escaping correctly or timeout in case of the malformed html.
            If you are looking for a secure HTML stripped, you might want to plug your own HTML function by using [AngleSharp](https://github.com/AngleSharp/AngleSharp) to
            strip these HTML tags.
            
            ```scriban-html
            {{ "&lt;p&gt;This is a paragraph&lt;/p&gt;" | html.strip }}
            ```
            ```html
            This is a paragraph
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.HtmlFunctions.Escape(System.String)">
            <summary>
            Escapes a HTML input string (replacing `&amp;` by `&amp;amp;`)
            </summary>
            <param name="text">The input string</param>
            <returns>The input string removed with any HTML tags</returns>
            <remarks>
            ```scriban-html
            {{ "&lt;p&gt;This is a paragraph&lt;/p&gt;" | html.escape }}
            ```
            ```html
            &amp;lt;p&amp;gt;This is a paragraph&amp;lt;/p&amp;gt;
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.HtmlFunctions.UrlEncode(System.String)">
            <summary>
            Converts any URL-unsafe characters in a string into percent-encoded characters.
            </summary>
            <param name="text">The input string</param>
            <returns>The input string url encoded</returns>
            <remarks>
            ```scriban-html
            {{ "john@liquid.com" | html.url_encode }}
            ```
            ```html
            john%40liquid.com
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.HtmlFunctions.UrlEscape(System.String)">
            <summary>
            Identifies all characters in a string that are not allowed in URLS, and replaces the characters with their escaped variants.
            </summary>
            <param name="text">The input string</param>
            <returns>The input string url escaped</returns>
            <remarks>
            ```scriban-html
            {{ "&lt;hello&gt; &amp; &lt;scriban&gt;" | html.url_escape }}
            ```
            ```html
            %3Chello%3E%20&amp;%20%3Cscriban%3E
            ```
            </remarks>
        </member>
        <member name="T:Scriban.Functions.IncludeFunction">
            <summary>
            The include function available through the function 'include' in scriban.
            </summary>
            <summary>
            The include function available through the function 'include' in scriban.
            </summary>
        </member>
        <member name="T:Scriban.Functions.LiquidBuiltinsFunctions">
            <summary>
            Builtins functions for a Liquid TemplateContext
            </summary>
        </member>
        <member name="F:Scriban.Functions.LiquidBuiltinsFunctions.Default">
            <summary>
            This object is readonly, should not be modified by any other objects internally.
            </summary>
        </member>
        <member name="T:Scriban.Functions.LiquidBuiltinsFunctions.DefaultBuiltins">
            <summary>
            Use an internal object to create all default builtins just once to avoid allocations of delegates/IScriptCustomFunction
            </summary>
        </member>
        <member name="T:Scriban.Functions.MathFunctions">
            <summary>
            Math functions available through the object 'math' in scriban.
            </summary>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.Abs(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object)">
            <summary>
            Returns the absolute value of a specified number.
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="value">The input value</param>
            <returns>The absolute value of the input value</returns>
            <remarks>
            ```scriban-html
            {{ -15.5| math.abs }}
            {{ -5| math.abs }}
            ```
            ```html
            15.5
            5
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.Ceil(System.Double)">
            <summary>
            Returns the smallest integer greater than or equal to the specified number.
            </summary>
            <param name="value">The input value</param>
            <returns>The smallest integer greater than or equal to the specified number.</returns>
            <remarks>
            ```scriban-html
            {{ 4.6 | math.ceil }}
            {{ 4.3 | math.ceil }}
            ```
            ```html
            5
            5
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.DividedBy(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Double,System.Object)">
            <summary>
            Divides the specified value by another value. If the divisor is an integer, the result will
            be floor to and converted back to an integer.
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="value">The input value</param>
            <param name="divisor">The divisor value</param>
            <returns>The division of `value` by `divisor`.</returns>
            <remarks>
            ```scriban-html
            {{ 8.4 | math.divided_by 2.0 | math.round 1 }}
            {{ 8.4 | math.divided_by 2 }}
            ```
            ```html
            4.2
            4
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.Floor(System.Double)">
            <summary>
            Returns the largest integer less than or equal to the specified number.
            </summary>
            <param name="value">The input value</param>
            <returns>The largest integer less than or equal to the specified number.</returns>
            <remarks>
            ```scriban-html
            {{ 4.6 | math.floor }}
            {{ 4.3 | math.floor }}
            ```
            ```html
            4
            4
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.Format(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.String,System.String)">
            <summary>
            Formats a number value with specified [.NET standard numeric format strings](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings)
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="value">The input value</param>
            <param name="format">The format string.</param>
            <param name="culture">The culture as a string (e.g `en-US`). By default the culture from <see cref="P:Scriban.TemplateContext.CurrentCulture"/> is used</param>
            <returns>The largest integer less than or equal to the specified number.</returns>
            <remarks>
            ```scriban-html
            {{ 255 | math.format "X4" }}
            ```
            ```html
            00FF
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.IsNumber(System.Object)">
            <summary>
            Returns a boolean indicating if the input value is a number
            </summary>
            <param name="value">The input value</param>
            <returns>**true** if the input value is a number; otherwise false.</returns>
            <remarks>
            ```scriban-html
            {{ 255 | math.is_number }}
            {{ "yo" | math.is_number }}
            ```
            ```html
            true
            false
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.Minus(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.Object)">
            <summary>
            Subtracts from the input value the `with` value
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="value">The input value</param>
            <param name="with">The with value to subtract from `value`</param>
            <returns>The results of the subtraction: `value` - `with`</returns>
            <remarks>
            ```scriban-html
            {{ 255 | math.minus 5}}
            ```
            ```html
            250
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.Modulo(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.Object)">
            <summary>
            Performs the modulo of the input value with the `with` value
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="value">The input value</param>
            <param name="with">The with value to module `value`</param>
            <returns>The results of the modulo: `value` % `with`</returns>
            <remarks>
            ```scriban-html
            {{ 11 | math.modulo 10}}
            ```
            ```html
            1
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.Plus(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.Object)">
            <summary>
            Performs the addition of the input value with the `with` value
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="value">The input value</param>
            <param name="with">The with value to add to`value`</param>
            <returns>The results of the addition: `value` + `with`</returns>
            <remarks>
            ```scriban-html
            {{ 1 | math.plus 2}}
            ```
            ```html
            3
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.Round(System.Double,System.Int32)">
            <summary>
            Rounds a value to the nearest integer or to the specified number of fractional digits.
            </summary>
            <param name="value">The input value</param>
            <param name="precision">The number of fractional digits in the return value. Default is 0.</param>
            <returns>A value rounded to the nearest integer or to the specified number of fractional digits.</returns>
            <remarks>
            ```scriban-html
            {{ 4.6 | math.round }}
            {{ 4.3 | math.round }}
            {{ 4.5612 | math.round 2 }}
            ```
            ```html
            5
            4
            4.56
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.Times(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.Object)">
            <summary>
            Performs the multiplication of the input value with the `with` value
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="value">The input value</param>
            <param name="with">The with value to multiply to`value`</param>
            <returns>The results of the multiplication: `value` * `with`</returns>
            <remarks>
            ```scriban-html
            {{ 2 | math.times 3}}
            ```
            ```html
            6
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.Uuid">
            <summary>
            Creates a new UUID
            </summary>
            <returns>The created UUID, ex. 2dc55d50-3f6c-446a-87d0-a5a4eed23269</returns>
            <remarks>
            ```scriban-html
            {{ math.uuid }}
            ```
            ```html
            1c0a4aa8-680e-4bd6-95e9-cdbec45ef057
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.MathFunctions.Random(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Int32,System.Int32)">
            <summary>
            Creates a random number
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="minValue">The inclusive lower bound of the random number returned</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A random number greater or equal to minValue and less than maxValue</returns>
            <remarks>
            ```scriban-html
            {{ math.random 1 10 }}
            ```
            ```html
            7
            ```
            </remarks>
        </member>
        <member name="T:Scriban.Functions.ObjectFunctions">
            <summary>
            Object functions available through the builtin object 'object'.
            </summary>
        </member>
        <member name="M:Scriban.Functions.ObjectFunctions.Default(System.Object,System.Object)">
            <summary>
            The `default` value is returned if the input `value` is null or an empty string "". A string containing whitespace characters will not resolve to the default value.
            </summary>
            <param name="value">The input value to check if it is null or an empty string.</param>
            <param name="default">The default value to return if the input `value` is null or an empty string.</param>
            <returns>The `default` value is returned if the input `value` is null or an empty string "", otherwise it returns `value`</returns>
            <remarks>
            ```scriban-html
            {{ undefined_var | object.default "Yo" }}
            ```
            ```html
            Yo
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ObjectFunctions.Eval(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object)">
            <summary>
            The evaluates a string as a scriban expression or evaluate the passed function or return the passed value.
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="value">The input value, either a scriban template in a string, or an alias function or directly a value.</param>
            <returns>The evaluation of the input value.</returns>
            <remarks>
            ```scriban-html
            {{ "1 + 2" | object.eval }}
            ```
            ```html
            3
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ObjectFunctions.EvalTemplate(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object)">
            <summary>
            The evaluates a string as a scriban template or evaluate the passed function or return the passed value.
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="value">The input value, either a scriban template in a string, or an alias function or directly a value.</param>
            <returns>The evaluation of the input value.</returns>
            <remarks>
            ```scriban-html
            {{ "This is a template text {{ 1 + 2 }}" | object.eval_template }}
            ```
            ```html
            This is a template text 3
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ObjectFunctions.Format(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.String,System.String)">
            <summary>
            Formats an object using specified format.
            </summary>
            <param name="context">The template context</param>
            <param name="span">The source span</param>
            <param name="value">The input value</param>
            <param name="format">The format string.</param>
            <param name="culture">The culture as a string (e.g `en-US`). By default the culture from <see cref="P:Scriban.TemplateContext.CurrentCulture"/> is used</param>
            <remarks>
            ```scriban-html
            {{ 255 | object.format "X4" }}
            {{ 1523 | object.format "N2" "en-US" }}
            ```
            ```html
            00FF
            1,523.00
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ObjectFunctions.HasKey(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Checks if the specified object as the member `key`
            </summary>
            <param name="value">The input object.</param>
            <param name="key">The member name to check its existence.</param>
            <returns>**true** if the input object contains the member `key`; otherwise **false**</returns>
            <remarks>
            ```scriban-html
            {{ product | object.has_key "title" }}
            ```
            ```html
            true
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ObjectFunctions.HasValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Checks if the specified object as a value for the member `key`
            </summary>
            <param name="value">The input object.</param>
            <param name="key">The member name to check the existence of its value.</param>
            <returns>**true** if the input object contains the member `key` and has a value; otherwise **false**</returns>
            <remarks>
            ```scriban-html
            {{ product | object.has_value "title" }}
            ```
            ```html
            true
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ObjectFunctions.Keys(Scriban.TemplateContext,System.Object)">
            <summary>
            Gets the members/keys of the specified value object.
            </summary>
            <param name="context">The template context</param>
            <param name="value">The input object.</param>
            <returns>A list with the member names/key of the input object</returns>
            <remarks>
            ```scriban-html
            {{ product | object.keys | array.sort }}
            ```
            ```html
            ["title", "type"]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ObjectFunctions.Size(System.Object)">
            <summary>
            Returns the size of the input object.
            - If the input object is a string, it will return the length
            - If the input is a list, it will return the number of elements
            - If the input is an object, it will return the number of members
            </summary>
            <param name="value">The input object.</param>
            <returns>The size of the input object.</returns>
            <remarks>
            ```scriban-html
            {{ [1, 2, 3] | object.size }}
            ```
            ```html
            3
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.ObjectFunctions.Typeof(System.Object)">
             <summary>
             Returns string representing the type of the input object. The type can be `string`, `boolean`, `number`, `array`, `iterator` and `object`
             </summary>
             <param name="value">The input object.</param>
             <remarks>
             ```scriban-html
             {{ null | object.typeof }}
             {{ true | object.typeof }}
             {{ 1 | object.typeof }}
             {{ 1.0 | object.typeof }}
             {{ "text" | object.typeof }}
             {{ 1..5 | object.typeof }}
             {{ [1,2,3,4,5] | object.typeof }}
             {{ {} | object.typeof }}
             {{ object | object.typeof }}
             ```
             ```html
            
             boolean
             number
             number
             string
             iterator
             array
             object
             object
             ```
             </remarks>
        </member>
        <member name="M:Scriban.Functions.ObjectFunctions.Kind(Scriban.TemplateContext,System.Object)">
             <summary>
             Returns string representing the type of the input object. The type can be `string`, `bool`, `byte`, `sbyte`, `ushort`, `short`, `uint`, `int`,
             `ulong`, `long`, `float`, `double`, `decimal`, `bigint`, `enum`, `range`, `array`, `function` and `object`
             </summary>
             <param name="value">The input object.</param>
             <remarks>
             This function is newer than object.typeof and returns more detailed results about the types (e.g instead of `number`, returns `int` or `double`)
            
             ```scriban-html
             {{ null | object.kind }}
             {{ true | object.kind }}
             {{ 1 | object.kind }}
             {{ 1.0 | object.kind }}
             {{ "text" | object.kind }}
             {{ 1..5 | object.kind }}
             {{ [1,2,3,4,5] | object.kind }}
             {{ {} | object.kind }}
             {{ object | object.kind }}
             ```
             ```html
            
             bool
             int
             double
             string
             range
             array
             object
             object
             ```
             </remarks>
        </member>
        <member name="M:Scriban.Functions.ObjectFunctions.Values(Scriban.TemplateContext,System.Object)">
            <summary>
            Gets the member's values of the specified value object.
            </summary>
            <param name="context">The template context</param>
            <param name="value">The input object.</param>
            <returns>A list with the member values of the input object</returns>
            <remarks>
            ```scriban-html
            {{ product | object.values | array.sort }}
            ```
            ```html
            ["fruit", "Orange"]
            ```
            </remarks>
        </member>
        <member name="T:Scriban.Functions.RegexFunctions">
             <summary>
             Functions exposed through `regex` builtin object.
            
             >*Note:* If your regular expression contains backslashes (` \ `), you will need to do one of the following:
             >- Anywhere you would use a ` \ `, use two.  For example: `"\d+\.\d+"` becomes `"\\d+\\.\\d+"`
             >- Use [verbatim strings](language.md#31-strings).  For example: `"\d+\.\d+"` becomes `` `\d+\.\d+` ``
             </summary>
             <seealso cref="T:Scriban.Runtime.ScriptObject" />
        </member>
        <member name="M:Scriban.Functions.RegexFunctions.Escape(System.String)">
            <summary>
            Escapes a minimal set of characters (`\`, `*`, `+`, `?`, `|`, `{`, `[`, `(`,`)`, `^`, `$`,`.`, `#`, and white space)
            by replacing them with their escape codes.
            This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.
            </summary>
            <param name="pattern">The input string that contains the text to convert.</param>
            <returns>A string of characters with metacharacters converted to their escaped form.</returns>
            <remarks>
            ```scriban-html
            {{ "(abc.*)" | regex.escape }}
            ```
            ```html
            \(abc\.\*\)
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.RegexFunctions.Match(Scriban.TemplateContext,System.String,System.String,System.String)">
            <summary>
            Searches an input string for a substring that matches a regular expression pattern and returns an array with the match occurences.
            </summary>
            <param name="context">The template context (to fetch the timeout configuration)</param>
            <param name="text">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A string with regex options, that can contain the following option characters (default is `null`):
            - `i`: Specifies case-insensitive matching.
            - `m`: Multiline mode. Changes the meaning of `^` and `$` so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string.
            - `s`: Specifies single-line mode. Changes the meaning of the dot `.` so it matches every character (instead of every character except `\n`).
            - `x`: Eliminates unescaped white space from the pattern and enables comments marked with `#`.
            </param>
            <returns>An array that contains all the match groups. The first group contains the entire match. The other elements contain regex matched groups `(..)`. An empty array returned means no match.</returns>
            <remarks>
            ```scriban-html
            {{ "this is a text123" | regex.match `(\w+) a ([a-z]+\d+)` }}
            ```
            ```html
            ["is a text123", "is", "text123"]
            ```
            Notice that the first element returned in the array is the entire regex match, followed by the regex group matches.
            </remarks>
        </member>
        <member name="M:Scriban.Functions.RegexFunctions.Matches(Scriban.TemplateContext,System.String,System.String,System.String)">
            <summary>
            Searches an input string for multiple substrings that matches a regular expression pattern and returns an array with the match occurences.
            </summary>
            <param name="context">The template context (to fetch the timeout configuration)</param>
            <param name="text">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A string with regex options, that can contain the following option characters (default is `null`):
            - `i`: Specifies case-insensitive matching.
            - `m`: Multiline mode. Changes the meaning of `^` and `$` so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string.
            - `s`: Specifies single-line mode. Changes the meaning of the dot `.` so it matches every character (instead of every character except `\n`).
            - `x`: Eliminates unescaped white space from the pattern and enables comments marked with `#`.
            </param>
            <returns>An array of matches that contains all the match groups. The first group contains the entire match. The other elements contain regex matched groups `(..)`. An empty array returned means no match.</returns>
            <remarks>
            ```scriban-html
            {{ "this is a text123" | regex.matches `(\w+)` }}
            ```
            ```html
            [["this", "this"], ["is", "is"], ["a", "a"], ["text123", "text123"]]
            ```
            Notice that the first element returned in the sub array is the entire regex match, followed by the regex group matches.
            </remarks>
        </member>
        <member name="M:Scriban.Functions.RegexFunctions.Replace(Scriban.TemplateContext,System.String,System.String,System.String,System.String)">
            <summary>
            In a specified input string, replaces strings that match a regular expression pattern with a specified replacement string.
            </summary>
            <param name="context">The template context (to fetch the timeout configuration)</param>
            <param name="text">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="replace">The replacement string.</param>
            <param name="options">A string with regex options, that can contain the following option characters (default is `null`):
            - `i`: Specifies case-insensitive matching.
            - `m`: Multiline mode. Changes the meaning of `^` and `$` so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string.
            - `s`: Specifies single-line mode. Changes the meaning of the dot `.` so it matches every character (instead of every character except `\n`).
            - `x`: Eliminates unescaped white space from the pattern and enables comments marked with `#`.
            </param>
            <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If pattern is not matched in the current instance, the method returns the current instance unchanged.</returns>
            <remarks>
            ```scriban-html
            {{ "abbbbcccd" | regex.replace "b+c+" "-Yo-" }}
            ```
            ```html
            a-Yo-d
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.RegexFunctions.Split(Scriban.TemplateContext,System.String,System.String,System.String)">
            <summary>
            Splits an input string into an array of substrings at the positions defined by a regular expression match.
            </summary>
            <param name="context">The template context (to fetch the timeout configuration)</param>
            <param name="text">The string to split.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A string with regex options, that can contain the following option characters (default is `null`):
            - `i`: Specifies case-insensitive matching.
            - `m`: Multiline mode. Changes the meaning of `^` and `$` so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string.
            - `s`: Specifies single-line mode. Changes the meaning of the dot `.` so it matches every character (instead of every character except `\n`).
            - `x`: Eliminates unescaped white space from the pattern and enables comments marked with `#`.
            </param>
            <returns>A string array.</returns>
            <remarks>
            ```scriban-html
            {{ "a, b   , c,    d" | regex.split `\s*,\s*` }}
            ```
            ```html
            ["a", "b", "c", "d"]
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.RegexFunctions.Unescape(System.String)">
            <summary>
            Converts any escaped characters in the input string.
            </summary>
            <param name="pattern">The input string containing the text to convert.</param>
            <returns>A string of characters with any escaped characters converted to their unescaped form.</returns>
            <remarks>
            ```scriban-html
            {{ "\\(abc\\.\\*\\)" | regex.unescape }}
            ```
            ```html
            (abc.*)
            ```
            </remarks>
        </member>
        <member name="T:Scriban.Functions.StringFunctions">
            <summary>
            String functions available through the builtin object 'string`.
            </summary>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Escape(System.String)">
            <summary>
            Escapes a string with escape characters.
            </summary>
            <param name="text">The input string</param>
            <returns>The two strings concatenated</returns>
            <remarks>
            ```scriban-html
            {{ "Hel\tlo\n\"W\\orld" | string.escape }}
            ```
            ```html
            Hel\tlo\n\"W\\orld
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Append(System.String,System.String)">
            <summary>
            Concatenates two strings
            </summary>
            <param name="text">The input string</param>
            <param name="with">The text to append</param>
            <returns>The two strings concatenated</returns>
            <remarks>
            ```scriban-html
            {{ "Hello" | string.append " World" }}
            ```
            ```html
            Hello World
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Capitalize(System.String)">
            <summary>
            Converts the first character of the passed string to a upper case character.
            </summary>
            <param name="text">The input string</param>
            <returns>The capitalized input string</returns>
            <remarks>
            ```scriban-html
            {{ "test" | string.capitalize }}
            ```
            ```html
            Test
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Capitalizewords(System.String)">
            <summary>
            Converts the first character of each word in the passed string to a upper case character.
            </summary>
            <param name="text">The input string</param>
            <returns>The capitalized input string</returns>
            <remarks>
            ```scriban-html
            {{ "This is easy" | string.capitalizewords }}
            ```
            ```html
            This Is Easy
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Contains(System.String,System.String)">
            <summary>
            Returns a boolean indicating whether the input string contains the specified string `value`.
            </summary>
            <param name="text">The input string</param>
            <param name="value">The string to look for</param>
            <returns><c>true</c> if `text` contains the string `value`</returns>
            <remarks>
            ```scriban-html
            {{ "This is easy" | string.contains "easy" }}
            ```
            ```html
            true
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Empty(System.String)">
            <summary>
            Returns a boolean indicating whether the input string is an empty string.
            </summary>
            <param name="text">The input string</param>
            <returns><c>true</c> if `text` is an empty string</returns>
            <remarks>
            ```scriban-html
            {{ "" | string.empty }}
            ```
            ```html
            true
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Whitespace(System.String)">
            <summary>
            Returns a boolean indicating whether the input string is empty or contains only whitespace characters.
            </summary>
            <param name="text">The input string</param>
            <returns><c>true</c> if `text` is empty string or contains only whitespace characters</returns>
            <remarks>
            ```scriban-html
            {{ "" | string.whitespace }}
            ```
            ```html
            true
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Downcase(System.String)">
            <summary>
            Converts the string to lower case.
            </summary>
            <param name="text">The input string</param>
            <returns>The input string lower case</returns>
            <remarks>
            ```scriban-html
            {{ "TeSt" | string.downcase }}
            ```
            ```html
            test
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.EndsWith(System.String,System.String)">
            <summary>
            Returns a boolean indicating whether the input string ends with the specified string `value`.
            </summary>
            <param name="text">The input string</param>
            <param name="value">The string to look for</param>
            <returns><c>true</c> if `text` ends with the specified string `value`</returns>
            <remarks>
            ```scriban-html
            {{ "This is easy" | string.ends_with "easy" }}
            ```
            ```html
            true
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Handleize(System.String)">
            <summary>
            Returns a url handle from the input string.
            </summary>
            <param name="text">The input string</param>
            <returns>A url handle</returns>
            <remarks>
            ```scriban-html
            {{ '100% M &amp; Ms!!!' | string.handleize  }}
            ```
            ```html
            100-m-ms
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Literal(System.String)">
            <summary>
            Return a string literal enclosed with double quotes of the input string.
            </summary>
            <param name="text">The string to return a literal from.</param>
            <returns>The literal of a string.</returns>
            <remarks>
            If the input string has non printable characters or they need contain a double quote, they will be escaped.
            ```scriban-html
            {{ 'Hello\n"World"' | string.literal }}
            ```
            ```html
            "Hello\n\"World\""
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.LStrip(System.String)">
            <summary>
            Removes any whitespace characters on the **left** side of the input string.
            </summary>
            <param name="text">The input string</param>
            <returns>The input string without any left whitespace characters</returns>
            <remarks>
            ```scriban-html
            {{ '   too many spaces' | string.lstrip  }}
            ```
            > Highlight to see the empty spaces to the right of the string
            ```html
            too many spaces
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Pluralize(System.Int32,System.String,System.String)">
            <summary>
            Outputs the singular or plural version of a string based on the value of a number.
            </summary>
            <param name="number">The number to check</param>
            <param name="singular">The singular string to return if number is == 1</param>
            <param name="plural">The plural string to return if number is != 1</param>
            <returns>The singular or plural string based on number</returns>
            <remarks>
            ```scriban-html
            {{ products.size }} {{products.size | string.pluralize 'product' 'products' }}
            ```
            ```html
            7 products
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Prepend(System.String,System.String)">
            <summary>
            Concatenates two strings by placing the `by` string in from of the `text` string
            </summary>
            <param name="text">The input string</param>
            <param name="by">The string to prepend to `text`</param>
            <returns>The two strings concatenated</returns>
            <remarks>
            ```scriban-html
            {{ "World" | string.prepend "Hello " }}
            ```
            ```html
            Hello World
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Remove(System.String,System.String)">
            <summary>
            Removes all occurrences of a substring from a string.
            </summary>
            <param name="text">The input string</param>
            <param name="remove">The substring to remove from the `text` string</param>
            <returns>The input string with the all occurence of a substring removed</returns>
            <remarks>
            ```scriban-html
            {{ "Hello, world. Goodbye, world." | string.remove "world" }}
            ```
            ```html
            Hello, . Goodbye, .
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.RemoveFirst(System.String,System.String)">
            <summary>
            Removes the first occurrence of a substring from a string.
            </summary>
            <param name="text">The input string</param>
            <param name="remove">The first occurence of substring to remove from the `text` string</param>
            <returns>The input string with the first occurence of a substring removed</returns>
            <remarks>
            ```scriban-html
            {{ "Hello, world. Goodbye, world." | string.remove_first "world" }}
            ```
            ```html
            Hello, . Goodbye, world.
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.RemoveLast(System.String,System.String)">
            <summary>
            Removes the last occurrence of a substring from a string.
            </summary>
            <param name="text">The input string</param>
            <param name="remove">The last occurence of substring to remove from the `text` string</param>
            <returns>The input string with the first occurence of a substring removed</returns>
            <remarks>
            ```scriban-html
            {{ "Hello, world. Goodbye, world." | string.remove_last "world" }}
            ```
            ```html
            Hello, world. Goodbye, .
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces all occurrences of a string with a substring.
            </summary>
            <param name="text">The input string</param>
            <param name="match">The substring to find in the `text` string</param>
            <param name="replace">The substring used to replace the string matched by `match` in the input `text`</param>
            <returns>The input string replaced</returns>
            <remarks>
            ```scriban-html
            {{ "Hello, world. Goodbye, world." | string.replace "world" "buddy" }}
            ```
            ```html
            Hello, buddy. Goodbye, buddy.
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.ReplaceFirst(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces the first occurrence of a string with a substring.
            </summary>
            <param name="text">The input string</param>
            <param name="match">The substring to find in the `text` string</param>
            <param name="replace">The substring used to replace the string matched by `match` in the input `text`</param>
            <param name="fromEnd">if true start match from end</param>
            <returns>The input string replaced</returns>
            <remarks>
            ```scriban-html
            {{ "Hello, world. Goodbye, world." | string.replace_first "world" "buddy" }}
            ```
            ```html
            Hello, buddy. Goodbye, world.
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.RStrip(System.String)">
            <summary>
            Removes any whitespace characters on the **right** side of the input string.
            </summary>
            <param name="text">The input string</param>
            <returns>The input string without any left whitespace characters</returns>
            <remarks>
            ```scriban-html
            {{ '   too many spaces           ' | string.rstrip  }}
            ```
            > Highlight to see the empty spaces to the right of the string
            ```html
               too many spaces
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Size(System.String)">
            <summary>
            Returns the number of characters from the input string
            </summary>
            <param name="text">The input string</param>
            <returns>The length of the input string</returns>
            <remarks>
            ```scriban-html
            {{ "test" | string.size }}
            ```
            ```html
            4
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Slice(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            The slice returns a substring, starting at the specified index. An optional second parameter can be passed to specify the length of the substring.
            If no second parameter is given, a substring with the remaining characters will be returned.
            </summary>
            <param name="text">The input string</param>
            <param name="start">The starting index character where the slice should start from the input `text` string</param>
            <param name="length">The number of character. Default is 0, meaning that the remaining of the string will be returned.</param>
            <returns>The input string sliced</returns>
            <remarks>
            ```scriban-html
            {{ "hello" | string.slice 0 }}
            {{ "hello" | string.slice 1 }}
            {{ "hello" | string.slice 1 3 }}
            {{ "hello" | string.slice 1 length:3 }}
            ```
            ```html
            hello
            ello
            ell
            ell
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Slice1(System.String,System.Int32,System.Int32)">
            <summary>
            The slice returns a substring, starting at the specified index. An optional second parameter can be passed to specify the length of the substring.
            If no second parameter is given, a substring with the first character will be returned.
            </summary>
            <param name="text">The input string</param>
            <param name="start">The starting index character where the slice should start from the input `text` string</param>
            <param name="length">The number of character. Default is 1, meaning that only the first character at `start` position will be returned.</param>
            <returns>The input string sliced</returns>
            <remarks>
            ```scriban-html
            {{ "hello" | string.slice1 0 }}
            {{ "hello" | string.slice1 1 }}
            {{ "hello" | string.slice1 1 3 }}
            {{ "hello" | string.slice1 1 length: 3 }}
            ```
            ```html
            h
            e
            ell
            ell
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Split(System.String,System.String)">
            <summary>
            The `split` function takes on a substring as a parameter.
            The substring is used as a delimiter to divide a string into an array. You can output different parts of an array using `array` functions.
            </summary>
            <param name="text">The input string</param>
            <param name="match">The string used to split the input `text` string</param>
            <returns>An enumeration of the substrings</returns>
            <remarks>
            ```scriban-html
            {{ for word in "Hi, how are you today?" | string.split ' ' ~}}
            {{ word }}
            {{ end ~}}
            ```
            ```html
            Hi,
            how
            are
            you
            today?
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.StartsWith(System.String,System.String)">
            <summary>
            Returns a boolean indicating whether the input string starts with the specified string `value`.
            </summary>
            <param name="text">The input string</param>
            <param name="value">The string to look for</param>
            <returns><c>true</c> if `text` starts with the specified string `value`</returns>
            <remarks>
            ```scriban-html
            {{ "This is easy" | string.starts_with "This" }}
            ```
            ```html
            true
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Strip(System.String)">
            <summary>
            Removes any whitespace characters on the **left** and **right** side of the input string.
            </summary>
            <param name="text">The input string</param>
            <returns>The input string without any left and right whitespace characters</returns>
            <remarks>
            ```scriban-html
            {{ '   too many spaces           ' | string.strip  }}
            ```
            > Highlight to see the empty spaces to the right of the string
            ```html
            too many spaces
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.StripNewlines(System.String)">
            <summary>
            Removes any line breaks/newlines from a string.
            </summary>
            <param name="text">The input string</param>
            <returns>The input string without any breaks/newlines characters</returns>
            <remarks>
            ```scriban-html
            {{ "This is a string.\r\n With \nanother \rstring" | string.strip_newlines  }}
            ```
            ```html
            This is a string. With another string
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.ToInt(Scriban.TemplateContext,System.String)">
            <summary>
            Converts a string to an integer
            </summary>
            <param name="context">The template context</param>
            <param name="text">The input string</param>
            <returns>A 32 bit integer or null if conversion failed</returns>
            <remarks>
            ```scriban-html
            {{ "123" | string.to_int + 1 }}
            ```
            ```html
            124
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.ToLong(Scriban.TemplateContext,System.String)">
            <summary>
            Converts a string to a long 64 bit integer
            </summary>
            <param name="context">The template context</param>
            <param name="text">The input string</param>
            <returns>A 64 bit integer or null if conversion failed</returns>
            <remarks>
            ```scriban-html
            {{ "123678912345678" | string.to_long + 1 }}
            ```
            ```html
            123678912345679
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.ToFloat(Scriban.TemplateContext,System.String)">
            <summary>
            Converts a string to a float
            </summary>
            <param name="context">The template context</param>
            <param name="text">The input string</param>
            <returns>A 32 bit float or null if conversion failed</returns>
            <remarks>
            ```scriban-html
            {{ "123.4" | string.to_float + 1 }}
            ```
            ```html
            124.4
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.ToDouble(Scriban.TemplateContext,System.String)">
            <summary>
            Converts a string to a double
            </summary>
            <param name="context">The template context</param>
            <param name="text">The input string</param>
            <returns>A 64 bit float or null if conversion failed</returns>
            <remarks>
            ```scriban-html
            {{ "123.4" | string.to_double + 1 }}
            ```
            ```html
            124.4
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncates a string down to the number of characters passed as the first parameter.
            An ellipsis (...) is appended to the truncated string and is included in the character count
            </summary>
            <param name="text">The input string</param>
            <param name="length">The maximum length of the output string, including the length of the `ellipsis`</param>
            <param name="ellipsis">The ellipsis to append to the end of the truncated string</param>
            <returns>The truncated input string</returns>
            <remarks>
            ```scriban-html
            {{ "The cat came back the very next day" | string.truncate 13 }}
            ```
            ```html
            The cat ca...
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Truncatewords(System.String,System.Int32,System.String)">
            <summary>
            Truncates a string down to the number of words passed as the first parameter.
            An ellipsis (...) is appended to the truncated string.
            </summary>
            <param name="text">The input string</param>
            <param name="count">The number of words to keep from the input `text` string before appending the `ellipsis`</param>
            <param name="ellipsis">The ellipsis to append to the end of the truncated string</param>
            <returns>The truncated input string</returns>
            <remarks>
            ```scriban-html
            {{ "The cat came back the very next day" | string.truncatewords 4 }}
            ```
            ```html
            The cat came back...
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Upcase(System.String)">
            <summary>
            Converts the string to uppercase
            </summary>
            <param name="text">The input string</param>
            <returns>The input string upper case</returns>
            <remarks>
            ```scriban-html
            {{ "test" | string.upcase }}
            ```
            ```html
            TEST
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Md5(System.String)">
            <summary>
            Computes the `md5` hash of the input string
            </summary>
            <param name="text">The input string</param>
            <returns>The `md5` hash of the input string</returns>
            <remarks>
            ```scriban-html
            {{ "test" | string.md5 }}
            ```
            ```html
            098f6bcd4621d373cade4e832627b4f6
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Sha1(System.String)">
            <summary>
            Computes the `sha1` hash of the input string
            </summary>
            <param name="text">The input string</param>
            <returns>The `sha1` hash of the input string</returns>
            <remarks>
            ```scriban-html
            {{ "test" | string.sha1 }}
            ```
            ```html
            a94a8fe5ccb19ba61c4c0873d391e987982fbbd3
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Sha256(System.String)">
            <summary>
            Computes the `sha256` hash of the input string
            </summary>
            <param name="text">The input string</param>
            <returns>The `sha256` hash of the input string</returns>
            <remarks>
            ```scriban-html
            {{ "test" | string.sha256 }}
            ```
            ```html
            9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.HmacSha1(System.String,System.String)">
            <summary>
            Converts a string into a SHA-1 hash using a hash message authentication code (HMAC). Pass the secret key for the message as a parameter to the function.
            </summary>
            <param name="text">The input string</param>
            <param name="secretKey">The secret key</param>
            <returns>The `SHA-1` hash of the input string using a hash message authentication code (HMAC)</returns>
            <remarks>
            ```scriban-html
            {{ "test" | string.hmac_sha1 "secret" }}
            ```
            ```html
            1aa349585ed7ecbd3b9c486a30067e395ca4b356
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.HmacSha256(System.String,System.String)">
            <summary>
            Converts a string into a SHA-256 hash using a hash message authentication code (HMAC). Pass the secret key for the message as a parameter to the function.
            </summary>
            <param name="text">The input string</param>
            <param name="secretKey">The secret key</param>
            <returns>The `SHA-256` hash of the input string using a hash message authentication code (HMAC)</returns>
            <remarks>
            ```scriban-html
            {{ "test" | string.hmac_sha256 "secret" }}
            ```
            ```html
            0329a06b62cd16b33eb6792be8c60b158d89a2ee3a876fce9a881ebb488c0914
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.PadLeft(System.String,System.Int32)">
            <summary>
            Pads a string with leading spaces to a specified total length.
            </summary>
            <param name="text">The input string</param>
            <param name="width">The number of characters in the resulting string</param>
            <returns>The input string padded</returns>
            <remarks>
            ```scriban-html
            hello{{ "world" | string.pad_left 10 }}
            ```
            ```html
            hello     world
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.PadRight(System.String,System.Int32)">
            <summary>
            Pads a string with trailing spaces to a specified total length.
            </summary>
            <param name="text">The input string</param>
            <param name="width">The number of characters in the resulting string</param>
            <returns>The input string padded</returns>
            <remarks>
            ```scriban-html
            {{ "hello" | string.pad_right 10 }}world
            ```
            ```html
            hello     world
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Base64Encode(System.String)">
            <summary>
            Encodes a string to its Base64 representation.
            Its character encoded will be UTF-8.
            </summary>
            <param name="text">The string to encode</param>
            <returns>The encoded string</returns>
            <remarks>
            ```scriban-html
            {{ "hello" | string.base64_encode }}
            ```
            ```html
            aGVsbG8=
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.Base64Decode(System.String)">
            <summary>
             Decodes a Base64-encoded string to a byte array.
            The encoding of the bytes is assumed to be UTF-8.
            </summary>
            <param name="text">The string to decode</param>
            <returns>The decoded string</returns>
            <remarks>
            ```scriban-html
            {{ "aGVsbG8=" | string.base64_decode }}
            ```
            ```html
            hello
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.StringFunctions.IndexOf(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this instance.
            The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="text">The string to search</param>
            <param name="search">The string to find the index of.</param>
            <param name="startIndex">
            If provided, the search starting position.
            If <see langword="null"/>, search will start at the beginning of <paramref name="text"/>.
            </param>
            <param name="count">
            If provided, the number of character positions to examine.
            If <see langword="null"/>, all character positions will be considered.
            </param>
            <param name="stringComparison">
            If provided, the comparison rules for the search.
            If <see langword="null"/>, <see cref="F:System.StringComparison.CurrentCulture"/>
            Allowed values are one of the following:
                'CurrentCulture', 'CurrentCultureIgnoreCase', 'InvariantCulture', 'InvariantCultureIgnoreCase', 'Ordinal', 'OrdinalIgnoreCase'
            </param>
            <returns>
            The zero-based index position of the <paramref name="search"/> parameter from the start of <paramref name="text"/>
            if <paramref name="search"/> is found, or -1 if it is not. If value is <see cref="F:System.String.Empty"/>,
            the return value is <paramref name="startIndex"/> (if <paramref name="startIndex"/> is not provided, the return value would be zero).
            </returns>
        </member>
        <member name="T:Scriban.Functions.TimeSpanFunctions">
             <summary>
             A timespan object represents a time interval.
            
             | Name             | Description
             |--------------    |-----------------
             | `.days`          | Gets the number of days of this interval
             | `.hours`         | Gets the number of hours of this interval
             | `.minutes`       | Gets the number of minutes of this interval
             | `.seconds`       | Gets the number of seconds of this interval
             | `.milliseconds`  | Gets the number of milliseconds of this interval
             | `.total_days`    | Gets the total number of days in fractional part
             | `.total_hours`   | Gets the total number of hours in fractional part
             | `.total_minutes` | Gets the total number of minutes in fractional part
             | `.total_seconds` | Gets the total number of seconds  in fractional part
             | `.total_milliseconds` | Gets the total number of milliseconds  in fractional part
             </summary>
             <seealso cref="T:Scriban.Runtime.ScriptObject" />
        </member>
        <member name="P:Scriban.Functions.TimeSpanFunctions.Zero">
            <summary>
            Returns a timespan object that represents a 0 interval
            </summary>
            <returns>A zero timespan object</returns>
            <remarks>
            ```scriban-html
            {{ (timespan.zero + timespan.from_days 5).days }}
            ```
            ```html
            5
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.TimeSpanFunctions.FromDays(System.Double)">
            <summary>
            Returns a timespan object that represents a `days` interval
            </summary>
            <param name="days">The days.</param>
            <returns>A timespan object</returns>
            <remarks>
            ```scriban-html
            {{ (timespan.from_days 5).days }}
            ```
            ```html
            5
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.TimeSpanFunctions.FromHours(System.Double)">
            <summary>
            Returns a timespan object that represents a `hours` interval
            </summary>
            <param name="hours">The hours.</param>
            <returns>A timespan object</returns>
            <remarks>
            ```scriban-html
            {{ (timespan.from_hours 5).hours }}
            ```
            ```html
            5
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.TimeSpanFunctions.FromMinutes(System.Double)">
            <summary>
            Returns a timespan object that represents a `minutes` interval
            </summary>
            <param name="minutes">The minutes.</param>
            <returns>A timespan object</returns>
            <remarks>
            ```scriban-html
            {{ (timespan.from_minutes 5).minutes }}
            ```
            ```html
            5
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.TimeSpanFunctions.FromSeconds(System.Double)">
            <summary>
            Returns a timespan object that represents a `seconds` interval
            </summary>
            <param name="seconds">The seconds.</param>
            <returns>A timespan object</returns>
            <remarks>
            ```scriban-html
            {{ (timespan.from_seconds 5).seconds }}
            ```
            ```html
            5
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.TimeSpanFunctions.FromMilliseconds(System.Double)">
            <summary>
            Returns a timespan object that represents a `milliseconds` interval
            </summary>
            <param name="millis">The milliseconds.</param>
            <returns>A timespan object</returns>
            <remarks>
            ```scriban-html
            {{ (timespan.from_milliseconds 5).milliseconds }}
            ```
            ```html
            5
            ```
            </remarks>
        </member>
        <member name="M:Scriban.Functions.TimeSpanFunctions.Parse(System.String)">
            <summary>
            Parses the specified input string into a timespan object.
            </summary>
            <param name="text">A timespan text</param>
            <returns>A timespan object parsed from timespan</returns>
        </member>
        <member name="T:Scriban.Helpers.BoxHelper">
            <summary>
            Provides true/false already boxed
            </summary>
        </member>
        <member name="T:Scriban.Helpers.FastStack`1">
            <summary>
            Lightweight stack object.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
        </member>
        <member name="T:Scriban.LogMessageBag">
            <summary>
            Contains log messages.
            </summary>
        </member>
        <member name="T:Scriban.Parsing.Lexer">
            <summary>
            Lexer enumerator that generates <see cref="T:Scriban.Parsing.Token"/>, to use in a foreach.
            </summary>
        </member>
        <member name="F:Scriban.Parsing.Lexer.Options">
            <summary>
            Lexer options.
            </summary>
        </member>
        <member name="M:Scriban.Parsing.Lexer.#ctor(System.String,System.String,System.Nullable{Scriban.Parsing.LexerOptions})">
            <summary>
            Initialize a new instance of this <see cref="T:Scriban.Parsing.Lexer" />.
            </summary>
            <param name="text">The text to analyze</param>
            <param name="sourcePath">The sourcePath</param>
            <param name="options">The options for the lexer</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Scriban.Parsing.Lexer.Text">
            <summary>
            Gets the text being parsed by this lexer
            </summary>
        </member>
        <member name="P:Scriban.Parsing.Lexer.SourcePath">
             <summary>
            
             </summary>
        </member>
        <member name="P:Scriban.Parsing.Lexer.HasErrors">
            <summary>
            Gets a boolean indicating whether this lexer has errors.
            </summary>
        </member>
        <member name="P:Scriban.Parsing.Lexer.Errors">
            <summary>
            Gets error messages.
            </summary>
        </member>
        <member name="M:Scriban.Parsing.Lexer.GetEnumerator">
            <summary>
            Enumerator. Use simply <code>foreach</code> on this instance to automatically trigger an enumeration of the tokens.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Scriban.Parsing.Lexer.Enumerator">
            <summary>
            Custom enumerator on <see cref="T:Scriban.Parsing.Token"/>
            </summary>
        </member>
        <member name="T:Scriban.Parsing.LexerOptions">
            <summary>
            Defines the options for the lexer.
            </summary>
        </member>
        <member name="F:Scriban.Parsing.LexerOptions.Default">
            <summary>
            Default <see cref="T:Scriban.Parsing.LexerOptions"/>
            </summary>
        </member>
        <member name="P:Scriban.Parsing.LexerOptions.Mode">
            <summary>
            Gets or sets the template mode (text and script, script only, script with frontmatter...etc.). Default is <see cref="F:Scriban.Parsing.ScriptMode.Default"/> text and script mixed.
            </summary>
        </member>
        <member name="P:Scriban.Parsing.LexerOptions.Lang">
            <summary>
            Gets or sets the scripting language used (e.g default, liquid, scientific...).
            </summary>
        </member>
        <member name="P:Scriban.Parsing.LexerOptions.FrontMatterMarker">
            <summary>
            If selected mode is <see cref="F:Scriban.Parsing.ScriptMode.FrontMatterOnly"/> or <see cref="F:Scriban.Parsing.ScriptMode.FrontMatterAndContent"/>, this marker will be used
            </summary>
        </member>
        <member name="P:Scriban.Parsing.LexerOptions.EnableIncludeImplicitString">
            <summary>
            <c>true</c> to parse the include target as an implicit string (to support Jekyll passing raw path /a/b/c.txt as an include target).
            Only valid if Lang == <see cref="F:Scriban.Parsing.ScriptLang.Liquid"/> as well.
            </summary>
        </member>
        <member name="P:Scriban.Parsing.LexerOptions.StartPosition">
            <summary>
            Defines the position to start the lexer parsing relative to the input text passed to <see cref="T:Scriban.Parsing.Lexer"/> constructor
            </summary>
        </member>
        <member name="P:Scriban.Parsing.LexerOptions.KeepTrivia">
            <summary>
            The lexer will return whitespaces tokens
            </summary>
        </member>
        <member name="P:Scriban.Parsing.LexerOptions.TryMatchCustomToken">
            <summary>
            Gets or sets a delegate to allow to match a custom token.
            </summary>
        </member>
        <member name="T:Scriban.Parsing.TryMatchCustomTokenDelegate">
            <summary>
            A delegate used for matching a custom token. NOTE: A custom token should not parse new lines (`\n` or `\r`)
            </summary>
            <param name="text">Text being parsed</param>
            <param name="position">Current position within the string (to increment if the token is parsed, to keep it as it is if not)</param>
            <param name="length">Output the number of character successfully matched at <paramref name="position"/>.</param>
            <param name="tokenType">The custom token type within the range (<see cref="F:Scriban.Parsing.TokenType.Custom"/> to <see cref="F:Scriban.Parsing.TokenType.Custom9"/></param>
            <returns><c>true</c> if the text at position <paramref name="position"/> is a custom token.</returns>
        </member>
        <member name="T:Scriban.Parsing.Parser">
            <summary>
            The parser.
            </summary>
        </member>
        <member name="M:Scriban.Parsing.Parser.#ctor(Scriban.Parsing.Lexer,System.Nullable{Scriban.Parsing.ParserOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Parsing.Parser"/> class.
            </summary>
            <param name="lexer">The lexer.</param>
            <param name="options">The options.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="F:Scriban.Parsing.Parser.ParseExpressionMode.Default">
            <summary>
            All expressions (e.g literals, function calls, function pipes...etc.)
            </summary>
        </member>
        <member name="F:Scriban.Parsing.Parser.ParseExpressionMode.DefaultNoNamedArgument">
            <summary>
            All expressions (e.g literals, function calls, function pipes...etc.)
            </summary>
        </member>
        <member name="F:Scriban.Parsing.Parser.ParseExpressionMode.BasicExpression">
            <summary>
            Only literal, unary, nested, array/object initializer, dot access, array access
            </summary>
        </member>
        <member name="F:Scriban.Parsing.Parser.ParseExpressionMode.WhenExpression">
            <summary>
            A when expression cannot use `||`, ',' or 'or' at the top-level as they are used to separate expressions.
            </summary>
        </member>
        <member name="T:Scriban.Parsing.Parser.ScriptExpressionAsStatement">
            <summary>
            Used internally to transform an expression into a statement
            </summary>
        </member>
        <member name="T:Scriban.Parsing.ParserOptions">
            <summary>
            Defines the options used when parsing a template.
            </summary>
        </member>
        <member name="P:Scriban.Parsing.ParserOptions.ExpressionDepthLimit">
            <summary>
            Sets the depth limit of nested statements (e.g nested if/else) to disallow deep/potential stack-overflow exploits. Default is null, so there is no limit.
            </summary>
        </member>
        <member name="P:Scriban.Parsing.ParserOptions.LiquidFunctionsToScriban">
            <summary>
            <c>true</c> to convert liquid builtin function calls to scriban function calls (e.g abs = math.abs, downcase = string.downcase)
            </summary>
        </member>
        <member name="P:Scriban.Parsing.ParserOptions.ParseFloatAsDecimal">
            <summary>
            Parse float as <see cref="T:System.Decimal"/> instead of <see cref="T:System.Double"/>.
            If the number cannot be represented to a decimal, it will fall back to a double.
            </summary>
        </member>
        <member name="T:Scriban.Parsing.ScriptLang">
            <summary>
            Defines the language the parser should use.
            </summary>
        </member>
        <member name="F:Scriban.Parsing.ScriptLang.Default">
            <summary>
            Default scriban language.
            </summary>
        </member>
        <member name="F:Scriban.Parsing.ScriptLang.Liquid">
            <summary>
            Liquid language.
            </summary>
        </member>
        <member name="F:Scriban.Parsing.ScriptLang.Scientific">
            <summary>
            Scientific language (similar to <see cref="F:Scriban.Parsing.ScriptLang.Default"/>, but with different parsing rules).
            </summary>
        </member>
        <member name="T:Scriban.Parsing.ScriptMode">
            <summary>
            Defines how the parser should parse a script text.
            </summary>
        </member>
        <member name="F:Scriban.Parsing.ScriptMode.Default">
            <summary>
            The template contains a regular script content (text and script mixed).
            </summary>
        </member>
        <member name="F:Scriban.Parsing.ScriptMode.FrontMatterOnly">
            <summary>
            The template contains a script frontmatter (script only) and the parser will parse only this part.
            </summary>
        </member>
        <member name="F:Scriban.Parsing.ScriptMode.FrontMatterAndContent">
            <summary>
            The template contains a script frontmatter (script only) and a content (text and script mixed) and will parse both.
            </summary>
        </member>
        <member name="F:Scriban.Parsing.ScriptMode.ScriptOnly">
            <summary>
            The template is directly scriban code (script only) so no necessary {{ }} for entering a code block
            </summary>
        </member>
        <member name="T:Scriban.Parsing.SourceSpan">
            <summary>
            Defines the precise source location.
            </summary>
        </member>
        <member name="T:Scriban.Parsing.Token">
            <summary>
            A lightweight token struct to avoid GC allocations.
            </summary>
            <seealso>
                <cref>System.IEquatable{Scriban.Parsing.Token}</cref>
            </seealso>
        </member>
        <member name="M:Scriban.Parsing.Token.#ctor(Scriban.Parsing.TokenType,Scriban.Parsing.TextPosition,Scriban.Parsing.TextPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Parsing.Token"/> struct.
            </summary>
            <param name="type">The type.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="F:Scriban.Parsing.Token.Type">
            <summary>
            The type of token.
            </summary>
        </member>
        <member name="F:Scriban.Parsing.Token.Start">
            <summary>
            The start position of this token.
            </summary>
        </member>
        <member name="F:Scriban.Parsing.Token.End">
            <summary>
            The end position of this token.
            </summary>
        </member>
        <member name="T:Scriban.Parsing.TokenType">
            <summary>
            An enumeration to categorize tokens.
            </summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.CodeEnter">
            <summary>Token "{{"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.LiquidTagEnter">
            <summary>Token "{%"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.CodeExit">
            <summary>Token "}}"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.LiquidTagExit">
            <summary>Token "%}"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.IdentifierSpecial">
            <summary>
            An identifier starting by a $
            </summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Identifier">
            <summary>
            An identifier
            </summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Integer">
            <summary>
            An integer (int, long...)
            </summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.HexaInteger">
            <summary>
            A Hexadecimal integer (int, long...)
            </summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.BinaryInteger">
            <summary>
            A binary integer (int, long...)
            </summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Float">
            <summary>
            A floating point number
            </summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.String">
            <summary>
            A string
            </summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.ImplicitString">
            <summary>
            An implicit string with quotes
            </summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.VerbatimString">
            <summary>
            A verbatim string
            </summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.SemiColon">
            <summary>Token ";"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Arroba">
            <summary>Token "@"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Caret">
            <summary>Token "^"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleCaret">
            <summary>Token "^^"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Colon">
            <summary>Token ":"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Equal">
            <summary>Token "="</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.VerticalBar">
            <summary>Token "|"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.PipeGreater">
            <summary>Token "|>"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Exclamation">
            <summary>Token "!"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleAmp">
            <summary>Token "&amp;&amp;"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleVerticalBar">
            <summary>Token "||"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Amp">
            <summary>Token "&amp;"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Question">
            <summary>Token "?"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleQuestion">
            <summary>Token "??"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.QuestionDot">
            <summary>Token "?."</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.QuestionExclamation">
            <summary>Token "?!"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleEqual">
            <summary>Token "=="</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.ExclamationEqual">
            <summary>Token "!="</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Less">
            <summary>Token "&lt;"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Greater">
            <summary>Token ">"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.LessEqual">
            <summary>Token "&lt;="</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.GreaterEqual">
            <summary>Token ">="</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Divide">
            <summary>Token "/"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DivideEqual">
            <summary>Token "/="</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleDivide">
            <summary>Token "//"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleDivideEqual">
            <summary>Token "//="</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Asterisk">
            <summary>Token "*"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.AsteriskEqual">
            <summary>Token "*="</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Plus">
            <summary>Token "+"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.PlusEqual">
            <summary>Token "+="</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoublePlus">
            <summary>Token "++"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Minus">
            <summary>Token "-"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.MinusEqual">
            <summary>Token "-="</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleMinus">
            <summary>Token "--"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Percent">
            <summary>Token "%"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.PercentEqual">
            <summary>Token "%="</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleLessThan">
            <summary>Token "&lt;&lt;"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleGreaterThan">
            <summary>Token ">>"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Comma">
            <summary>Token ","</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Dot">
            <summary>Token "."</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleDot">
            <summary>Token ".."</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.TripleDot">
            <summary>Token "..."</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.DoubleDotLess">
            <summary>Token "..&lt;"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.OpenParen">
            <summary>Token "("</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.CloseParen">
            <summary>Token ")"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.OpenBrace">
            <summary>Token "{"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.CloseBrace">
            <summary>Token "}"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.OpenBracket">
            <summary>Token "["</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.CloseBracket">
            <summary>Token "]"</summary>
        </member>
        <member name="F:Scriban.Parsing.TokenType.Custom">
            <summary>
            Custom token
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction">
            <summary>
            Creates a reflection based <see cref="T:Scriban.Runtime.IScriptCustomFunction"/> from a <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionbool_IEnumerable_object">
            <summary>
            Optimized custom function for: bool (IEnumerable, object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionbool_object">
            <summary>
            Optimized custom function for: bool (object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionbool_string_string">
            <summary>
            Optimized custom function for: bool (string, string)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionbool_string">
            <summary>
            Optimized custom function for: bool (string)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionDateTime">
            <summary>
            Optimized custom function for: DateTime ()
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionDateTime_DateTime_double">
            <summary>
            Optimized custom function for: DateTime (DateTime, double)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionDateTime_DateTime_int">
            <summary>
            Optimized custom function for: DateTime (DateTime, int)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functiondouble_double_int___Opt">
            <summary>
            Optimized custom function for: double (double, int = ...)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functiondouble_double">
            <summary>
            Optimized custom function for: double (double)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionIEnumerable_IEnumerable_IEnumerable">
            <summary>
            Optimized custom function for: IEnumerable (IEnumerable, IEnumerable)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionIEnumerable_IEnumerable_int_object">
            <summary>
            Optimized custom function for: IEnumerable (IEnumerable, int, object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionIEnumerable_IEnumerable_int">
            <summary>
            Optimized custom function for: IEnumerable (IEnumerable, int)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionIEnumerable_IEnumerable_object">
            <summary>
            Optimized custom function for: IEnumerable (IEnumerable, object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionIEnumerable_IEnumerable">
            <summary>
            Optimized custom function for: IEnumerable (IEnumerable)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionIEnumerable_string_string">
            <summary>
            Optimized custom function for: IEnumerable (string, string)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionIEnumerable_TemplateContext_SourceSpan_object_string___Opt">
            <summary>
            Optimized custom function for: IEnumerable (TemplateContext, SourceSpan, object, string = ...)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionIEnumerable_TemplateContext_SourceSpan_object_string">
            <summary>
            Optimized custom function for: IEnumerable (TemplateContext, SourceSpan, object, string)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionIList_IList_int">
            <summary>
            Optimized custom function for: IList (IList, int)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionint_IEnumerable">
            <summary>
            Optimized custom function for: int (IEnumerable)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionint_object">
            <summary>
            Optimized custom function for: int (object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionint_string">
            <summary>
            Optimized custom function for: int (string)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionobject_IEnumerable">
            <summary>
            Optimized custom function for: object (IEnumerable)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionobject_object_object">
            <summary>
            Optimized custom function for: object (object, object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionobject_TemplateContext_SourceSpan_double_object">
            <summary>
            Optimized custom function for: object (TemplateContext, SourceSpan, double, object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionobject_TemplateContext_SourceSpan_IList_object___Opt">
            <summary>
            Optimized custom function for: object (TemplateContext, SourceSpan, IList, object = ...)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionobject_TemplateContext_SourceSpan_int_int">
            <summary>
            Optimized custom function for: object (TemplateContext, SourceSpan, int, int)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionobject_TemplateContext_SourceSpan_object_object">
            <summary>
            Optimized custom function for: object (TemplateContext, SourceSpan, object, object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionobject_TemplateContext_SourceSpan_object">
            <summary>
            Optimized custom function for: object (TemplateContext, SourceSpan, object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionobject_TemplateContext_string">
            <summary>
            Optimized custom function for: object (TemplateContext, string)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionScriptArray_TemplateContext_object">
            <summary>
            Optimized custom function for: ScriptArray (TemplateContext, object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionScriptArray_TemplateContext_string_string_string___Opt">
            <summary>
            Optimized custom function for: ScriptArray (TemplateContext, string, string, string = ...)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionScriptRange_TemplateContext_SourceSpan_IEnumerable_object">
            <summary>
            Optimized custom function for: ScriptRange (TemplateContext, SourceSpan, IEnumerable, object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring">
            <summary>
            Optimized custom function for: string ()
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_int_string_string">
            <summary>
            Optimized custom function for: string (int, string, string)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_object">
            <summary>
            Optimized custom function for: string (object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_string_int_int___Opt">
            <summary>
            Optimized custom function for: string (string, int, int = ...)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_string_int_string___Opt">
            <summary>
            Optimized custom function for: string (string, int, string = ...)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_string_int">
            <summary>
            Optimized custom function for: string (string, int)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_string_string_string_bool___Opt">
            <summary>
            Optimized custom function for: string (string, string, string, bool = ...)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_string_string_string">
            <summary>
            Optimized custom function for: string (string, string, string)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_string_string">
            <summary>
            Optimized custom function for: string (string, string)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_string">
            <summary>
            Optimized custom function for: string (string)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_TemplateContext_object">
            <summary>
            Optimized custom function for: string (TemplateContext, object)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_TemplateContext_SourceSpan_IEnumerable_string_object___Opt">
            <summary>
            Optimized custom function for: string (TemplateContext, SourceSpan, IEnumerable, string, object = ...)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_TemplateContext_SourceSpan_object_string_string___Opt">
            <summary>
            Optimized custom function for: string (TemplateContext, SourceSpan, object, string, string = ...)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_TemplateContext_string_string_string_string___Opt">
            <summary>
            Optimized custom function for: string (TemplateContext, string, string, string, string = ...)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.Functionstring_TemplateContext_string">
            <summary>
            Optimized custom function for: string (TemplateContext, string)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionTimeSpan_double">
            <summary>
            Optimized custom function for: TimeSpan (double)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DynamicCustomFunction.FunctionTimeSpan_string">
            <summary>
            Optimized custom function for: TimeSpan (string)
            </summary>
        </member>
        <member name="F:Scriban.Runtime.DynamicCustomFunction.Method">
            <summary>
            Gets the reflection method associated to this dynamic call.
            </summary>
        </member>
        <member name="P:Scriban.Runtime.DynamicCustomFunction.Tag">
            <summary>
            Get or set an object tag for this instance.
            </summary>
        </member>
        <member name="M:Scriban.Runtime.DynamicCustomFunction.Create(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Returns a <see cref="T:Scriban.Runtime.DynamicCustomFunction"/> from the specified object target and <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="target">A target object - might be null</param>
            <param name="method">A MethodInfo</param>
            <returns>A custom <see cref="T:Scriban.Runtime.DynamicCustomFunction"/></returns>
        </member>
        <member name="M:Scriban.Runtime.DynamicCustomFunction.Create(System.Delegate)">
            <summary>
            Returns a <see cref="T:Scriban.Runtime.DynamicCustomFunction"/> from the specified delegate.
            </summary>
            <param name="del">A delegate</param>
            <returns>A custom <see cref="T:Scriban.Runtime.DynamicCustomFunction"/></returns>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction">
            <summary>
            Generic function wrapper handling any kind of function parameters.
            </summary>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction.InternalDelegateCustomFunction`1">
            <summary>
            A custom function taking one argument.
            </summary>
            <typeparam name="TResult">Type result</typeparam>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction.InternalDelegateCustomFunction`2">
            <summary>
            A custom function taking one argument.
            </summary>
            <typeparam name="T">Func 0 arg type</typeparam>
            <typeparam name="TResult">Type result</typeparam>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction.DelegateCustomAction`1">
            <summary>
            A custom action taking 1 argument.
            </summary>
            <typeparam name="T">Func 0 arg type</typeparam>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction.InternalDelegateCustomFunction`3">
            <summary>
            A custom function taking 2 arguments.
            </summary>
            <typeparam name="T1">Func 0 arg type</typeparam>
            <typeparam name="T2">Func 1 arg type</typeparam>
            <typeparam name="TResult">Type result</typeparam>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction.DelegateCustomAction`2">
            <summary>
            A custom action taking 2 arguments.
            </summary>
            <typeparam name="T1">Func 0 arg type</typeparam>
            <typeparam name="T2">Func 1 arg type</typeparam>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction.InternalDelegateCustomFunction`4">
            <summary>
            A custom function taking 3 arguments.
            </summary>
            <typeparam name="T1">Func 0 arg type</typeparam>
            <typeparam name="T2">Func 1 arg type</typeparam>
            <typeparam name="T3">Func 2 arg type</typeparam>
            <typeparam name="TResult">Type result</typeparam>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction.DelegateCustomAction`3">
            <summary>
            A custom action taking 3 arguments.
            </summary>
            <typeparam name="T1">Func 0 arg type</typeparam>
            <typeparam name="T2">Func 1 arg type</typeparam>
            <typeparam name="T3">Func 2 arg type</typeparam>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction.InternalDelegateCustomFunction`5">
            <summary>
            A custom function taking 4 arguments.
            </summary>
            <typeparam name="T1">Func 0 arg type</typeparam>
            <typeparam name="T2">Func 1 arg type</typeparam>
            <typeparam name="T3">Func 2 arg type</typeparam>
            <typeparam name="T4">Func 3 arg type</typeparam>
            <typeparam name="TResult">Type result</typeparam>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction.DelegateCustomAction`4">
            <summary>
            A custom action taking 4 arguments.
            </summary>
            <typeparam name="T1">Func 0 arg type</typeparam>
            <typeparam name="T2">Func 1 arg type</typeparam>
            <typeparam name="T3">Func 2 arg type</typeparam>
            <typeparam name="T4">Func 3 arg type</typeparam>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction.InternalDelegateCustomFunction`6">
            <summary>
            A custom function taking 5 arguments.
            </summary>
            <typeparam name="T1">Func 0 arg type</typeparam>
            <typeparam name="T2">Func 1 arg type</typeparam>
            <typeparam name="T3">Func 2 arg type</typeparam>
            <typeparam name="T4">Func 3 arg type</typeparam>
            <typeparam name="T5">Func 4 arg type</typeparam>
            <typeparam name="TResult">Type result</typeparam>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomFunction.DelegateCustomAction`5">
            <summary>
            A custom action taking 5 arguments.
            </summary>
            <typeparam name="T1">Func 0 arg type</typeparam>
            <typeparam name="T2">Func 1 arg type</typeparam>
            <typeparam name="T3">Func 2 arg type</typeparam>
            <typeparam name="T4">Func 3 arg type</typeparam>
            <typeparam name="T5">Func 4 arg type</typeparam>
        </member>
        <member name="T:Scriban.Runtime.DelegateCustomAction">
            <summary>
            A custom action taking 1 argument.
            </summary>
        </member>
        <member name="T:Scriban.Runtime.EmptyScriptObject">
            <summary>
            The empty object (unique singleton, cannot be modified, does not contain any properties)
            </summary>
        </member>
        <member name="T:Scriban.Runtime.IListAccessor">
            <summary>
            Generic interface used to access a list/array, used by <see cref="T:Scriban.TemplateContext"/> via <see cref="M:Scriban.TemplateContext.GetListAccessor(System.Object)"/>
            </summary>
        </member>
        <member name="M:Scriban.Runtime.IListAccessor.GetLength(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object)">
            <summary>
            Gets the length of the specified target object
            </summary>
            <param name="context">The template context originating this call</param>
            <param name="span">The source span originating</param>
            <param name="target">The target list object</param>
            <returns>The length</returns>
        </member>
        <member name="M:Scriban.Runtime.IListAccessor.GetValue(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.Int32)">
            <summary>
            Gets the element value at the specified index.
            </summary>
            <param name="context">The template context originating this call</param>
            <param name="span">The source span originating</param>
            <param name="target">The target list object</param>
            <param name="index">The index to retrieve a value</param>
            <returns>The value retrieved at the specified index for the target object</returns>
        </member>
        <member name="M:Scriban.Runtime.IListAccessor.SetValue(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.Int32,System.Object)">
            <summary>
            Sets the element value at the specified index.
            </summary>
            <param name="context">The template context originating this call</param>
            <param name="span">The source span originating</param>
            <param name="target">The target list object</param>
            <param name="index">The index to set the value</param>
            <param name="value">The value to set at the specified index</param>
        </member>
        <member name="T:Scriban.Runtime.IObjectAccessor">
            <summary>
            Generic interface used to access an object (either <see cref="T:Scriban.Runtime.ScriptObject"/> or .NET object), used by <see cref="T:Scriban.TemplateContext"/> via <see cref="M:Scriban.TemplateContext.GetMemberAccessor(System.Object)"/>
            </summary>
        </member>
        <member name="M:Scriban.Runtime.IObjectAccessor.GetMemberCount(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object)">
            <summary>
            Returns true if the object has any members, <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:Scriban.Runtime.IObjectAccessor.GetMembers(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object)">
            <summary>
            Returns the member names of an object.
            </summary>
            <param name="context">The originated template context</param>
            <param name="span">The originated span</param>
            <param name="target">The object target</param>
        </member>
        <member name="M:Scriban.Runtime.IObjectAccessor.HasMember(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.String)">
            <summary>
            Returns true if the specified target object has the specified member.
            </summary>
            <param name="context">The originated template context</param>
            <param name="span">The originated span</param>
            <param name="target">The object target</param>
            <param name="member">The member name</param>
            <returns><c>true</c> if the target object has the specified member; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Scriban.Runtime.IObjectAccessor.TryGetValue(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.String,System.Object@)">
            <summary>
            Tries to get the member value for the specified target object.
            </summary>
            <param name="context">The originated template context</param>
            <param name="span">The originated span</param>
            <param name="target">The object target</param>
            <param name="member">The member name</param>
            <param name="value">The value of the specified member if successful.</param>
            <returns><c>true</c> if the member value was retrieved from the target object; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Scriban.Runtime.IObjectAccessor.TrySetValue(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.String,System.Object)">
            <summary>
            Tries to set the member value for the specified target object.
            </summary>
            <param name="context">The originated template context</param>
            <param name="span">The originated span</param>
            <param name="target">The object target</param>
            <param name="member">The member name</param>
            <param name="value">The value of the specified member to set.</param>
            <returns><c>true</c> if the member value was set onto the target object; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Scriban.Runtime.IObjectAccessor.TryGetItem(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.Object,System.Object@)">
            <summary>
            Tries to get an item value at the specified index.
            </summary>
            <param name="context">The originated template context</param>
            <param name="span">The originated span</param>
            <param name="target">The object target</param>
            <param name="index">The index value</param>
            <param name="value">The value of the specified member if successful.</param>
            <returns><c>true</c> if the member value was retrieved from the target object; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Scriban.Runtime.IObjectAccessor.TrySetItem(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object,System.Object,System.Object)">
            <summary>
            Tries to set an item value at the specified index.
            </summary>
            <param name="context">The originated template context</param>
            <param name="span">The originated span</param>
            <param name="target">The object target</param>
            <param name="index">The index value</param>
            <param name="value">The value of the specified member to set.</param>
            <returns><c>true</c> if the member value was set onto the target object; <c>false</c> otherwise</returns>
        </member>
        <member name="P:Scriban.Runtime.IObjectAccessor.HasIndexer">
            <summary>
            Gets a boolean indicating whether this instance provides an indexer.
            </summary>
        </member>
        <member name="P:Scriban.Runtime.IObjectAccessor.IndexType">
            <summary>
            Gets the type of the indexer. Might be null if <see cref="P:Scriban.Runtime.IObjectAccessor.HasIndexer"/> is <c>false</c>.
            </summary>
        </member>
        <member name="T:Scriban.Runtime.IScriptCustomFunction">
            <summary>
            Allows to create a custom function object.
            </summary>
        </member>
        <member name="M:Scriban.Runtime.IScriptCustomFunction.Invoke(Scriban.TemplateContext,Scriban.Syntax.ScriptNode,Scriban.Runtime.ScriptArray,Scriban.Syntax.ScriptBlockStatement)">
            <summary>
            Calls the custom function object.
            </summary>
            <param name="context">The template context</param>
            <param name="callerContext">The script node originating this call</param>
            <param name="arguments">The parameters of the call</param>
            <param name="blockStatement">The current block statement this call is made</param>
            <returns>The result of the call</returns>
        </member>
        <member name="M:Scriban.Runtime.IScriptCustomFunction.InvokeAsync(Scriban.TemplateContext,Scriban.Syntax.ScriptNode,Scriban.Runtime.ScriptArray,Scriban.Syntax.ScriptBlockStatement)">
            <summary>
            Calls the custom function object asynchronously.
            </summary>
            <param name="context">The template context</param>
            <param name="callerContext">The script node originating this call</param>
            <param name="arguments">The parameters of the call</param>
            <param name="blockStatement">The current block statement this call is made</param>
            <returns>The result of the call</returns>
        </member>
        <member name="T:Scriban.Runtime.IScriptObject">
            <summary>
            Base interface for a scriptable object.
            </summary>
        </member>
        <member name="P:Scriban.Runtime.IScriptObject.Count">
            <summary>
            Gets the number of members
            </summary>
        </member>
        <member name="M:Scriban.Runtime.IScriptObject.Contains(System.String)">
            <summary>
            Determines whether this object contains the specified member.
            </summary>
            <param name="member">The member.</param>
            <returns><c>true</c> if this object contains the specified member; <c>false</c> otherwise</returns>
            <exception cref="T:System.ArgumentNullException">If member is null</exception>
        </member>
        <member name="P:Scriban.Runtime.IScriptObject.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Scriban.Runtime.IScriptObject.TryGetValue(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.String,System.Object@)">
            <summary>
            Tries the get the value of the specified member.
            </summary>
            <param name="context"></param>
            <param name="span"></param>
            <param name="member">The member.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value was retrieved</returns>
        </member>
        <member name="M:Scriban.Runtime.IScriptObject.CanWrite(System.String)">
            <summary>
            Determines whether the specified member is read-only.
            </summary>
            <param name="member">The member.</param>
            <returns><c>true</c> if the specified member is read-only</returns>
        </member>
        <member name="M:Scriban.Runtime.IScriptObject.TrySetValue(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value and readonly state of the specified member. This method overrides previous readonly state.
            </summary>
            <param name="context"></param>
            <param name="span"></param>
            <param name="member">The member.</param>
            <param name="value">The value.</param>
            <param name="readOnly">if set to <c>true</c> the value will be read only.</param>
        </member>
        <member name="M:Scriban.Runtime.IScriptObject.Remove(System.String)">
            <summary>
            Removes the specified member from this object.
            </summary>
            <param name="member">The member.</param>
            <returns><c>true</c> if it was removed</returns>
        </member>
        <member name="M:Scriban.Runtime.IScriptObject.SetReadOnly(System.String,System.Boolean)">
            <summary>
            Sets to read only the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="readOnly">if set to <c>true</c> the value will be read only.</param>
        </member>
        <member name="M:Scriban.Runtime.IScriptObject.Clone(System.Boolean)">
            <summary>
            Clones this instance.
            </summary>
            <param name="deep">Clones this instance deeply</param>
            <returns>A clone of this instance</returns>
        </member>
        <member name="T:Scriban.Runtime.IScriptOutput">
            <summary>
            Interface used to text output when evaluating a template used by <see cref="P:Scriban.TemplateContext.Output"/> and <see cref="M:Scriban.TemplateContext.PushOutput"/>
            </summary>
        </member>
        <member name="T:Scriban.Runtime.ScriptOutputExtensions">
            <summary>
            Extensions for <see cref="T:Scriban.Runtime.IScriptOutput"/>
            </summary>
            <summary>
            Extensions for <see cref="T:Scriban.Runtime.IScriptOutput"/>
            </summary>
        </member>
        <member name="T:Scriban.Runtime.IScriptTransformable">
            <summary>
            Can apply a transform to each element (e.g ScriptArray.Transform(...))
            </summary>
        </member>
        <member name="T:Scriban.Runtime.ITemplateLoader">
            <summary>
            Interface used for loading a template.
            </summary>
        </member>
        <member name="M:Scriban.Runtime.ITemplateLoader.GetPath(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.String)">
            <summary>
            Gets an absolute path for the specified include template name. Note that it is not necessarely a path on a disk,
            but an absolute path that can be used as a dictionary key for caching)
            </summary>
            <param name="context">The current context called from</param>
            <param name="callerSpan">The current span called from</param>
            <param name="templateName">The name of the template to load</param>
            <returns>An absolute path or unique key for the specified template name</returns>
        </member>
        <member name="M:Scriban.Runtime.ITemplateLoader.Load(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.String)">
            <summary>
            Loads a template using the specified template path/key.
            </summary>
            <param name="context">The current context called from</param>
            <param name="callerSpan">The current span called from</param>
            <param name="templatePath">The path/key previously returned by <see cref="M:Scriban.Runtime.ITemplateLoader.GetPath(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.String)"/></param>
            <returns>The content string loaded from the specified template path/key</returns>
        </member>
        <member name="M:Scriban.Runtime.ITemplateLoader.LoadAsync(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.String)">
            <summary>
            Loads a template using the specified template path/key.
            </summary>
            <param name="context">The current context called from</param>
            <param name="callerSpan">The current span called from</param>
            <param name="templatePath">The path/key previously returned by <see cref="M:Scriban.Runtime.ITemplateLoader.GetPath(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.String)"/></param>
            <returns>The content string loaded from the specified template path/key</returns>
        </member>
        <member name="T:Scriban.Runtime.MemberFilterDelegate">
            <summary>
            Allows to filter a member while importing a .NET object into a ScriptObject or while exposing a .NET instance through a ScriptObject, by returning <c>true</c> to keep the member; or false to discard it.
            </summary>
            <param name="member">A member info</param>
            <returns><c>true</c> to keep the member; otherwise <c>false</c> to remove the member</returns>
        </member>
        <member name="T:Scriban.Runtime.MemberRenamerDelegate">
            <summary>
            Allows to rename a member.
            </summary>
            <param name="member">A member info</param>
            <returns>The new name name of member</returns>
        </member>
        <member name="T:Scriban.Runtime.ScriptArray`1">
            <summary>
            Base runtime object for arrays.
            </summary>
            <seealso cref="T:System.Object" />
            <seealso cref="T:System.Collections.IList" />
        </member>
        <member name="M:Scriban.Runtime.ScriptArray`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Runtime.ScriptArray"/> class.
            </summary>
        </member>
        <member name="M:Scriban.Runtime.ScriptArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Runtime.ScriptArray"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Scriban.Runtime.ScriptArray`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Runtime.ScriptArray"/> class.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="T:Scriban.Runtime.ScriptObject">
            <summary>
            Base runtime object used to store properties.
            </summary>
            <seealso cref="T:System.Collections.IEnumerable" />
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Runtime.ScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Runtime.ScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Runtime.ScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Runtime.ScriptObject"/> class.
            </summary>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.#ctor(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Runtime.ScriptObject"/> class.
            </summary>
            <param name="capacity">Initial capacity of the dictionary</param>
            <param name="autoImportStaticsFromThisType">if set to <c>true</c> it is automatically importing statics members from the derived type.</param>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.#ctor(System.Int32,System.Nullable{System.Boolean},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Runtime.ScriptObject"/> class.
            </summary>
            <param name="capacity">Initial capacity of the dictionary</param>
            <param name="autoImportStaticsFromThisType">if set to <c>true</c> it is automatically importing statics members from the derived type.</param>
            <param name="keyComparer">Comparer to use when looking up members</param>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.Clear">
            <summary>
            Clears all members stored in this object.
            </summary>
        </member>
        <member name="P:Scriban.Runtime.ScriptObject.Count">
            <summary>
            Gets the number of members.
            </summary>
        </member>
        <member name="P:Scriban.Runtime.ScriptObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.Contains(System.String)">
            <summary>
            Determines whether this object contains the specified member.
            </summary>
            <param name="member">The member.</param>
            <returns><c>true</c> if this object contains the specified member; <c>false</c> otherwise</returns>
            <exception cref="T:System.ArgumentNullException">If member is null</exception>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.TryGetValue(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.String,System.Object@)">
            <summary>
            Tries the get the value of the specified member.
            </summary>
            <param name="context"></param>
            <param name="span"></param>
            <param name="member">The member.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value was retrieved</returns>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.GetSafeValue``1(System.String,``0)">
            <summary>
            Gets the value for the specified member and type.
            </summary>
            <typeparam name="T">Type of the expected member</typeparam>
            <param name="name">The name of the member.</param>
            <param name="defaultValue">Default value used if the value is not set or not of the expected type.</param>
            <returns>The value or default{T} is the value is different. Note that this method will override the value in this instance if the value doesn't match the type {T} </returns>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.CanWrite(System.String)">
            <summary>
            Determines whether the specified member is read-only.
            </summary>
            <param name="member">The member.</param>
            <returns><c>true</c> if the specified member is read-only</returns>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.TrySetValue(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value and readonly state of the specified member. This method overrides previous readonly state.
            </summary>
            <param name="context"></param>
            <param name="span"></param>
            <param name="member">The member.</param>
            <param name="value">The value.</param>
            <param name="readOnly">if set to <c>true</c> the value will be read only.</param>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.Remove(System.String)">
            <summary>
            Removes the specified member from this object.
            </summary>
            <param name="member">The member.</param>
            <returns><c>true</c> if it was removed</returns>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.SetReadOnly(System.String,System.Boolean)">
            <summary>
            Sets to read only the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="readOnly">if set to <c>true</c> the value will be read only.</param>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.Clone(System.Boolean)">
            <summary>
            Clones the content of this object.
            </summary>
            <param name="deep">If set to <c>true</c> all <see cref="T:Scriban.Runtime.ScriptObject"/> and <see cref="T:Scriban.Runtime.ScriptArray"/> will be cloned and copied recursively</param>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.From(System.Object)">
            <summary>
            Creates a <see cref="T:Scriban.Runtime.ScriptObject"/> by importing from the specified object. See remarks.
            </summary>
            <param name="obj">The object or a type.</param>
            <returns>A script object</returns>
            <remarks>
            <ul>
            <li>If <paramref name="obj"/> is a <see cref="T:System.Type"/>, this method will import only the static field/properties of the specified object.</li>
            <li>If <paramref name="obj"/> is a <see cref="T:Scriban.Runtime.ScriptObject"/>, this method will import the members of the specified object into the new object.</li>
            <li>If <paramref name="obj"/> is a plain object, this method will import the public fields/properties of the specified object into the <see cref="T:Scriban.Runtime.ScriptObject"/>.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Scriban.Runtime.ScriptObject.IsImportable(System.Object)">
            <summary>
            Determines whether the specified object is importable by the method the various Import methods.
            </summary>
            <param name="obj">The object.</param>
            <returns><c>true</c> if the object is importable; <c>false</c> otherwise</returns>
        </member>
        <member name="T:Scriban.Runtime.ScriptObjectExtensions">
            <summary>
            Extensions attached to an <see cref="T:Scriban.Runtime.IScriptObject"/>.
            </summary>
        </member>
        <member name="M:Scriban.Runtime.ScriptObjectExtensions.AssertNotReadOnly(Scriban.Runtime.IScriptObject)">
            <summary>
            Asserts that the specified script object is not readonly or throws a <see cref="T:Scriban.Syntax.ScriptRuntimeException"/>
            </summary>
            <param name="scriptObject">The script object.</param>
            <exception cref="T:Scriban.Syntax.ScriptRuntimeException">If the object is not readonly</exception>
        </member>
        <member name="M:Scriban.Runtime.ScriptObjectExtensions.Import(Scriban.Runtime.IScriptObject,System.Object,Scriban.Runtime.MemberFilterDelegate,Scriban.Runtime.MemberRenamerDelegate)">
            <summary>
            Imports the specified object intto this <see cref="T:Scriban.Runtime.ScriptObject"/> context. See remarks.
            </summary>
            <param name="script">The script object to import into</param>
            <param name="obj">The object.</param>
            <param name="filter">Optional member filterer</param>
            <param name="renamer">Optional renamer</param>
            <remarks>
            <ul>
            <li>If <paramref name="obj"/> is a <see cref="T:System.Type"/>, this method will import only the static field/properties of the specified object.</li>
            <li>If <paramref name="obj"/> is a <see cref="T:Scriban.Runtime.ScriptObject"/>, this method will import the members of the specified object into the new object.</li>
            <li>If <paramref name="obj"/> is a plain object, this method will import the public fields/properties of the specified object into the <see cref="T:Scriban.Runtime.ScriptObject"/>.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Scriban.Runtime.ScriptObjectExtensions.Import(Scriban.Runtime.IScriptObject,Scriban.Runtime.IScriptObject)">
            <summary>
            Imports the specified <see cref="T:Scriban.Runtime.ScriptObject"/> into this instance by copying the member values into this object.
            </summary>
            <param name="this">The script object to import into</param>
            <param name="other">The other <see cref="T:Scriban.Runtime.ScriptObject"/>.</param>
        </member>
        <member name="M:Scriban.Runtime.ScriptObjectExtensions.GetScriptObject(Scriban.Runtime.IScriptObject)">
            <summary>
            Gets the script object attached to the specified instance.
            </summary>
            <param name="this">The script object proxy.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Expecting ScriptObject or ScriptArray instance</exception>
        </member>
        <member name="M:Scriban.Runtime.ScriptObjectExtensions.ImportMember(Scriban.Runtime.IScriptObject,System.Object,System.String,System.String)">
            <summary>
            Imports a specific member from the specified object.
            </summary>
            <param name="script">The script object to import into</param>
            <param name="obj">The object.</param>
            <param name="memberName">Name of the member.</param>
            <param name="exportName">Name of the member name replacement. If null, use the default renamer will be used.</param>
        </member>
        <member name="M:Scriban.Runtime.ScriptObjectExtensions.Import(Scriban.Runtime.IScriptObject,System.Object,Scriban.Runtime.ScriptMemberImportFlags,Scriban.Runtime.MemberFilterDelegate,Scriban.Runtime.MemberRenamerDelegate)">
            <summary>
            Imports the specified object.
            </summary>
            <param name="script">The script object to import into</param>
            <param name="obj">The object.</param>
            <param name="flags">The import flags.</param>
            <param name="filter">A filter applied on each member</param>
            <param name="renamer">The member renamer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Scriban.Runtime.ScriptObjectExtensions.Import(Scriban.Runtime.IScriptObject,System.String,System.Delegate)">
            <summary>
            Imports the delegate to the specified member.
            </summary>
            <param name="script">The script object to import into</param>
            <param name="member">The member.</param>
            <param name="function">The function delegate.</param>
            <exception cref="T:System.ArgumentNullException">if member or function are null</exception>
        </member>
        <member name="T:Scriban.Runtime.ScriptRange">
            <summary>
            A range of value, generated by 1..10 syntax.
            </summary>
        </member>
        <member name="T:Scriban.Runtime.StandardMemberRenamer">
            <summary>
            The standard rename make a camel/pascalcase name changed by `_` and lowercase. e.g `ThisIsAnExample` becomes `this_is_an_example`.
            </summary>
        </member>
        <member name="M:Scriban.Runtime.StandardMemberRenamer.Rename(System.Reflection.MemberInfo)">
            <summary>
            Renames a camel/pascalcase member to a lowercase and `_` name. e.g `ThisIsAnExample` becomes `this_is_an_example`.
            </summary>
            <param name="member">The member to rename</param>
            <returns>The member name renamed</returns>
        </member>
        <member name="M:Scriban.Runtime.StandardMemberRenamer.Rename(System.String)">
            <summary>
            Renames a camel/pascalcase method name to a lowercase and `_` name. e.g `ThisIsAnExample` becomes `this_is_an_example`.
            </summary>
            <param name="name">The method name to rename</param>
            <returns>The renamed method name</returns>
        </member>
        <member name="T:Scriban.Runtime.StringBuilderOutput">
            <summary>
            Output to a <see cref="T:System.Text.StringBuilder"/>
            </summary>
        </member>
        <member name="M:Scriban.Runtime.StringBuilderOutput.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Scriban.Runtime.StringBuilderOutput"/>
            </summary>
        </member>
        <member name="M:Scriban.Runtime.StringBuilderOutput.#ctor(System.Text.StringBuilder)">
            <summary>
            Initialize a new instance of <see cref="T:Scriban.Runtime.StringBuilderOutput"/>
            </summary>
            <param name="builder">An existing <see cref="T:System.Text.StringBuilder"/></param>
        </member>
        <member name="P:Scriban.Runtime.StringBuilderOutput.Builder">
            <summary>
            The underlying <see cref="T:System.Text.StringBuilder"/>
            </summary>
        </member>
        <member name="M:Scriban.Runtime.StringBuilderOutput.GetThreadInstance">
            <summary>
            Returns a thread local instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:Scriban.Runtime.TextWriterOutput">
            <summary>
            Output to a <see cref="T:System.IO.TextWriter"/>
            </summary>
        </member>
        <member name="M:Scriban.Runtime.TextWriterOutput.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Scriban.Runtime.TextWriterOutput"/> with a writer default to <see cref="T:System.IO.StringWriter"/>
            </summary>
        </member>
        <member name="M:Scriban.Runtime.TextWriterOutput.#ctor(System.IO.TextWriter)">
            <summary>
            Initialize a new instance of <see cref="T:Scriban.Runtime.TextWriterOutput"/> with the specified <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="writer">An existing <see cref="T:System.IO.TextWriter"/></param>
        </member>
        <member name="P:Scriban.Runtime.TextWriterOutput.Writer">
            <summary>
            The underlying <see cref="T:System.IO.TextWriter"/>
            </summary>
        </member>
        <member name="T:Scriban.Template">
            <summary>
            Basic entry point class to parse templates and render them. For more advanced scenario, you should use <see cref="T:Scriban.TemplateContext"/> directly.
            </summary>
            <summary>
            Basic entry point class to parse templates and render them. For more advanced scenario, you should use <see cref="T:Scriban.TemplateContext"/> directly.
            </summary>
        </member>
        <member name="M:Scriban.Template.EvaluateAndRenderAsync(Scriban.TemplateContext,System.Boolean)">
            <summary>
            Evaluates the template using the specified context. See remarks.
            </summary>
            <param name="context">The template context.</param>
            <param name="render"><c>true</c> to render the output to the <see cref="P:Scriban.TemplateContext.Output"/></param>
            <exception cref="T:System.ArgumentNullException">If context is null</exception>
            <exception cref="T:System.InvalidOperationException">If the template <see cref="P:Scriban.Template.HasErrors"/>. Check the <see cref="P:Scriban.Template.Messages"/> property for more details</exception>
        </member>
        <member name="M:Scriban.Template.EvaluateAsync(Scriban.TemplateContext)">
            <summary>
            Evaluates the template using the specified context. See remarks.
            </summary>
            <param name="context">The template context.</param>
            <exception cref="T:System.ArgumentNullException">If context is null</exception>
            <exception cref="T:System.InvalidOperationException">If the template <see cref="P:Scriban.Template.HasErrors"/>. Check the <see cref="P:Scriban.Template.Messages"/> property for more details</exception>
            <returns>Returns the result of the last statement</returns>
        </member>
        <member name="M:Scriban.Template.EvaluateAsync(System.String,Scriban.TemplateContext)">
            <summary>
            Parse and evaluates a code only expression (without enclosing `{{` and `}}`) within the specified context.
            </summary>
            <param name="expression">A code only expression (without enclosing `{{` and `}}`)</param>
            <param name="context">The template context</param>
            <returns>The result of the evaluation of the expression</returns>
        </member>
        <member name="M:Scriban.Template.EvaluateAsync(System.Object,Scriban.Runtime.MemberRenamerDelegate,Scriban.Runtime.MemberFilterDelegate)">
            <summary>
            Evaluates the template using the specified context
            </summary>
            <param name="model">An object model to use with the evaluation.</param>
            <param name="memberRenamer">The member renamer used to import this .NET object and transitive objects. See member renamer documentation for more details.</param>
            <param name="memberFilter">The member filter used to filter members for .NET objects being accessed through the template, including the model being passed to this method.</param>
            <exception cref="T:System.InvalidOperationException">If the template <see cref="P:Scriban.Template.HasErrors"/>. Check the <see cref="P:Scriban.Template.Messages"/> property for more details</exception>
            <returns>Returns the result of the last statement</returns>
        </member>
        <member name="M:Scriban.Template.EvaluateAsync(System.String,System.Object,Scriban.Runtime.MemberRenamerDelegate,Scriban.Runtime.MemberFilterDelegate)">
            <summary>
            Parse and evaluates a code only expression (without enclosing `{{` and `}}`) within the specified context.
            </summary>
            <param name="expression">A code only expression (without enclosing `{{` and `}}`)</param>
            <param name="model">An object instance used as a model for evaluating this expression</param>
            <param name="memberRenamer">The member renamer used to import this .NET object and transitive objects. See member renamer documentation for more details.</param>
            <param name="memberFilter">The member filter used to filter members for .NET objects being accessed through the template, including the model being passed to this method.</param>
            <returns>The result of the evaluation of the expression</returns>
        </member>
        <member name="M:Scriban.Template.RenderAsync(Scriban.TemplateContext)">
            <summary>
            Renders this template using the specified context. See remarks.
            </summary>
            <param name="context">The template context.</param>
            <exception cref="T:System.ArgumentNullException">If context is null</exception>
            <exception cref="T:System.InvalidOperationException">If the template <see cref="P:Scriban.Template.HasErrors"/>. Check the <see cref="P:Scriban.Template.Messages"/> property for more details</exception>
            <remarks>
            When using this method, the result of rendering this page is output to <see cref="P:Scriban.TemplateContext.Output"/>
            </remarks>
        </member>
        <member name="M:Scriban.Template.RenderAsync(System.Object,Scriban.Runtime.MemberRenamerDelegate,Scriban.Runtime.MemberFilterDelegate)">
            <summary>
            Renders this template using the specified object model.
            </summary>
            <param name="model">The object model.</param>
            <param name="memberRenamer">The member renamer used to import this .NET object and transitive objects. See member renamer documentation for more details.</param>
            <param name="memberFilter">The member filter used to filter members for .NET objects being accessed through the template, including the model being passed to this method.</param>
            <returns>A rendering result as a string </returns>
        </member>
        <member name="P:Scriban.Template.SourceFilePath">
            <summary>
            Gets the source file path.
            </summary>
        </member>
        <member name="P:Scriban.Template.Page">
            <summary>
            Gets the resulting compiled <see cref="T:Scriban.Syntax.ScriptPage"/>. May be null if this template <see cref="P:Scriban.Template.HasErrors"/>
            </summary>
        </member>
        <member name="P:Scriban.Template.HasErrors">
            <summary>
            Gets a value indicating whether this template has errors. Error messages are in <see cref="P:Scriban.Template.Messages"/>.
            </summary>
        </member>
        <member name="P:Scriban.Template.Messages">
            <summary>
            Gets the lexer and parsing messages.
            </summary>
        </member>
        <member name="P:Scriban.Template.ParserOptions">
            <summary>
            The parser options used by this Template
            </summary>
        </member>
        <member name="P:Scriban.Template.LexerOptions">
            <summary>
            The lexer options used by this template
            </summary>
        </member>
        <member name="M:Scriban.Template.Parse(System.String,System.String,System.Nullable{Scriban.Parsing.ParserOptions},System.Nullable{Scriban.Parsing.LexerOptions})">
            <summary>
            Parses the specified scripting text into a <see cref="T:Scriban.Template"/> .
            </summary>
            <param name="text">The scripting text.</param>
            <param name="sourceFilePath">The source file path. Optional, used for better error reporting if the source file has a location on the disk</param>
            <param name="parserOptions">The templating parsing parserOptions.</param>
            <param name="lexerOptions">The options passed to the lexer</param>
            <returns>A template</returns>
        </member>
        <member name="M:Scriban.Template.ParseLiquid(System.String,System.String,System.Nullable{Scriban.Parsing.ParserOptions},System.Nullable{Scriban.Parsing.LexerOptions})">
            <summary>
            Parses the specified Liquid script text into a <see cref="T:Scriban.Template"/> .
            </summary>
            <param name="text">The liquid scripting text.</param>
            <param name="sourceFilePath">The source file path. Optional, used for better error reporting if the source file has a location on the disk</param>
            <param name="parserOptions">The templating parsing parserOptions.</param>
            <param name="lexerOptions">The options passed to the lexer</param>
            <returns>A template</returns>
        </member>
        <member name="M:Scriban.Template.Evaluate(System.String,Scriban.TemplateContext)">
            <summary>
            Parse and evaluates a code only expression (without enclosing `{{` and `}}`) within the specified context.
            </summary>
            <param name="expression">A code only expression (without enclosing `{{` and `}}`)</param>
            <param name="context">The template context</param>
            <returns>The result of the evaluation of the expression</returns>
        </member>
        <member name="M:Scriban.Template.Evaluate(System.String,System.Object,Scriban.Runtime.MemberRenamerDelegate,Scriban.Runtime.MemberFilterDelegate)">
            <summary>
            Parse and evaluates a code only expression (without enclosing `{{` and `}}`) within the specified context.
            </summary>
            <param name="expression">A code only expression (without enclosing `{{` and `}}`)</param>
            <param name="model">An object instance used as a model for evaluating this expression</param>
            <param name="memberRenamer">The member renamer used to import this .NET object and transitive objects. See member renamer documentation for more details.</param>
            <param name="memberFilter">The member filter used to filter members for .NET objects being accessed through the template, including the model being passed to this method.</param>
            <returns>The result of the evaluation of the expression</returns>
        </member>
        <member name="M:Scriban.Template.Evaluate(Scriban.TemplateContext)">
            <summary>
            Evaluates the template using the specified context. See remarks.
            </summary>
            <param name="context">The template context.</param>
            <exception cref="T:System.ArgumentNullException">If context is null</exception>
            <exception cref="T:System.InvalidOperationException">If the template <see cref="P:Scriban.Template.HasErrors"/>. Check the <see cref="P:Scriban.Template.Messages"/> property for more details</exception>
            <returns>Returns the result of the last statement</returns>
        </member>
        <member name="M:Scriban.Template.Evaluate(System.Object,Scriban.Runtime.MemberRenamerDelegate,Scriban.Runtime.MemberFilterDelegate)">
            <summary>
            Evaluates the template using the specified context
            </summary>
            <param name="model">An object model to use with the evaluation.</param>
            <param name="memberRenamer">The member renamer used to import this .NET object and transitive objects. See member renamer documentation for more details.</param>
            <param name="memberFilter">The member filter used to filter members for .NET objects being accessed through the template, including the model being passed to this method.</param>
            <exception cref="T:System.InvalidOperationException">If the template <see cref="P:Scriban.Template.HasErrors"/>. Check the <see cref="P:Scriban.Template.Messages"/> property for more details</exception>
            <returns>Returns the result of the last statement</returns>
        </member>
        <member name="M:Scriban.Template.Render(Scriban.TemplateContext)">
            <summary>
            Renders this template using the specified context. See remarks.
            </summary>
            <param name="context">The template context.</param>
            <exception cref="T:System.ArgumentNullException">If context is null</exception>
            <exception cref="T:System.InvalidOperationException">If the template <see cref="P:Scriban.Template.HasErrors"/>. Check the <see cref="P:Scriban.Template.Messages"/> property for more details</exception>
            <remarks>
            When using this method, the result of rendering this page is output to <see cref="P:Scriban.TemplateContext.Output"/>
            </remarks>
        </member>
        <member name="M:Scriban.Template.Render(System.Object,Scriban.Runtime.MemberRenamerDelegate,Scriban.Runtime.MemberFilterDelegate)">
            <summary>
            Renders this template using the specified object model.
            </summary>
            <param name="model">The object model.</param>
            <param name="memberRenamer">The member renamer used to import this .NET object and transitive objects. See member renamer documentation for more details.</param>
            <param name="memberFilter">The member filter used to filter members for .NET objects being accessed through the template, including the model being passed to this method.</param>
            <returns>A rendering result as a string </returns>
        </member>
        <member name="M:Scriban.Template.ToText(Scriban.ScriptPrinterOptions)">
            <summary>
            Converts back this template to a textual representation. This is the inverse of <see cref="M:Scriban.Template.Parse(System.String,System.String,System.Nullable{Scriban.Parsing.ParserOptions},System.Nullable{Scriban.Parsing.LexerOptions})"/>.
            </summary>
            <param name="options">The rendering options</param>
            <returns>The template converted back to a textual representation of the template</returns>
        </member>
        <member name="M:Scriban.Template.EvaluateAndRender(Scriban.TemplateContext,System.Boolean)">
            <summary>
            Evaluates the template using the specified context. See remarks.
            </summary>
            <param name="context">The template context.</param>
            <param name="render"><c>true</c> to render the output to the <see cref="P:Scriban.TemplateContext.Output"/></param>
            <exception cref="T:System.ArgumentNullException">If context is null</exception>
            <exception cref="T:System.InvalidOperationException">If the template <see cref="P:Scriban.Template.HasErrors"/>. Check the <see cref="P:Scriban.Template.Messages"/> property for more details</exception>
        </member>
        <member name="T:Scriban.TemplateContext">
            <summary>
            The template context contains the state of the page, the model.
            </summary>
            <summary>
            The template context contains the state of the page, the model.
            </summary>
        </member>
        <member name="M:Scriban.TemplateContext.EvaluateAsync(Scriban.Syntax.ScriptNode,System.Boolean)">
            <summary>
            Evaluates the specified script node.
            </summary>
            <param name="scriptNode">The script node.</param>
            <param name="aliasReturnedFunction">if set to <c>true</c> and a function would be evaluated as part of this node, return the object function without evaluating it.</param>
            <returns>The result of the evaluation.</returns>
        </member>
        <member name="M:Scriban.TemplateContext.EvaluateAsync(Scriban.Syntax.ScriptNode)">
            <summary>
            Evaluates the specified script node.
            </summary>
            <param name="scriptNode">The script node.</param>
            <returns>The result of the evaluation.</returns>
        </member>
        <member name="M:Scriban.TemplateContext.GetOrSetValueAsync(Scriban.Syntax.ScriptExpression,System.Object,System.Boolean)">
            <summary>
            Evaluates the specified expression
            </summary>
            <param name="targetExpression">The expression to evaluate</param>
            <param name="valueToSet">A value to set in case of a setter</param>
            <param name="setter">true if this a setter</param>
            <returns>The value of the targetExpression</returns>
        </member>
        <member name="M:Scriban.TemplateContext.GetValueAsync(Scriban.Syntax.ScriptExpression)">
            <summary>
            Gets the value from the specified expression using the current <see cref="T:Scriban.Runtime.ScriptObject"/> bound to the model context.
            </summary>
            <param name="target">The expression</param>
            <returns>The value of the expression</returns>
        </member>
        <member name="M:Scriban.TemplateContext.SetValueAsync(Scriban.Syntax.ScriptExpression,System.Object)">
            <summary>
            Sets the target expression with the specified value.
            </summary>
            <param name="target">The target expression.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">If target is null</exception>
        </member>
        <member name="M:Scriban.TemplateContext.WriteAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Writes the text to the current <see cref="P:Scriban.TemplateContext.Output"/>
            </summary>
            <param name="text">The text.</param>
            <param name="startIndex">The zero-based position of the substring of text</param>
            <param name="count">The number of characters to output starting at <paramref name="startIndex"/> position from the text</param>
        </member>
        <member name="M:Scriban.TemplateContext.WriteAsync(System.String)">
            <summary>
            Writes the text to the current <see cref="P:Scriban.TemplateContext.Output"/>
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Scriban.TemplateContext.WriteAsync(Scriban.Syntax.ScriptStringSlice)">
            <summary>
            Writes the text to the current <see cref="P:Scriban.TemplateContext.Output"/>
            </summary>
            <param name="slice">The text.</param>
        </member>
        <member name="M:Scriban.TemplateContext.WriteAsync(Scriban.Parsing.SourceSpan,System.Object)">
            <summary>
            Writes an object value to the current <see cref="P:Scriban.TemplateContext.Output"/>.
            </summary>
            <param name="span">The span of the object to render.</param>
            <param name="textAsObject">The text as object.</param>
        </member>
        <member name="M:Scriban.TemplateContext.WriteLineAsync">
            <summary>
            Writes the a new line to the current <see cref="P:Scriban.TemplateContext.Output"/>
            </summary>
        </member>
        <member name="T:Scriban.TemplateContext.TryGetMemberDelegate">
            <summary>
            A delegate used to late binding <see cref="P:Scriban.TemplateContext.TryGetMember"/>
            </summary>
            <param name="context">The template context</param>
            <param name="span">The current sourcespan</param>
            <param name="target">The target.</param>
            <param name="member">The member.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the member on the target , <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Scriban.TemplateContext.TryGetVariableDelegate">
            <summary>
            A delegate used to late binding <see cref="P:Scriban.TemplateContext.TryGetVariable"/>
            </summary>
            <param name="context">The template context</param>
            <param name="span">The current sourcespan</param>
            <param name="variable">The the variable to look for.</param>
            <param name="value">The value if the result is true.</param>
            <returns><c>true</c> if the variable was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Scriban.TemplateContext.RenderRuntimeExceptionDelegate">
            <summary>
            A delegate used to format <see cref="T:Scriban.Syntax.ScriptRuntimeException"/>s while rendering the template.
            The result from the delegate call will be rendered into the output.
            </summary>
            <param name="exception">The exception which occoured while rendering the template.</param>
            <returns>The string which will be written to the output at the position where the exception occoured.</returns>
        </member>
        <member name="F:Scriban.TemplateContext.RenderRuntimeExceptionDefault">
            <summary>
            This <see cref="T:Scriban.TemplateContext.RenderRuntimeExceptionDelegate"/> implementation provides a default template for rendering <see cref="T:Scriban.Syntax.ScriptRuntimeException"/>s.
            Assign it to the <see cref="P:Scriban.TemplateContext.RenderRuntimeException"/> property to get exceptions formatted as [exception message] in the output.
            </summary>
        </member>
        <member name="M:Scriban.TemplateContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.TemplateContext" /> class.
            </summary>
        </member>
        <member name="M:Scriban.TemplateContext.#ctor(Scriban.Runtime.ScriptObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.TemplateContext" /> class.
            </summary>
            <param name="builtin">The builtin object used to expose builtin functions, default is <see cref="M:Scriban.TemplateContext.GetDefaultBuiltinObject"/>.</param>
        </member>
        <member name="M:Scriban.TemplateContext.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.TemplateContext" /> class.
            </summary>
            <param name="keyComparer">Comparer to use when looking up members</param>
        </member>
        <member name="M:Scriban.TemplateContext.#ctor(Scriban.Runtime.ScriptObject,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.TemplateContext" /> class.
            </summary>
            <param name="builtin">The builtin object used to expose builtin functions, default is <see cref="M:Scriban.TemplateContext.GetDefaultBuiltinObject"/>.</param>
            <param name="keyComparer">Comparer to use when looking up members</param>
        </member>
        <member name="P:Scriban.TemplateContext.CurrentCulture">
            <summary>
            Gets the current culture set. Default is <c>CultureInfo.InvariantCulture</c>. Can be modified via <see cref="M:Scriban.TemplateContext.PushCulture(System.Globalization.CultureInfo)"/>, and <see cref="M:Scriban.TemplateContext.PopCulture"/>.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.TemplateLoader">
            <summary>
            Gets or sets the <see cref="T:Scriban.Runtime.ITemplateLoader"/> used by the include directive. Must be set in order for the include directive to work.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.IsLiquid">
            <summary>
            Gets a boolean if the context is being used  with liquid
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.AutoIndent">
            <summary>
            If sets to <c>true</c>, the include statement will maintain the indent.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.IndentWithInclude">
            <summary>
            If sets to <c>true</c>, the include statement will maintain the indent.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.LimitToString">
            <summary>
            Gets or sets the buffer limit in characters for a ToString in a list/string. Default is 0, no limit.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.ObjectRecursionLimit">
            <summary>
            Gets or sets the maximum recursion depth while traversing an object graph during the ToString operation.  Default is 0, no limit
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.NewLine">
            <summary>
            String used for new-line.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.Language">
            <summary>
            Gets or sets the default scripting language - used for example by <see cref="M:Scriban.Functions.ObjectFunctions.Eval(Scriban.TemplateContext,Scriban.Parsing.SourceSpan,System.Object)"/>.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.CancellationToken">
            <summary>
            Gets or sets the cancellation token used for async evaluation
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.TemplateLoaderParserOptions">
            <summary>
            The <see cref="T:Scriban.Parsing.ParserOptions"/> used by the <see cref="P:Scriban.TemplateContext.TemplateLoader"/> via the include directive.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.TemplateLoaderLexerOptions">
            <summary>
            The <see cref="T:Scriban.Parsing.LexerOptions"/> used by the <see cref="P:Scriban.TemplateContext.TemplateLoader"/> via the include directive.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.MemberRenamer">
            <summary>
            A global settings used to rename property names of exposed .NET objects.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.MemberFilter">
            <summary>
            A global settings used to filter field/property names of exposed .NET objects.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.LoopLimit">
            <summary>
            A loop limit that can be used at runtime to limit the number of loops. Default is 1000.
            Set to 0 to disable checking loop limit.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.LoopLimitQueryable">
            <summary>
            A loop limit that can be used at runtime to limit the number of loops over a IQueryable object. Defaults to LoopLimit property.
            Set to 0 to disable checking IQueryable loop limit.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.RecursiveLimit">
            <summary>
            A function recursive limit count used at runtime to limit the number of recursive calls. Default is 100
            Set to 0 to disable checking recursive call limit.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.EnableOutput">
            <summary>
            Gets or sets a boolean indicating whether to enable text output via <see cref="P:Scriban.TemplateContext.Output"/>.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.Output">
            <summary>
            Gets the current output of the template being rendered (via <see cref="M:Scriban.Template.Render(Scriban.TemplateContext)"/>)/>.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.UseScientific">
            <summary>
            Gets or sets a boolean indicating if the runtime is running in scientific mode.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.ErrorForStatementFunctionAsExpression">
            <summary>
            Generates an explicit error for function without a return value that are used in an expression.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.BuiltinObject">
            <summary>
            Gets the builtin objects (that can be setup via the constructor). Default is retrieved via <see cref="M:Scriban.TemplateContext.GetDefaultBuiltinObject"/>.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.CurrentGlobal">
            <summary>
            Gets the current global <see cref="T:Scriban.Runtime.ScriptObject"/>.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.CachedTemplates">
            <summary>
            Gets the cached templates, used by the include function.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.CurrentSourceFile">
            <summary>
            Gets the current source file.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.TryGetVariable">
            <summary>
            Gets or sets a callback function that is called when a variable is being resolved and was not found from any scopes.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.RenderRuntimeException">
            <summary>
            Gets ot sets a callback function which formats a <see cref="T:Scriban.Syntax.ScriptRuntimeException"/> to a string.
            The result from the delegate call will be rendered into the output where the exception occoured.
            You can assign <see cref="F:Scriban.TemplateContext.RenderRuntimeExceptionDefault"/> to this property to easy get default exception rendering behavior.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.TryGetMember">
            <summary>
            Gets or sets the fallback accessor when accessing a member of an object and the member was not found, this accessor will be called.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.Tags">
            <summary>
            Allows to store data within this context.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.CurrentPipeArguments">
            <summary>
            Store the current stack of pipe arguments used by <see cref="T:Scriban.Syntax.ScriptPipeCall"/> and <see cref="T:Scriban.Syntax.ScriptFunctionCall"/>
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.GlobalCount">
            <summary>
            Gets the number of <see cref="M:Scriban.TemplateContext.PushGlobal(Scriban.Runtime.IScriptObject)"/> that are pushed to this context.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.OutputCount">
            <summary>
            Gets the number of <see cref="M:Scriban.TemplateContext.PushOutput"/> that are pushed to this context.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.CultureCount">
            <summary>
            Gets the number of <see cref="M:Scriban.TemplateContext.PushCulture(System.Globalization.CultureInfo)"/> that are pushed to this context.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.SourceFileCount">
            <summary>
            Gets the number of <see cref="M:Scriban.TemplateContext.PushSourceFile(System.String)"/> that are pushed to this context.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.FlowState">
            <summary>
            Gets or sets the internal state of control flow.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.RegexTimeOut">
            <summary>
            Timeout used for any regexp that might be used by a builtin function. Default is 10s.
            Set to <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> to disable regexp timeouts
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.StrictVariables">
            <summary>
            Gets or sets a boolean indicating if the template should throw an exception if it doesn't find a variable. Default is <c>false</c>
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.EnableBreakAndContinueAsReturnOutsideLoop">
            <summary>
            Enables break and continue to act as a return outside of a loop, used by liquid templates. Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.EnableRelaxedTargetAccess">
            <summary>
            Enables the (e.g x) target of a member access (e.g x.y) to be null by returning null instead of an exception. Default is <c>false</c>
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.EnableRelaxedMemberAccess">
            <summary>
            Enables a (e.g x.y) member/indexer access that does not exist to return null instead of an exception. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.EnableRelaxedFunctionAccess">
            <summary>
            Enables a function call access that does not exist to return null instead of an exception. Default is <c>false</c>
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.EnableRelaxedIndexerAccess">
            <summary>
            Enables an indexer access to go out of bounds. Default is <c>true</c>
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.EnableNullIndexer">
            <summary>
            Enables the index of an indexer access to be null and return null instead of an exception. Default is <c>false</c>
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.CurrentNode">
            <summary>
            Gets the current node being evaluated.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.CurrentIndent">
            <summary>
            Returns the current indent used for prefixing output lines.
            </summary>
        </member>
        <member name="P:Scriban.TemplateContext.IsInLoop">
            <summary>
            Indicates if we are in a loop
            </summary>
            <value>
              <c>true</c> if [in loop]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Scriban.TemplateContext.CheckAbort">
            <summary>
            Throws a <see cref="T:Scriban.Syntax.ScriptAbortException"/> is a cancellation was issued on the <see cref="P:Scriban.TemplateContext.CancellationToken"/>.
            </summary>
        </member>
        <member name="M:Scriban.TemplateContext.PushCulture(System.Globalization.CultureInfo)">
            <summary>
            Push a new <see cref="T:System.Globalization.CultureInfo"/> to be used when rendering/parsing numbers.
            </summary>
            <param name="culture">The new culture to use when rendering/parsing numbers</param>
        </member>
        <member name="M:Scriban.TemplateContext.PopCulture">
            <summary>
            Pops the current culture used on the stack.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Scriban.TemplateContext.PushSourceFile(System.String)">
            <summary>
            Pushes the source file path being executed. This should have enough information so that template loading/include can work correctly.
            </summary>
            <param name="sourceFile">The source file.</param>
        </member>
        <member name="M:Scriban.TemplateContext.PopSourceFile">
            <summary>
            Pops the source file being executed.
            </summary>
            <returns>The source file that was executed</returns>
            <exception cref="T:System.InvalidOperationException">Cannot PopSourceFile more than PushSourceFile</exception>
        </member>
        <member name="M:Scriban.TemplateContext.GetValue(Scriban.Syntax.ScriptExpression)">
            <summary>
            Gets the value from the specified expression using the current <see cref="T:Scriban.Runtime.ScriptObject"/> bound to the model context.
            </summary>
            <param name="target">The expression</param>
            <returns>The value of the expression</returns>
        </member>
        <member name="M:Scriban.TemplateContext.SetValue(Scriban.Syntax.ScriptExpression,System.Object)">
            <summary>
            Sets the target expression with the specified value.
            </summary>
            <param name="target">The target expression.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">If target is null</exception>
        </member>
        <member name="M:Scriban.TemplateContext.PushOutput">
            <summary>
            Pushes a new output used for rendering the current template while keeping the previous output.
            </summary>
        </member>
        <member name="M:Scriban.TemplateContext.PushOutput(Scriban.Runtime.IScriptOutput)">
            <summary>
            Pushes a new output used for rendering the current template while keeping the previous output.
            </summary>
        </member>
        <member name="M:Scriban.TemplateContext.PopOutput">
            <summary>
            Pops a previous output.
            </summary>
        </member>
        <member name="M:Scriban.TemplateContext.Write(Scriban.Parsing.SourceSpan,System.Object)">
            <summary>
            Writes an object value to the current <see cref="P:Scriban.TemplateContext.Output"/>.
            </summary>
            <param name="span">The span of the object to render.</param>
            <param name="textAsObject">The text as object.</param>
        </member>
        <member name="M:Scriban.TemplateContext.Write(System.String)">
            <summary>
            Writes the text to the current <see cref="P:Scriban.TemplateContext.Output"/>
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Scriban.TemplateContext.WriteLine">
            <summary>
            Writes the a new line to the current <see cref="P:Scriban.TemplateContext.Output"/>
            </summary>
        </member>
        <member name="M:Scriban.TemplateContext.Write(Scriban.Syntax.ScriptStringSlice)">
            <summary>
            Writes the text to the current <see cref="P:Scriban.TemplateContext.Output"/>
            </summary>
            <param name="slice">The text.</param>
        </member>
        <member name="M:Scriban.TemplateContext.Write(System.String,System.Int32,System.Int32)">
            <summary>
            Writes the text to the current <see cref="P:Scriban.TemplateContext.Output"/>
            </summary>
            <param name="text">The text.</param>
            <param name="startIndex">The zero-based position of the substring of text</param>
            <param name="count">The number of characters to output starting at <paramref name="startIndex"/> position from the text</param>
        </member>
        <member name="M:Scriban.TemplateContext.Evaluate(Scriban.Syntax.ScriptNode)">
            <summary>
            Evaluates the specified script node.
            </summary>
            <param name="scriptNode">The script node.</param>
            <returns>The result of the evaluation.</returns>
        </member>
        <member name="M:Scriban.TemplateContext.Evaluate(Scriban.Syntax.ScriptNode,System.Boolean)">
            <summary>
            Evaluates the specified script node.
            </summary>
            <param name="scriptNode">The script node.</param>
            <param name="aliasReturnedFunction">if set to <c>true</c> and a function would be evaluated as part of this node, return the object function without evaluating it.</param>
            <returns>The result of the evaluation.</returns>
        </member>
        <member name="M:Scriban.TemplateContext.GetMemberAccessor(System.Object)">
            <summary>
            Gets the member accessor for the specified object.
            </summary>
            <param name="target">The target object to get a member accessor.</param>
            <returns>A member accessor</returns>
        </member>
        <member name="M:Scriban.TemplateContext.Reset">
            <summary>
            This method is reset-ing correctly this instance so that
            it can be reused safely on the same thread for another run.
            </summary>
            <remarks>
            - Removes any pending output expect the top level one.
            - This methods clears the top level output (which is a guaranteed to be <see cref="T:Scriban.Runtime.StringBuilderOutput"/>).
            - Remove all global stored pushed via <see cref="M:Scriban.TemplateContext.PushGlobal(Scriban.Runtime.IScriptObject)"/> expect the builtin top level one.
            - Remove all cultures pushed via <see cref="M:Scriban.TemplateContext.PushCulture(System.Globalization.CultureInfo)"/>.
            - Remove all source files pushed via <see cref="M:Scriban.TemplateContext.PushSourceFile(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Scriban.TemplateContext.GetMemberAccessorImpl(System.Object)">
            <summary>
            Gets the member accessor for the specified object if not already cached. This method can have an override.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Scriban.TemplateContext.GetDefaultBuiltinObject">
            <summary>
            Gets a <see cref="T:Scriban.Runtime.ScriptObject"/> with all default builtins registered.
            </summary>
            <returns>A <see cref="T:Scriban.Runtime.ScriptObject"/> with all default builtins registered</returns>
        </member>
        <member name="M:Scriban.TemplateContext.EnterFunction(Scriban.Syntax.ScriptNode)">
            <summary>
            Called when entering a function.
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:Scriban.TemplateContext.ExitFunction(Scriban.Syntax.ScriptNode)">
            <summary>
            Called when exiting a function.
            </summary>
        </member>
        <member name="M:Scriban.TemplateContext.EnterLoop(Scriban.Syntax.ScriptLoopStatementBase)">
            <summary>
            Notifies this context when entering a loop.
            </summary>
            <param name="loop"></param>
        </member>
        <member name="M:Scriban.TemplateContext.OnEnterLoop(Scriban.Syntax.ScriptLoopStatementBase)">
            <summary>
            Called when entering a loop.
            </summary>
            <param name="loop">The loop expression object</param>
        </member>
        <member name="M:Scriban.TemplateContext.ExitLoop(Scriban.Syntax.ScriptLoopStatementBase)">
            <summary>
            Notifies this context when exiting a loop.
            </summary>
        </member>
        <member name="M:Scriban.TemplateContext.OnExitLoop(Scriban.Syntax.ScriptLoopStatementBase)">
            <summary>
            Called when exiting a loop.
            </summary>
            <param name="loop">The loop expression object</param>
        </member>
        <member name="M:Scriban.TemplateContext.OnStepLoop(Scriban.Syntax.ScriptLoopStatementBase)">
            <summary>
            Called when stepping into a loop.
            </summary>
            <param name="loop">The loop expression object</param>
            <returns><c>true</c> to continue loop; <c>false</c> to break the loop. Default is <c>true</c></returns>
        </member>
        <member name="M:Scriban.TemplateContext.GetOrSetValue(Scriban.Syntax.ScriptExpression,System.Object,System.Boolean)">
            <summary>
            Evaluates the specified expression
            </summary>
            <param name="targetExpression">The expression to evaluate</param>
            <param name="valueToSet">A value to set in case of a setter</param>
            <param name="setter">true if this a setter</param>
            <returns>The value of the targetExpression</returns>
        </member>
        <member name="M:Scriban.TemplateContext.GetListAccessor(System.Object)">
            <summary>
            Gets the list accessor or a previous cached one.
            </summary>
            <param name="target">The expected object to be a list</param>
            <returns>A list accessor for the specified type of target</returns>
        </member>
        <member name="M:Scriban.TemplateContext.GetListAccessorImpl(System.Object,System.Type)">
            <summary>
            Gets the list accessor for the specified target and type, if it hasn't been found yet.
            </summary>
            <param name="target">The expected object to be a list</param>
            <param name="type">Type of the target object</param>
            <returns>A list accessor for the specified type of target</returns>
        </member>
        <member name="M:Scriban.TemplateContext.IsEmpty(Scriban.Parsing.SourceSpan,System.Object)">
            <summary>
            Returns a boolean indicating whether the against object is empty (array/list count = 0, null, or no members for a dictionary/script object)
            </summary>
            <param name="span"></param>
            <param name="against"></param>
            <returns></returns>
        </member>
        <member name="M:Scriban.TemplateContext.ObjectToString(System.Object,System.Boolean)">
            <summary>
            Called whenever an objects is converted to a string. This method can be overriden.
            </summary>
            <param name="value">The object value to print</param>
            <param name="nested">True if value is a string, the string should be escaped</param>
            <returns>A string representing the object value</returns>
        </member>
        <member name="M:Scriban.TemplateContext.ToBool(Scriban.Parsing.SourceSpan,System.Object)">
            <summary>
            Called when evaluating a value to a boolean. Can be overriden for specific object scenarios.
            </summary>
            <param name="span">The span requiring this conversion</param>
            <param name="value">An object value</param>
            <returns>The boolean representation of the object</returns>
        </member>
        <member name="M:Scriban.TemplateContext.ToInt(Scriban.Parsing.SourceSpan,System.Object)">
            <summary>
            Called when evaluating a value to an integer. Can be overriden.
            </summary>
            <param name="span">The span requiring this conversion</param>
            <param name="value">The value of the object to convert</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:Scriban.TemplateContext.ToObject(Scriban.Parsing.SourceSpan,System.Object,System.Type)">
            <summary>
            Called when trying to convert an object to a destination type. Can be overriden.
            </summary>
            <param name="span">The span requiring this conversion</param>
            <param name="value">The value of the object to convert</param>
            <param name="destinationType">The destination type to try to convert to</param>
            <returns>The object value of possibly the destination type</returns>
        </member>
        <member name="M:Scriban.TemplateContext.PushGlobal(Scriban.Runtime.IScriptObject)">
            <summary>
            Pushes a new object context accessible to the template. This method creates also a new context for local variables.
            </summary>
            <param name="scriptObject">The script object.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Scriban.TemplateContext.PopGlobal">
            <summary>
            Pops the previous object context. This method pops also a local variable context.
            </summary>
            <returns>The previous object context</returns>
            <exception cref="T:System.InvalidOperationException">Unexpected PopGlobal() not matching a PushGlobal</exception>
        </member>
        <member name="M:Scriban.TemplateContext.SetValue(Scriban.Syntax.ScriptVariable,System.Object,System.Boolean)">
            <summary>
            Sets the variable with the specified value.
            </summary>
            <param name="variable">The variable.</param>
            <param name="value">The value.</param>
            <param name="asReadOnly">if set to <c>true</c> the variable set will be read-only.</param>
            <exception cref="T:System.ArgumentNullException">If variable is null</exception>
            <exception cref="T:Scriban.Syntax.ScriptRuntimeException">If an existing variable is already read-only</exception>
        </member>
        <member name="M:Scriban.TemplateContext.SetValue(Scriban.Syntax.ScriptVariable,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Sets the variable with the specified value.
            </summary>
            <param name="variable">The variable.</param>
            <param name="value">The value.</param>
            <param name="asReadOnly">if set to <c>true</c> the variable set will be read-only.</param>
            <param name="force">force setting the value even if it is already readonly</param>
            <exception cref="T:System.ArgumentNullException">If variable is null</exception>
            <exception cref="T:Scriban.Syntax.ScriptRuntimeException">If an existing variable is already read-only</exception>
        </member>
        <member name="M:Scriban.TemplateContext.DeleteValue(Scriban.Syntax.ScriptVariable)">
            <summary>
            Deletes the variable from the current store.
            </summary>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:Scriban.TemplateContext.SetReadOnly(Scriban.Syntax.ScriptVariable,System.Boolean)">
            <summary>
            Sets the variable to read only.
            </summary>
            <param name="variable">The variable.</param>
            <param name="isReadOnly">if set to <c>true</c> the variable will be set to readonly.</param>
            <exception cref="T:System.ArgumentNullException">If variable is null</exception>
            <remarks>
            This will not throw an exception if a previous variable was readonly.
            </remarks>
        </member>
        <member name="M:Scriban.TemplateContext.SetLoopVariable(Scriban.Syntax.ScriptVariable,System.Object)">
            <summary>
            Sets the loop variable with the specified value.
            </summary>
            <param name="variable">The loop variable to set.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">If target is null</exception>
        </member>
        <member name="M:Scriban.TemplateContext.GetValue(Scriban.Syntax.ScriptVariable)">
            <summary>
            Gets the value for the specified variable from the current object context/scope.
            </summary>
            <param name="variable">The variable to retrieve the value</param>
            <returns>Value of the variable</returns>
        </member>
        <member name="M:Scriban.TemplateContext.GetValue(Scriban.Syntax.ScriptVariableGlobal)">
            <summary>
            Gets the value for the specified global variable from the current object context/scope.
            </summary>
            <param name="variable">The variable to retrieve the value</param>
            <returns>Value of the variable</returns>
        </member>
        <member name="M:Scriban.TemplateContext.GetStoreForRead(Scriban.Syntax.ScriptVariable)">
            <summary>
            Returns the list of <see cref="T:Scriban.Runtime.ScriptObject"/> depending on the scope of the variable.
            </summary>
            <param name="variable"></param>
            <exception cref="T:System.NotImplementedException"></exception>
            <returns>The list of script objects valid for the specified variable scope</returns>
        </member>
        <member name="M:Scriban.TemplateContext.PushVariableScope(Scriban.TemplateContext.VariableScope)">
            <summary>
            Push a new <see cref="T:Scriban.Syntax.ScriptVariableScope"/> for variables
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:Scriban.TemplateContext.PopVariableScope(Scriban.TemplateContext.VariableScope)">
            <summary>
            Pops a previous <see cref="T:Scriban.Syntax.ScriptVariableScope"/>.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="T:Scriban.Syntax.ScientificFunctionCallRewriter">
            <summary>
            Used to rewrite a function call expression at evaluation time based
            on the arguments required by a function. Used by scientific mode scripting.
            </summary>
            <summary>
            Used to rewrite a function call expression at evaluation time based
            on the arguments required by a function. Used by scientific mode scripting.
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScientificFunctionCallRewriter.ImplicitFunctionCallPrecedence">
            <summary>
            The precedence of an implicit function call is between Add (+) and Multiply (*) operator
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScientificFunctionCallRewriter.BinaryExpressionIterator">
            <summary>
            Stores a list of binary expressions to rewrite.
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScientificFunctionCallRewriter.BinaryExpressionOrOperator">
            <summary>
            A binary expression part to rewrite. It is either:
            - An "terminal" expression
            - An operator (`*`, `+`...)
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptBinaryExpression.MaxBigInteger">
            <summary>
            Use this value as a maximum integer
            </summary>
        </member>
        <member name="P:Scriban.Syntax.ScriptCaseStatement.Value">
            <summary>
            Get or sets the value used to check against When clause.
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptForStatement">
            <summary>
            A for in loop statement.
            </summary>
        </member>
        <member name="P:Scriban.Syntax.ScriptForStatement.SetContinue">
            <summary>
            <c>true</c> to set the global variable `continue` after the loop (used by liquid)
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptFunction.FindRetVisitor">
            <summary>
            Finds a <see cref="T:Scriban.Syntax.ScriptReturnStatement"/> in a tree.
            TODO: could be provided as a generic version
            </summary>
        </member>
        <member name="M:Scriban.Syntax.ScriptFunctionCall.CallAsync(Scriban.TemplateContext,Scriban.Syntax.ScriptNode,Scriban.Runtime.IScriptCustomFunction,Scriban.Runtime.ScriptArray)">
            <summary>
            Call a custom function with the already resolved parameters.
            </summary>
            <param name = "context"></param>
            <param name = "callerContext"></param>
            <param name = "function"></param>
            <param name = "arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Scriban.Syntax.ScriptFunctionCall.Call(Scriban.TemplateContext,Scriban.Syntax.ScriptNode,Scriban.Runtime.IScriptCustomFunction,Scriban.Runtime.ScriptArray)">
            <summary>
            Call a custom function with the already resolved parameters.
            </summary>
            <param name="context"></param>
            <param name="callerContext"></param>
            <param name="function"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="P:Scriban.Syntax.ScriptIfStatement.ElseKeyword">
            <summary>
            Only valid for `else if`
            </summary>
        </member>
        <member name="P:Scriban.Syntax.ScriptIfStatement.Condition">
            <summary>
            Get or sets the condition of this if statement.
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptLoopStatementBase">
            <summary>
            Base class for a loop statement
            </summary>
            <summary>
            Base class for a loop statement
            </summary>
        </member>
        <member name="M:Scriban.Syntax.ScriptLoopStatementBase.LoopItem(Scriban.TemplateContext,Scriban.Syntax.ScriptLoopStatementBase.LoopState)">
            <summary>
            Base implementation for a loop single iteration
            </summary>
            <param name="context">The context</param>
            <param name="state">The state of the loop</param>
            <returns></returns>
        </member>
        <member name="T:Scriban.Syntax.ScriptLoopStatementBase.LoopState">
            <summary>
            Store the loop state
            </summary>
        </member>
        <member name="M:Scriban.Syntax.ScriptPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Scriban.Syntax.ScriptPage"/> class.
            </summary>
        </member>
        <member name="P:Scriban.Syntax.ScriptPage.FrontMatter">
            <summary>
            Gets or sets the front matter. May be <c>null</c> if script is not parsed using  <see cref="F:Scriban.Parsing.ScriptMode.FrontMatterOnly"/> or <see cref="F:Scriban.Parsing.ScriptMode.FrontMatterAndContent"/>. See remarks.
            </summary>
            <remarks>
            Note that this code block is not executed when evaluating this page. It has to be evaluated separately (usually before evaluating the page).
            </remarks>
        </member>
        <member name="T:Scriban.Syntax.ScriptTableRowStatement">
            <summary>
            Statement handling the `tablerow`
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptTableRowStatement.TableRowLoopState">
            <summary>
            State for a tablerow
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptThisExpression">
            <summary>
            this expression returns the current <see cref="P:Scriban.TemplateContext.CurrentGlobal"/> script object.
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptVariable">
            <summary>
            A script variable
            </summary>
            <remarks>This class is immutable as all variable object are being shared across all templates</remarks>
        </member>
        <member name="M:Scriban.Syntax.ScriptVariable.Create(System.String,Scriban.Syntax.ScriptVariableScope)">
            <summary>
            Creates a <see cref="T:Scriban.Syntax.ScriptVariable"/> according to the specified name and <see cref="T:Scriban.Syntax.ScriptVariableScope"/>
            </summary>
            <param name="name">Name of the variable</param>
            <param name="scope">Scope of the variable</param>
            <returns>The script variable</returns>
        </member>
        <member name="P:Scriban.Syntax.ScriptVariable.Name">
            <summary>
            Gets or sets the name of the variable (without the $ sign for local variable)
            </summary>
        </member>
        <member name="P:Scriban.Syntax.ScriptVariable.Scope">
            <summary>
            Gets or sets a boolean indicating whether this variable is a local variable (starting with $ in the template ) or global.
            </summary>
        </member>
        <member name="P:Scriban.Syntax.ScriptWhenStatement.Values">
            <summary>
            Get or sets the value used to check against When clause.
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptArgumentBinary">
            <summary>
            A binary operation argument used with <see cref="T:Scriban.Syntax.ScriptFunctionCall"/>
            when parsing with scientific mode.
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptIdentifier">
            <summary>
            An identifier (which is not a <see cref="T:Scriban.Syntax.ScriptVariable"/>)
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptKeyword">
            <summary>
            A verbatim node (use for custom parsing).
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptNopStatement">
            <summary>
            Empty instruction for an empty code block
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptToken">
            <summary>
            A verbatim node (use for custom parsing).
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptRewriter">
            <summary>
            Base class for a script rewriter.
            </summary>
        </member>
        <member name="T:Scriban.Syntax.IScriptTerminal">
            <summary>
            Identifies a script terminal (token, identifier, variable, literal)
            </summary>
        </member>
        <member name="P:Scriban.Syntax.IScriptTerminal.Trivias">
            <summary>
            Trivias, can be null if <see cref="P:Scriban.Parsing.LexerOptions.KeepTrivia"/> is <c>false</c>
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptBinaryOperator.EmptyCoalescing">
            <summary>
            The empty coalescing operator ??
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptBinaryOperator.NotEmptyCoalescing">
            <summary>
            The not empty coalescing operator ?!
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptExpression">
            <summary>
            Base class for all expressions.
            </summary>
            <seealso cref="T:Scriban.Syntax.ScriptNode" />
        </member>
        <member name="T:Scriban.Syntax.IScriptCustomImplicitMultiplyPrecedence">
            <summary>
            Implicit multiplication 1/2x are interpreted by 1/(2*x), but if
            x implements this interface, it will be interpreted as 1/2 * x
            </summary>
        </member>
        <member name="T:Scriban.Syntax.IScriptNamedArgumentContainer">
            <summary>
            Interfaces used by statements/expressions that have special trailing parameters (for, tablerow, include...)
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptFormatterFlags.None">
            <summary>
            No flags defined.
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptFormatterFlags.ExplicitParenthesis">
            <summary>
            Use parenthesis to disambiguate and make more explicit expressions (e.g 1/5+2 => (1/5)+2)
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptFormatterFlags.AddSpaceBetweenOperators">
            <summary>
            Add a space between both sides of the operators (e.g 1+5 => 1 + 5)
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptFormatterFlags.RemoveExistingTrivias">
            <summary>
            Remove the existing trivias (comments, newlines, spaces...).
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptFormatterFlags.CompressSpaces">
            <summary>
            Compress consecutive spaces to 1 space. Remove leading and trailing spaces.
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptFormatterFlags.MinimizeParenthesisNesting">
            <summary>
            Minimize parenthesis nesting (e.g ((1*5) + 2) => (1*5) + 2)
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptFormatterFlags.Clean">
            <summary>
            Add spaces for binary, compress spaces and minimize parenthesis nesting.
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptFormatterFlags.ExplicitClean">
            <summary>
            Clean mode + add explicit parenthesis to disambiguate operators/function calls.
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptFormatterOptions">
            <summary>
            Options used by <see cref="T:Scriban.Syntax.ScriptFormatter"/>
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptFormatterOptions.Language">
            <summary>
            Gets or sets the input/output language to format (Only <see cref="F:Scriban.Parsing.ScriptLang.Default"/> and <see cref="F:Scriban.Parsing.ScriptLang.Scientific"/> are supported)
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptFormatterOptions.Flags">
            <summary>
            Flags used for formatting.
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptFormatterOptions.Context">
            <summary>
            Defines the context used for formatting scientific scripts.
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptList">
            <summary>
            Abstract list of <see cref="T:Scriban.Syntax.ScriptNode"/>
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptList`1">
            <summary>
            Abstract list of <see cref="T:Scriban.Syntax.ScriptNode"/>
            </summary>
            <typeparam name="TScriptNode">Type of the node</typeparam>
        </member>
        <member name="M:Scriban.Syntax.ScriptList`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:Scriban.Syntax.ScriptList`1"/>
            </summary>
        </member>
        <member name="M:Scriban.Syntax.ScriptList`1.Add(`0)">
            <summary>
            Adds the specified node to this list.
            </summary>
            <param name="node">Node to add to this list</param>
        </member>
        <member name="M:Scriban.Syntax.ScriptList`1.GetEnumerator">
            <summary>
            Gets the default enumerator.
            </summary>
            <returns>The enumerator of this list</returns>
        </member>
        <member name="T:Scriban.Syntax.ScriptList`1.Enumerator">
            <summary>
            Enumerator of a <see cref="T:Scriban.Syntax.ScriptList`1"/>
            </summary>
        </member>
        <member name="M:Scriban.Syntax.ScriptList`1.Enumerator.#ctor(Scriban.Syntax.ScriptNode[],System.Int32)">
            <summary>
            Initialize an enumerator with a list of <see cref="T:Scriban.Syntax.ScriptNode"/>
            </summary>
            <param name="nodes"></param>
            <param name="count"></param>
        </member>
        <member name="T:Scriban.Syntax.ScriptNode">
            <summary>
            Base class for the abstract syntax tree of a scriban program.
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptNode.Span">
            <summary>
            The source span of this node.
            </summary>
        </member>
        <member name="P:Scriban.Syntax.ScriptNode.Parent">
            <summary>
            Gets the parent of this node.
            </summary>
        </member>
        <member name="M:Scriban.Syntax.ScriptNode.Evaluate(Scriban.TemplateContext)">
            <summary>
            Evaluates this instance with the specified context.
            </summary>
            <param name="context">The template context.</param>
        </member>
        <member name="M:Scriban.Syntax.ScriptNode.Clone">
            <summary>
            Clones this node including its trivias.
            </summary>
            <returns>Return a clone of this node.</returns>
        </member>
        <member name="M:Scriban.Syntax.ScriptNode.Clone(System.Boolean)">
            <summary>
            Clones this node.
            </summary>
            <param name="withTrivias"><c>true</c> to copy the trivias.</param>
            <returns>Return a clone of this node.</returns>
        </member>
        <member name="M:Scriban.Syntax.ScriptNode.GetChildren(System.Int32)">
            <summary>
            Gets a children at the specified index.
            </summary>
            <param name="index">Index of the children</param>
            <returns>A children at the specified index</returns>
        </member>
        <member name="M:Scriban.Syntax.ScriptNode.GetChildrenImpl(System.Int32)">
            <summary>
            Gets a children at the specified index.
            </summary>
            <param name="index">Index of the children</param>
            <returns>A children at the specified index</returns>
            <remarks>The index is safe to use</remarks>
        </member>
        <member name="M:Scriban.Syntax.ScriptNode.ParentToThis``1(``0@,``0)">
            <summary>
            Helper method to deparent/parent a node to this instance.
            </summary>
            <typeparam name="TSyntaxNode">Type of the node</typeparam>
            <param name="set">The previous child node parented to this instance</param>
            <param name="node">The new child node to parent to this instance</param>
        </member>
        <member name="P:Scriban.Syntax.ScriptRuntimeException.OriginalMessage">
            <summary>
            Provides the exception message without the source span prefix.
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptStringSlice">
            <summary>
            Slice of a string
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptStringSlice.FullText">
            <summary>
            The text of this slice.
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptStringSlice.Index">
            <summary>
            Index into the text
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptStringSlice.Length">
            <summary>
            Length of the slice
            </summary>
        </member>
        <member name="T:Scriban.Syntax.ScriptStatement">
            <summary>
            Base class for all statements.
            </summary>
            <seealso cref="T:Scriban.Syntax.ScriptNode" />
        </member>
        <member name="T:Scriban.Syntax.ScriptWhitespaceMode">
            <summary>
            Whitespace mode handling for code/escape enter/exit.
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptWhitespaceMode.None">
            <summary>
            No change in whitespaces.
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptWhitespaceMode.Greedy">
            <summary>
            The greedy mode using the character - (e.g {{- or -}}), removes any whitespace, including newlines
            </summary>
        </member>
        <member name="F:Scriban.Syntax.ScriptWhitespaceMode.NonGreedy">
             <summary>
             The non greedy mode using the character ~.
            
             - Using a {{~ will remove any whitespace before but will stop on the first newline without including it
             - Using a ~}} will remove any whitespace after including the first newline but will stop after
             </summary>
        </member>
        <member name="T:Scriban.ScriptPrinter">
            <summary>
            Rewriter context used to write an AST/<see cref="T:Scriban.Syntax.ScriptNode"/> tree back to a text.
            </summary>
        </member>
        <member name="F:Scriban.ScriptPrinter.Options">
            <summary>
            Gets the options for rendering
            </summary>
        </member>
        <member name="T:Scriban.ScriptPrinterOptions">
            <summary>
            Defines the options used for rendering back an AST/<see cref="T:Scriban.Syntax.ScriptNode"/> to a text.
            </summary>
        </member>
        <member name="F:Scriban.ScriptPrinterOptions.Mode">
            <summary>
            The mode used to render back an AST
            </summary>
        </member>
        <member name="T:Scriban.LiquidTemplateContext">
            <summary>
            A Liquid based <see cref="T:Scriban.TemplateContext"/> providing the builtin functions usually available for a liquid template.
            </summary>
        </member>
    </members>
</doc>
