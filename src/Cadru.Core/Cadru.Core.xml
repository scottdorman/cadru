<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cadru.Core</name>
    </assembly>
    <members>
        <member name="T:Cadru.CancelEventArgs`1">
            <summary>
            <see cref="T:Cadru.CancelEventArgs`1"/> is the base class for classes
            containing event data for a cancelable event.
            </summary>
            <typeparam name="T">The type of the event data.</typeparam>
        </member>
        <member name="M:Cadru.CancelEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.CancelEventArgs`1"/> class.
            </summary>
            <param name="data">The event data.</param>
        </member>
        <member name="P:Cadru.CancelEventArgs`1.Data">
            <summary>
            Gets the event data.
            </summary>
            <value>The event data.</value>
        </member>
        <member name="T:Cadru.Color.ColorUtils">
            <summary>
            Methods for working with color values.
            </summary>
        </member>
        <member name="M:Cadru.Color.ColorUtils.GenerateColor(System.String,System.String)">
            <summary>
            Generate a color derived from a string value.
            </summary>
            <param name="value">The value to generate a color for.</param>
            <param name="defaultColor">The default color.</param>
            <returns>An <see cref="T:Cadru.Color.RGB"/> color representing <paramref name="value"/>.</returns>
        </member>
        <member name="M:Cadru.Color.ColorUtils.GetBestForegroundColor(Cadru.Color.RGB)">
            <summary>
            Gets the best foreground color given the specified background color.
            </summary>
            <param name="color">The background color.</param>
            <returns>The best <see cref="T:Cadru.Color.RGB"/> foreground color.</returns>
        </member>
        <member name="M:Cadru.Color.ColorUtils.GetBestForegroundColor(Cadru.Color.RGBA)">
            <summary>
            Gets the best foreground color given the specified background color.
            </summary>
            <param name="color">The background color.</param>
            <returns>The best <see cref="T:Cadru.Color.RGBA"/> foreground color.</returns>
        </member>
        <member name="M:Cadru.Color.ColorUtils.GetBestForegroundColor(Cadru.Color.HSV)">
            <summary>
            Gets the best foreground color given the specified background color.
            </summary>
            <param name="color">The background color.</param>
            <returns>The best <see cref="T:Cadru.Color.HSV"/> foreground color.</returns>
        </member>
        <member name="M:Cadru.Color.ColorUtils.Luminance(Cadru.Color.RGB)">
            <summary>
            Gets the luminance of the specified color.
            </summary>
            <param name="color">The color.</param>
            <returns>The luminance value of the color.</returns>
        </member>
        <member name="M:Cadru.Color.ColorUtils.Luminance(Cadru.Color.RGBA)">
            <summary>
            Gets the luminance of the specified color.
            </summary>
            <param name="color">The color.</param>
            <returns>The luminance value of the color.</returns>
        </member>
        <member name="M:Cadru.Color.ColorUtils.Luminance(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the luminance of the specified color.
            </summary>
            <param name="red">The red color components</param>
            <param name="green">The green color component</param>
            <param name="blue">The blue color component</param>
            <returns>The luminance value of the color.</returns>
        </member>
        <member name="T:Cadru.Color.HSV">
            <summary>
            The HSV color model.
            </summary>
        </member>
        <member name="F:Cadru.Color.HSV.Black">
            <summary>
            The color black as an <see cref="T:Cadru.Color.HSV"/> value.
            </summary>
        </member>
        <member name="F:Cadru.Color.HSV.White">
            <summary>
            The color white as an <see cref="T:Cadru.Color.HSV"/> value.
            </summary>
        </member>
        <member name="M:Cadru.Color.HSV.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Color.HSV"/> structure.
            </summary>
            <param name="hue">The hue component.</param>
            <param name="saturation">The saturation component.</param>
            <param name="value">The value component.</param>
        </member>
        <member name="P:Cadru.Color.HSV.Hue">
            <summary>
            The hue color component.
            </summary>
        </member>
        <member name="P:Cadru.Color.HSV.Saturation">
            <summary>
            The saturation color component.
            </summary>
        </member>
        <member name="P:Cadru.Color.HSV.Value">
            <summary>
            The value color component.
            </summary>
        </member>
        <member name="M:Cadru.Color.HSV.op_Inequality(Cadru.Color.HSV,Cadru.Color.HSV)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Color.HSV.op_Equality(Cadru.Color.HSV,Cadru.Color.HSV)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Color.HSV.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Color.HSV.Equals(Cadru.Color.HSV)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other"></param>
            <returns>
            <see langword="true"/> if <paramref name="other"/> and this instance
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Color.HSV.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Color.RGB">
            <summary>
            The RGB color model.
            </summary>
        </member>
        <member name="F:Cadru.Color.RGB.Black">
            <summary>
            The color black as an <see cref="T:Cadru.Color.RGB"/> value.
            </summary>
        </member>
        <member name="F:Cadru.Color.RGB.White">
            <summary>
            The color white as an <see cref="T:Cadru.Color.RGB"/> value.
            </summary>
        </member>
        <member name="M:Cadru.Color.RGB.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Color.RGB"/> structure.
            </summary>
            <param name="red">The red color component.</param>
            <param name="green">The green color component.</param>
            <param name="blue">The blue color component.</param>
        </member>
        <member name="M:Cadru.Color.RGB.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Color.RGB"/> structure.
            </summary>
            <param name="value">An integer value that represents the color.</param>
        </member>
        <member name="M:Cadru.Color.RGB.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Color.RGB"/> structure.
            </summary>
            <param name="hex">A string containing a hexadecimal color representation.</param>
        </member>
        <member name="P:Cadru.Color.RGB.Blue">
            <summary>
            The blue color component.
            </summary>
        </member>
        <member name="P:Cadru.Color.RGB.Green">
            <summary>
            The green color component.
            </summary>
        </member>
        <member name="P:Cadru.Color.RGB.Red">
            <summary>
            The red color component.
            </summary>
        </member>
        <member name="M:Cadru.Color.RGB.op_Inequality(Cadru.Color.RGB,Cadru.Color.RGB)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Color.RGB.op_Equality(Cadru.Color.RGB,Cadru.Color.RGB)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Color.RGB.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Color.RGB.Equals(Cadru.Color.RGB)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other"></param>
            <returns>
            <see langword="true"/> if <paramref name="other"/> and this instance
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Color.RGB.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Color.RGB.ToHexString">
            <summary>
            Returns a string representing the color in hex format.
            </summary>
            <returns>A string representing the color in #rrggbb format.</returns>
        </member>
        <member name="M:Cadru.Color.RGB.ToString">
            <summary>
            Returns a string representing the color in rgb(r,g,b) format.
            </summary>
            <returns>A string representing the color in rgb(r,g,b) format.</returns>
        </member>
        <member name="T:Cadru.Color.RGBA">
            <summary>
            The RGB color model.
            </summary>
        </member>
        <member name="F:Cadru.Color.RGBA.Black">
            <summary>
            The color black as an <see cref="T:Cadru.Color.RGBA"/> value.
            </summary>
        </member>
        <member name="F:Cadru.Color.RGBA.White">
            <summary>
            The color white as an <see cref="T:Cadru.Color.RGBA"/> value.
            </summary>
        </member>
        <member name="M:Cadru.Color.RGBA.#ctor(System.Byte,System.Byte,System.Byte,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Color.RGBA"/> structure.
            </summary>
            <param name="red">The red color component.</param>
            <param name="green">The green color component.</param>
            <param name="blue">The blue color component.</param>
            <param name="alpha">The alpha channel component.</param>
        </member>
        <member name="M:Cadru.Color.RGBA.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Color.RGBA"/> structure.
            </summary>
            <param name="red">The red color component.</param>
            <param name="green">The green color component.</param>
            <param name="blue">The blue color component.</param>
        </member>
        <member name="M:Cadru.Color.RGBA.#ctor(Cadru.Color.RGB)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Color.RGBA"/> structure.
            </summary>
            <param name="color">An <see cref="T:Cadru.Color.RGB"/> color.</param>
        </member>
        <member name="M:Cadru.Color.RGBA.#ctor(Cadru.Color.RGB,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Color.RGBA"/> structure.
            </summary>
            <param name="color">An <see cref="T:Cadru.Color.RGB"/> color.</param>
            <param name="alpha">The alpha channel component.</param>
        </member>
        <member name="M:Cadru.Color.RGBA.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Color.RGBA"/> structure.
            </summary>
            <param name="value">An integer value that represents the color.</param>
        </member>
        <member name="M:Cadru.Color.RGBA.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Color.RGBA"/> structure.
            </summary>
            <param name="hex">A string containing a hexadecimal color representation.</param>
        </member>
        <member name="P:Cadru.Color.RGBA.Alpha">
            <summary>
            The alpha channel component.
            </summary>
        </member>
        <member name="P:Cadru.Color.RGBA.Blue">
            <summary>
            The blue color component.
            </summary>
        </member>
        <member name="P:Cadru.Color.RGBA.Green">
            <summary>
            The green color component.
            </summary>
        </member>
        <member name="P:Cadru.Color.RGBA.Red">
            <summary>
            The red color component.
            </summary>
        </member>
        <member name="M:Cadru.Color.RGBA.op_Inequality(Cadru.Color.RGBA,Cadru.Color.RGBA)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Color.RGBA.op_Equality(Cadru.Color.RGBA,Cadru.Color.RGBA)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Color.RGBA.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Color.RGBA.Equals(Cadru.Color.RGBA)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other"></param>
            <returns>
            <see langword="true"/> if <paramref name="other"/> and this instance
            represent the same value; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Color.RGBA.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Color.RGBA.ToHexString">
            <summary>
            Returns a string representing the color in hex format.
            </summary>
            <returns>
            If the <see cref="P:Cadru.Color.RGBA.Alpha"/> channel is less than one, a string
            representing the color in #aarrggbb format; otherwise, a string
            representing the color in #rrggbb format.
            </returns>
        </member>
        <member name="M:Cadru.Color.RGBA.ToString">
            <summary>
            Returns a string representing the color in rgba(r,g,b) format.
            </summary>
            <returns>A string representing the color in rgba(r,g,b) format.</returns>
        </member>
        <member name="T:Cadru.Comb">
            <summary>
            Represents a combined globally unique identifier (GUID) and time stamp.
            </summary>
            <remarks>
            A COMB is a 128-bit integer (16 bytes) that can be used across all
            computers and networks wherever a unique identifier is required. Such an
            identifier has a low probability of being duplicated.
            </remarks>
        </member>
        <member name="F:Cadru.Comb.Empty">
            <summary>
            A read-only instance of <see cref="T:Cadru.Comb"/> structure whose value is
            all zeros.
            </summary>
            <remarks>
            You can compare a <see cref="T:Cadru.Comb"/> with the value of the
            <see cref="F:Cadru.Comb.Empty"/> field to determine whether a
            <see cref="T:Cadru.Comb"/> is non-zero.
            </remarks>
        </member>
        <member name="F:Cadru.Comb.MaxDate">
            <summary>
            Represents the greatest possible date and time value which can be
            held by a <see cref="T:Cadru.Comb"/>.
            </summary>
        </member>
        <member name="F:Cadru.Comb.MinDate">
            <summary>
            Represents the earliest possible date and time value which can be
            held by a <see cref="T:Cadru.Comb"/>.
            </summary>
        </member>
        <member name="M:Cadru.Comb.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure using
            the specified array of bytes.
            </summary>
            <param name="array">
            A 16 element byte array containing values with which to initialize
            the <see cref="T:Cadru.Comb"/>.
            </param>
        </member>
        <member name="M:Cadru.Comb.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure using
            the specified integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="b">The next 2 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="c">The next 2 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="d">The remaining 8 bytes of the <see cref="T:Cadru.Comb"/>.</param>
        </member>
        <member name="M:Cadru.Comb.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure using
            the specified integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="b">The next 2 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="c">The next 2 bytes of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="d">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="e">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="f">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="g">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="h">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="i">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="j">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
            <param name="k">The next byte of the <see cref="T:Cadru.Comb"/>.</param>
        </member>
        <member name="M:Cadru.Comb.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure using
            the specified integers and byte array.
            </summary>
            <param name="value">
            <para>
            A string that contains a <see cref="T:Cadru.Comb"/> in the following format:
            </para>
            <para>
            hexadecimal digits are arranged in groups of 8, 4, 4, 4, and 12
            digits with hyphens between the groups. The <see cref="T:Cadru.Comb"/> can
            optionally be enclosed in matching braces.
            </para>
            <para>For example: dddddddd-dddd-dddd-dddd-dddddddddddd or {dddddddd-dddd-dddd-dddd-dddddddddddd}.</para>
            <para>
            Alternatively, the following format is permitted:
            {0xdddddddd,0xdddd,
            0xdddd,{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd},{0xdd}},
            where d is a hexadecimal digit. If this format is used, all brackets
            and commas indicated are required, and all numbers must be prefixed
            with "0x" as shown. Fewer hexadecimal digits than shown can be used,
            but not more.
            </para>
            </param>
        </member>
        <member name="P:Cadru.Comb.DateTime">
            <summary>
            Gets the date and time represented by the current instance.
            </summary>
            <value>
            A <see cref="T:System.DateTimeOffset"/> containing the data and time
            represented by the current instance.
            </value>
        </member>
        <member name="M:Cadru.Comb.op_Equality(Cadru.Comb,Cadru.Comb)">
            <summary>
            Determines whether two specified <see cref="T:Cadru.Comb"/> objects are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if both objects are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.op_GreaterThan(Cadru.Comb,Cadru.Comb)">
            <summary>
            Determines whether one <see cref="T:Cadru.Comb"/> instance is greater than
            the other.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if the first instance is greater than the
            second; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.op_GreaterThanOrEqual(Cadru.Comb,Cadru.Comb)">
            <summary>
            Determines whether one <see cref="T:Cadru.Comb"/> instance is greater than
            or equal to the other.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if the first instance is greater than or
            equal to the second; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.op_LessThanOrEqual(Cadru.Comb,Cadru.Comb)">
            <summary>
            Determines whether one <see cref="T:Cadru.Comb"/> instance is less than or
            equal to the other.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if the first instance is less than or equal
            to the second; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.op_Inequality(Cadru.Comb,Cadru.Comb)">
            <summary>
            Determines whether two specified <see cref="T:Cadru.Comb"/> objects are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if both objects are not equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.op_LessThan(Cadru.Comb,Cadru.Comb)">
            <summary>
            Determines whether one <see cref="T:Cadru.Comb"/> instance is less than the other.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if the first instance is less than the
            second; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.NewComb">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure.
            </summary>
            <returns>A new <see cref="T:Cadru.Comb"/> object.</returns>
            <remarks>
            The date and time value contained by the new <see cref="T:Cadru.Comb"/> is
            the current date and time as represented by <see cref="P:System.DateTimeOffset.UtcNow"/>.
            </remarks>
        </member>
        <member name="M:Cadru.Comb.NewComb(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure.
            </summary>
            <param name="date">
            A date and time value to be contained by the new <see cref="T:Cadru.Comb"/>.
            </param>
            <returns>A new <see cref="T:Cadru.Comb"/> object.</returns>
        </member>
        <member name="M:Cadru.Comb.NewComb(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Comb"/> structure.
            </summary>
            <param name="date">
            A date and time value to be contained by the new <see cref="T:Cadru.Comb"/>.
            </param>
            <returns>A new <see cref="T:Cadru.Comb"/> object.</returns>
        </member>
        <member name="M:Cadru.Comb.Parse(System.String)">
            <summary>
            Converts the string representation of a COMB to the equivalent
            <see cref="T:Cadru.Comb"/> structure.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>A structure that contains the value that was parsed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="input"/> is not in a recognized format.
            </exception>
            <remarks>
            <para>
            The Parse method converts the string representation of a COMB to a
            <see cref="T:Cadru.Comb"/> value. This method can convert strings in any of
            the five formats produced by the <see cref="M:Cadru.Comb.ToString(System.String)"/> and
            <see cref="M:Cadru.Comb.ToString(System.String,System.IFormatProvider)"/> methods, as shown in
            the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Description</term>
            <term>Format</term>
            </listheader>
            <item>
            <term>N</term>
            <description>32 digits</description>
            <description>00000000000000000000000000000000</description>
            </item>
            <item>
            <term>D</term>
            <description>32 digits separated by hyphens</description>
            <description>00000000-0000-0000-0000-000000000000</description>
            </item>
            <item>
            <term>B</term>
            <description>
            32 digits separated by hyphens, enclosed in braces
            </description>
            <description>{00000000-0000-0000-0000-000000000000}</description>
            </item>
            <item>
            <term>P</term>
            <description>
            32 digits separated by hyphens, enclosed in parentheses
            </description>
            <description>(00000000-0000-0000-0000-000000000000)</description>
            </item>
            <item>
            <term>X</term>
            <description>
            Four hexadecimal values enclosed in braces, where the fourth value
            is a subset of eight hexadecimal values that is also enclosed in braces
            </description>
            <description>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</description>
            </item>
            </list>
            <para>
            The method throws a <see cref="T:System.FormatException"/> if it is unable to
            successfully parse the string. Some of the reasons why this might
            occur include:
            </para>
            <list type="bullet">
            <item>
            <description>
            <paramref name="input"/> contains characters that are not part of
            the hexadecimal character set.
            </description>
            </item>
            <item>
            <description>
            <paramref name="input"/> has too many or too few numeric characters.
            </description>
            </item>
            <item>
            <description>
            <paramref name="input"/> has too many or too few of the non-numeric
            characters appropriate for a particular format.
            </description>
            </item>
            <item>
            <description>
            <paramref name="input"/> is not in one of the formats recognized by
            the <see cref="M:Cadru.Comb.ToString"/> method and listed in the previous table.
            </description>
            </item>
            </list>
            <para>
            Use the <see cref="M:Cadru.Comb.TryParse(System.String,Cadru.Comb@)"/> method to catch any unsuccessful
            parse operations without having to handle an exception.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.ParseExact(System.String,System.String)">
            <summary>
            Converts the string representation of a COMB to the equivalent
            <see cref="T:Cadru.Comb"/> structure, provided that the string is in the
            specified format.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="format">
            One of the following specifiers that indicates the exact format to
            use when interpreting input: "N", "D", "B", "P", or "X".
            </param>
            <returns>A structure that contains the value that was parsed.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="input"/> or <paramref name="format"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <paramref name="input"/> is not in the format specified by <paramref name="format"/>.
            </exception>
            <remarks>
            <para>
            The following table shows the accepted format specifiers for the
            <paramref name="format"/> parameter. "0" represents a digit; hyphens
            ("-"), braces ("{", "}"), and parentheses ("(", ")") appear as shown.
            </para>
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Format of return value</term>
            </listheader>
            <item>
            <term>N</term>
            <description>
            <para>32 digits:</para>
            <para>00000000000000000000000000000000</para>
            </description>
            </item>
            <item>
            <term>D</term>
            <description>
            <para>32 digits separated by hyphens:</para>
            <para>00000000-0000-0000-0000-000000000000</para>
            </description>
            </item>
            <item>
            <term>B</term>
            <description>
            <para>32 digits separated by hyphens, enclosed in braces:</para>
            <para>{00000000-0000-0000-0000-000000000000}</para>
            </description>
            </item>
            <item>
            <term>P</term>
            <description>
            <para>32 digits separated by hyphens, enclosed in parentheses:</para>
            <para>(00000000-0000-0000-0000-000000000000)</para>
            </description>
            </item>
            <item>
            <term>X</term>
            <description>
            <para>
            Four hexadecimal values enclosed in braces, where the fourth value
            is a subset of eight hexadecimal values that is also enclosed in braces:
            </para>
            <para>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.TryParse(System.String,Cadru.Comb@)">
            <summary>
            Converts the string representation of a COMB to the equivalent
            <see cref="T:Cadru.Comb"/> structure.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="result">
            The structure that will contain the parsed value. If the method
            returns <see langword="true"/>, <paramref name="result"/> contains a
            valid <see cref="T:Cadru.Comb"/>. If the method returns
            <see langword="false"/>, <paramref name="result"/> equals <see cref="F:Cadru.Comb.Empty"/>.
            </param>
            <returns>
            <see langword="true"/> if the parse operation was successful;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method is like the <see cref="M:Cadru.Comb.Parse(System.String)"/> method, except that
            instead of returning the parsed COMB, it returns
            <see langword="false"/> if <paramref name="input"/> is
            <see langword="null"/> or not in a recognized format and doesn't
            throw an exception. It converts strings in any of the five formats
            produced by the <see cref="M:Cadru.Comb.ToString(System.String)"/> and
            <see cref="M:Cadru.Comb.ToString(System.String,System.IFormatProvider)"/> methods, as shown in
            the following table.
            </para>
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Description</term>
            <term>Format</term>
            </listheader>
            <item>
            <term>N</term>
            <description>32 digits</description>
            <description>00000000000000000000000000000000</description>
            </item>
            <item>
            <term>D</term>
            <description>32 digits separated by hyphens</description>
            <description>00000000-0000-0000-0000-000000000000</description>
            </item>
            <item>
            <term>B</term>
            <description>
            32 digits separated by hyphens, enclosed in braces
            </description>
            <description>{00000000-0000-0000-0000-000000000000}</description>
            </item>
            <item>
            <term>P</term>
            <description>
            32 digits separated by hyphens, enclosed in parentheses
            </description>
            <description>(00000000-0000-0000-0000-000000000000)</description>
            </item>
            <item>
            <term>X</term>
            <description>
            Four hexadecimal values enclosed in braces, where the fourth value
            is a subset of eight hexadecimal values that is also enclosed in braces
            </description>
            <description>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.TryParseExact(System.String,System.String,Cadru.Comb@)">
            <summary>
            Converts the string representation of a COMB to the equivalent
            <see cref="T:Cadru.Comb"/> structure provided that the string is in the
            specified format.
            </summary>
            <param name="input">The string to convert.</param>
            <param name="format">
            One of the following specifiers that indicates the exact format to
            use when interpreting input: "N", "D", "B", "P", or "X".
            </param>
            <param name="result">
            The structure that will contain the parsed value. If the method
            returns <see langword="true"/>, <paramref name="result"/> contains a
            valid <see cref="T:Cadru.Comb"/>. If the method returns
            <see langword="false"/>, <paramref name="result"/> equals <see cref="F:Cadru.Comb.Empty"/>.
            </param>
            <returns>
            <see langword="true"/> if the parse operation was successful;
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            This method returns <see langword="false"/> if
            <paramref name="input"/> is <see langword="null"/> or not in a
            recognized format and doesn't throw an exception.
            </para>
            <para>
            The following table shows the accepted format specifiers for the
            <paramref name="format"/> parameter. "0" represents a digit; hyphens
            ("-"), braces ("{", "}"), and parentheses ("(", ")") appear as shown.
            </para>
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Format of return value</term>
            </listheader>
            <item>
            <term>N</term>
            <description>
            <para>32 digits:</para>
            <para>00000000000000000000000000000000</para>
            </description>
            </item>
            <item>
            <term>D</term>
            <description>
            <para>32 digits separated by hyphens:</para>
            <para>00000000-0000-0000-0000-000000000000</para>
            </description>
            </item>
            <item>
            <term>B</term>
            <description>
            <para>32 digits separated by hyphens, enclosed in braces:</para>
            <para>{00000000-0000-0000-0000-000000000000}</para>
            </description>
            </item>
            <item>
            <term>P</term>
            <description>
            <para>32 digits separated by hyphens, enclosed in parentheses:</para>
            <para>(00000000-0000-0000-0000-000000000000)</para>
            </description>
            </item>
            <item>
            <term>X</term>
            <description>
            <para>
            Four hexadecimal values enclosed in braces, where the fourth value
            is a subset of eight hexadecimal values that is also enclosed in braces:
            </para>
            <para>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an
            indication of their relative values.
            </summary>
            <param name="obj">A boxed object to compare, or <see langword="null"/>.</param>
            <returns>
            A signed number indicating the relative values of this instance and
            the <paramref name="obj"/> parameter.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>This instance is less than <paramref name="obj"/>.</description>
            </item>
            <item>
            <term>Zero</term>
            <description>This instance is the same as <paramref name="obj"/>.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>
            This instance is greater than <paramref name="obj"/>, or
            <paramref name="obj"/> is <see langword="null"/>.
            </description>
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not a <see cref="T:Cadru.Comb"/>.
            </exception>
        </member>
        <member name="M:Cadru.Comb.CompareTo(Cadru.Comb)">
            <summary>
            Compares the value of this instance to a specified
            <see cref="T:Cadru.UnixTimestamp"/> value and returns an integer that
            indicates whether this instance is earlier than, the same as, or
            later than the specified <see cref="T:Cadru.UnixTimestamp"/> value.
            </summary>
            <param name="other">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and
            the <paramref name="other"/> parameter.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>This instance is earlier than <paramref name="other"/>.</description>
            </item>
            <item>
            <term>Zero</term>
            <description>This instance is the same as <paramref name="other"/>.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>This instance is later than <paramref name="other"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Cadru.Comb.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a
            specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> is a
            <see cref="T:Cadru.Comb"/> and has the same value as this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.Equals(Cadru.Comb)">
            <summary>
            Returns a value indicating whether this instance and a specified
            <see cref="T:Cadru.Comb"/> object represent the same value.
            </summary>
            <param name="other">An object to compare to this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="other"/> has the same
            value as this instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Comb.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:Cadru.Comb.ToString">
            <summary>
            Returns a string representation of the value of this instance in
            registry format.
            </summary>
            <returns>
            <para>
            The value of this <see cref="T:Cadru.Comb"/>, formatted by using the "D"
            format specifier as follows:
            </para>
            <para>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</para>
            <para>
            where the value of the GUID is represented as a series of lowercase
            hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and
            separated by hyphens. An example of a return value is
            "382c74c3-721d-4f34-80e5-57657b6cbc27". To convert the hexadecimal
            digits from a through f to uppercase, call the
            <see cref="M:System.String.ToUpper"/> method on the returned string.
            </para>
            </returns>
        </member>
        <member name="M:Cadru.Comb.ToString(System.String)">
            <summary>
            Returns a string representation of the value of this
            <see cref="T:Cadru.Comb"/> instance, according to the provided format specifier.
            </summary>
            <param name="format">
            A single format specifier that indicates how to format the value of
            this <see cref="T:Cadru.Comb"/>. The format parameter can be "N", "D", "B",
            "P", or "X". If <paramref name="format"/> is <see langword="null"/>
            or an empty string (""), "D" is used.
            </param>
            <returns>
            The value of this <see cref="T:Cadru.Comb"/>, represented as a series of
            lowercase hexadecimal digits in the specified format.
            </returns>
            <exception cref="T:System.FormatException">
            The value of <paramref name="format"/> is not
            <see langword="null"/>, an empty string (""), "N", "D", "B", "P", or "X".
            </exception>
            <remarks>
            The following table shows the accepted format specifiers for the
            <paramref name="format"/> parameter. "0" represents a digit; hyphens
            ("-"), braces ("{", "}"), and parentheses ("(", ")") appear as shown.
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Format of return value</term>
            </listheader>
            <item>
            <term>N</term>
            <description>
            <para>32 digits:</para>
            <para>00000000000000000000000000000000</para>
            </description>
            </item>
            <item>
            <term>D</term>
            <description>
            <para>32 digits separated by hyphens:</para>
            <para>00000000-0000-0000-0000-000000000000</para>
            </description>
            </item>
            <item>
            <term>B</term>
            <description>
            <para>32 digits separated by hyphens, enclosed in braces:</para>
            <para>{00000000-0000-0000-0000-000000000000}</para>
            </description>
            </item>
            <item>
            <term>P</term>
            <description>
            <para>32 digits separated by hyphens, enclosed in parentheses:</para>
            <para>(00000000-0000-0000-0000-000000000000)</para>
            </description>
            </item>
            <item>
            <term>X</term>
            <description>
            <para>
            Four hexadecimal values enclosed in braces, where the fourth value
            is a subset of eight hexadecimal values that is also enclosed in braces:
            </para>
            <para>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</para>
            </description>
            </item>
            </list>
            <para>
            The hexadecimal digits a through f are lowercase in the returned
            string. To convert them to uppercase, call the
            <see cref="M:System.String.ToUpper"/> method on the returned string.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the value of this
            <see cref="T:Cadru.Comb"/> instance, according to the provided format
            specifier and culture-specific format information.
            </summary>
            <param name="format">
            A single format specifier that indicates how to format the value of
            this <see cref="T:Cadru.Comb"/>. The format parameter can be "N", "D", "B",
            "P", or "X". If <paramref name="format"/> is <see langword="null"/>
            or an empty string (""), "D" is used.
            </param>
            <param name="formatProvider">
            (Reserved) An object that supplies culture-specific formatting information.
            </param>
            <returns>
            The value of this <see cref="T:Cadru.Comb"/>, represented as a series of
            lowercase hexadecimal digits in the specified format.
            </returns>
            <exception cref="T:System.FormatException">
            The value of <paramref name="format"/> is not
            <see langword="null"/>, an empty string (""), "N", "D", "B", "P", or "X".
            </exception>
            <remarks>
            <para>
            The <paramref name="formatProvider"/> parameter is reserved for
            future use and does not contribute to the execution of this method.
            You can pass <see langword="null"/> in the method call.
            </para>
            <para>
            The following table shows the accepted format specifiers for the
            <paramref name="format"/> parameter. "0" represents a digit; hyphens
            ("-"), braces ("{", "}"), and parentheses ("(", ")") appear as shown.
            </para>
            <list type="table">
            <listheader>
            <term>Specifier</term>
            <term>Format of return value</term>
            </listheader>
            <item>
            <term>N</term>
            <description>
            <para>32 digits:</para>
            <para>00000000000000000000000000000000</para>
            </description>
            </item>
            <item>
            <term>D</term>
            <description>
            <para>32 digits separated by hyphens:</para>
            <para>00000000-0000-0000-0000-000000000000</para>
            </description>
            </item>
            <item>
            <term>B</term>
            <description>
            <para>32 digits separated by hyphens, enclosed in braces:</para>
            <para>{00000000-0000-0000-0000-000000000000}</para>
            </description>
            </item>
            <item>
            <term>P</term>
            <description>
            <para>32 digits separated by hyphens, enclosed in parentheses:</para>
            <para>(00000000-0000-0000-0000-000000000000)</para>
            </description>
            </item>
            <item>
            <term>X</term>
            <description>
            <para>
            Four hexadecimal values enclosed in braces, where the fourth value
            is a subset of eight hexadecimal values that is also enclosed in braces:
            </para>
            <para>{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}</para>
            </description>
            </item>
            </list>
            <para>
            The hexadecimal digits a through f are lowercase in the returned
            string. To convert them to uppercase, call the
            <see cref="M:System.String.ToUpper"/> method on the returned string.
            </para>
            <para>
            Because the <paramref name="formatProvider"/> parameter is ignored,
            you cannot use it to provide a custom formatting solution. To
            represent a <see cref="T:Cadru.Comb"/> value as a string in a format that
            isn't supported by the standard COMB format strings, call the
            <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>
            method with a provider object that implements both the
            <see cref="T:System.ICustomFormatter"/> and <see cref="T:System.IFormatProvider"/>
            interfaces. For more information, see the "Custom Formatting with
            ICustomFormatter" section in the
            <see href="http://msdn.microsoft.com/en-us/library/26etazsy(v=vs.110).aspx">Formatting
            Types</see> article.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.Comb.ToByteArray">
            <summary>
            Returns a 16-element byte array that contains the value of the <see cref="T:Cadru.Comb"/>.
            </summary>
            <returns>A 16-element byte array.</returns>
        </member>
        <member name="T:Cadru.Diagnostics.Extensions">
            <summary>
            Provides extension methods to simplify diagnostics.
            </summary>
        </member>
        <member name="M:Cadru.Diagnostics.Extensions.Flatten(System.Exception)">
            <summary>
            Flattens all exception messages into a single string.
            </summary>
            <param name="e">The exception to flatten.</param>
            <returns>A string containing all of the exception messages.</returns>
            <remarks>
            This method recursively follows all nested
            <see cref="P:System.Exception.InnerException"/> properties.
            </remarks>
        </member>
        <member name="M:Cadru.Diagnostics.Extensions.ToElapsedTime(System.Diagnostics.Stopwatch)">
            <summary>
            Formats the elapsed time of a <see cref="T:System.Diagnostics.Stopwatch"/> as hh':'mm':'ss'.'ff.
            </summary>
            <param name="stopwatch"></param>
            <returns>The formatted elapsed time as a string.</returns>
        </member>
        <member name="T:Cadru.Diagnostics.StopwatchTimer">
            <summary>
            Provides a set of methods and properties that you can use to accurate
            measure elapsed time using the scope syntax provided by the <c>using</c> statement.
            </summary>
        </member>
        <member name="M:Cadru.Diagnostics.StopwatchTimer.#ctor(System.Action{System.Diagnostics.Stopwatch},System.Action{System.Diagnostics.Stopwatch})">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Diagnostics.StopwatchTimer"/> class.
            </summary>
            <param name="startAction">
            An optional action to run when the <see cref="P:Cadru.Diagnostics.StopwatchTimer.Stopwatch"/> is started.
            </param>
            <param name="stopAction">
            An optional action to run when the <see cref="P:Cadru.Diagnostics.StopwatchTimer.Stopwatch"/> is stopped.
            </param>
        </member>
        <member name="P:Cadru.Diagnostics.StopwatchTimer.Stopwatch">
            <summary>
            Gets the <see cref="P:Cadru.Diagnostics.StopwatchTimer.Stopwatch"/> instance.
            </summary>
        </member>
        <member name="M:Cadru.Diagnostics.StopwatchTimer.Dispose">
            <summary>
            Stops the internal <see cref="P:Cadru.Diagnostics.StopwatchTimer.Stopwatch"/> and performs the stop
            action, if it was provided.
            </summary>
        </member>
        <member name="T:Cadru.EmptyDisposable">
            <summary>
            Represents an empty <see cref="T:System.IDisposable"/> instance.
            </summary>
        </member>
        <member name="F:Cadru.EmptyDisposable.Instance">
            <summary>
            Singleton default disposable.
            </summary>
        </member>
        <member name="M:Cadru.EmptyDisposable.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:Cadru.EnumDescriptionAttribute">
            <summary>
            Provides a description for an enumerated type.
            </summary>
        </member>
        <member name="M:Cadru.EnumDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.EnumDescriptionAttribute"/> class.
            </summary>
            <param name="description">The description to store in this attribute.</param>
        </member>
        <member name="P:Cadru.EnumDescriptionAttribute.Description">
            <summary>
            Gets the description stored in this attribute.
            </summary>
            <value>The description stored in the attribute.</value>
        </member>
        <member name="T:Cadru.Enum`1">
            <summary>
            Provides a class for working with enumerations.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
        </member>
        <member name="M:Cadru.Enum`1.GetDescription(`0)">
            <summary>
            Retrieves the description of the constant in the enumeration that
            has the specified value.
            </summary>
            <param name="value">
            The value of a particular enumerated constant in terms of its
            underlying type.
            </param>
            <returns>
            A string containing the description of the enumerated constant in
            <typeparamref name="TEnum"/> whose value is
            <paramref name="value"/>; or <see langword="null"/> if no such
            constant is found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentException">
            <p><typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/></p>
            <p>-or</p>
            <p>
            <paramref name="value"/> is neither of type
            <typeparamref name="TEnum"/> nor does it have the same underlying
            type as <typeparamref name="TEnum"/>.
            </p>
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.GetDescription(`0,System.Boolean)">
            <summary>
            Retrieves the description of the constant in the enumeration that
            has the specified value.
            </summary>
            <param name="value">
            The value of a particular enumerated constant in terms of its
            underlying type.
            </param>
            <param name="useNameAsFallback">
            If <see langword="true"/>, the name of the enumerated constant is
            used if no description is found; otherwise, <see langword="null"/>.
            </param>
            <returns>
            A string containing the description of the enumerated constant in
            <typeparamref name="TEnum"/> whose value is
            <paramref name="value"/>; or <see langword="null"/> if no such
            constant is found and <paramref name="useNameAsFallback"/> is
            <see langword="false"/>; otherwise, the name of the enumerated constant.
            </returns>
            <remarks>
            This method will use the value from an
            <see cref="T:Cadru.EnumDescriptionAttribute"/>,
            <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>, or
            <see cref="T:System.ComponentModel.DescriptionAttribute"/> if found, in that respective
            order. If none of those attributes are found, or the value is
            <see langword="null"/>, and <paramref name="useNameAsFallback"/> is
            <see langword="true"/>, then the name of the enumerated constant is
            used; otherwise, a <see langword="null"/> is used.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentException">
            <p><typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/></p>
            <p>-or</p>
            <p>
            <paramref name="value"/> is neither of type
            <typeparamref name="TEnum"/> nor does it have the same underlying
            type as <typeparamref name="TEnum"/>.
            </p>
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.GetDescriptions">
            <summary>
            Retrieves an array of the descriptions of the constants in the enumeration.
            </summary>
            <returns>A collection of the names of the constants in <typeparamref name="TEnum"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/>.
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.GetDescriptions(System.Boolean)">
            <summary>
            Retrieves an array of the descriptions of the constants in the enumeration.
            </summary>
            <returns>A collection of the names of the constants in <typeparamref name="TEnum"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/>.
            </exception>
            <remarks>
            This method will use the value from an
            <see cref="T:Cadru.EnumDescriptionAttribute"/>,
            <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>, or
            <see cref="T:System.ComponentModel.DescriptionAttribute"/> if found, in that respective
            order. If none of those attributes are found, or the value is
            <see langword="null"/>, and <paramref name="useNameAsFallback"/> is
            <see langword="true"/>, then the name of the enumerated constant is
            used; otherwise, a <see langword="null"/> is used.
            </remarks>
        </member>
        <member name="M:Cadru.Enum`1.GetName(`0)">
            <summary>
            Retrieves the name of the constant in the enumeration that has the
            specified value.
            </summary>
            <param name="value">
            The value of a particular enumerated constant in terms of its
            underlying type.
            </param>
            <returns>
            A string containing the name of the enumerated constant in
            <typeparamref name="TEnum"/> whose value is
            <paramref name="value"/>; or <see langword="null"/> if no such
            constant is found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentException">
            <p><typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/></p>
            <p>-or</p>
            <p>
            <paramref name="value"/> is neither of type
            <typeparamref name="TEnum"/> nor does it have the same underlying
            type as <typeparamref name="TEnum"/>.
            </p>
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.GetNames">
            <summary>
            Retrieves an array of the names of the constants in the enumeration.
            </summary>
            <returns>A collection of the names of the constants in <typeparamref name="TEnum"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/>.
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.GetUnderlyingType">
            <summary>
            Returns the underlying type of the enumeration.
            </summary>
            <returns>The underlying type of <typeparamref name="TEnum"/>.</returns>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/>.
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.GetValues">
            <summary>
            Retrieves collection of the values of the constants in the enumeration.
            </summary>
            <returns>
            A collection that contains the values of the constants in <typeparamref name="TEnum"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <p>The method is invoked by reflection in a reflection-only context.</p>
            <p>-or-</p>
            <p>
            <typeparamref name="TEnum"/> is a type from an assembly loaded in a
            reflection-only context.
            </p>
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.IsDefined(System.Object)">
            <summary>
            Returns an indication whether a constant with a specified value
            exists in the enumeration.
            </summary>
            <param name="value">The value or name of a constant in <typeparamref name="TEnum"/>.</param>
            <returns>
            <see langword="true"/> if a constant in <typeparamref name="TEnum"/>
            has a value equal to <paramref name="value"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <p><typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/>.</p>
            <p>-or-</p>
            <p>
            The type of <paramref name="value"/> is an enumeration, but it is
            not an enumeration of type <typeparamref name="TEnum"/>.
            </p>
            <p>-or-</p>
            <p>
            The type of <paramref name="value"/> is not an underlying type of <typeparamref name="TEnum"/>.
            </p>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="value"/> is not type <see cref="T:System.SByte"/>,
            <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>,
            <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/>,
            <see cref="T:System.UInt64"/>, or <see cref="T:System.String"/>.
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.Parse(System.String)">
            <summary>
            Converts the string representation of the name or numeric value of
            one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>
            An instance of <typeparamref name="TEnum"/> whose value is
            represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <p><typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/>.</p>
            <p>-or-</p>
            <p>
            <paramref name="value"/> is either <see langword="String.Empty"/> or
            contains only white space.
            </p>
            <p>-or-</p>
            <p>
            <paramref name="value"/> is a name, but not one of the named
            constants defined for the enumeration.
            </p>
            </exception>
            <exception cref="T:System.OverflowException">
            <paramref name="value"/> is outside the range of the underlying type
            of <typeparamref name="TEnum"/>.
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.Parse(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of
            one or more enumerated constants to an equivalent enumerated object.
            A parameter specifies whether the operation is case-insensitive.
            </summary>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">
            <see langword="true"/> to ignore case; <see langword="false"/> to
            regard case.
            </param>
            <returns>
            An instance of <typeparamref name="TEnum"/> whose value is
            represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <p><typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/>.</p>
            <p>-or-</p>
            <p>
            <paramref name="value"/> is either <see langword="String.Empty"/> or
            contains only white space.
            </p>
            <p>-or-</p>
            <p>
            <paramref name="value"/> is a name, but not one of the named
            constants defined for the enumeration.
            </p>
            </exception>
            <exception cref="T:System.OverflowException">
            <paramref name="value"/> is outside the range of the underlying type
            of <typeparamref name="TEnum"/>.
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.ToEnum(System.Object)">
            <summary>
            Converts the specified object with an integer value to an
            enumeration member.
            </summary>
            <param name="value">The value convert to an enumeration member.</param>
            <returns>An enumeration whose value is <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <p><typeparamref name="TEnum"/> is not an <see cref="T:System.Enum"/>.</p>
            <p>-or-</p>
            <p>
            <paramref name="value"/> is not type <see cref="T:System.SByte"/>,
            <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>,
            <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/>,
            <see cref="T:System.UInt64"/>, or <see cref="T:System.String"/>.
            </p>
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.TryParse(System.String,`0@)">
            <summary>
            Converts the string representation of the name or numeric value of
            one or more enumerated constants to an equivalent enumerated object.
            The return value indicates whether the conversion succeeded.
            </summary>
            <param name="value">
            The string representation of the enumeration name or underlying
            value to convert.
            </param>
            <param name="result">
            When this method returns, contains an object of type
            <typeparamref name="TEnum"/> whose value is represented by value.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the value parameter was converted
            successfully; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TEnum"/> is not an enumeration type.
            </exception>
        </member>
        <member name="M:Cadru.Enum`1.TryParse(System.String,System.Boolean,`0@)">
            <summary>
            Converts the string representation of the name or numeric value of
            one or more enumerated constants to an equivalent enumerated object.
            A parameter specifies whether the operation is case-sensitive. The
            return value indicates whether the conversion succeeded.
            </summary>
            <param name="value">
            The string representation of the enumeration name or underlying
            value to convert.
            </param>
            <param name="ignoreCase">
            <see langword="true"/> to ignore case; <see langword="false"/> to
            regard case.
            </param>
            <param name="result">
            When this method returns, contains an object of type
            <typeparamref name="TEnum"/> whose value is represented by value.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the value parameter was converted
            successfully; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            <typeparamref name="TEnum"/> is not an enumeration type.
            </exception>
        </member>
        <member name="T:Cadru.EventArgs`1">
            <summary>
            <see cref="T:Cadru.EventArgs`1"/> is the base class for classes containing
            event data.
            </summary>
            <typeparam name="T">The type of the event data.</typeparam>
        </member>
        <member name="M:Cadru.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.EventArgs`1"/> class.
            </summary>
            <param name="data">The event data.</param>
        </member>
        <member name="P:Cadru.EventArgs`1.Data">
            <summary>
            Gets the event data.
            </summary>
            <value>The event data.</value>
        </member>
        <member name="T:Cadru.Extensions.ArrayExtensions">
            <summary>
            Provides basic routines for common array manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.ArrayExtensions.BytesToBinaryString(System.Byte[])">
            <summary>
            Converts the byte array to a string representation in binary.
            </summary>
            <param name="source">The source array.</param>
            <returns>The binary string representation of the array</returns>
        </member>
        <member name="M:Cadru.Extensions.ArrayExtensions.BytesToString(System.Byte[])">
            <summary>
            Converts the byte array to a string representation in hexadecimal.
            </summary>
            <param name="source">The source array.</param>
            <returns>The hexadecimal string representation of the array</returns>
        </member>
        <member name="M:Cadru.Extensions.ArrayExtensions.GetStringOrNull(System.String[],System.Int32)">
            <summary>
            Gets the string value contained at the index or
            <see langword="null"/> if that value is not found, is
            <see langword="null"/>, empty, or consists of all white-space characters.
            </summary>
            <param name="record">The string array to search.</param>
            <param name="index">
            An integer that represents the position of the array element to get.
            </param>
            <returns>The string value or <see langword="null"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.ArrayExtensions.ReverseArray(System.Byte[])">
            <summary>
            Reverses an array
            </summary>
            <param name="source">The source array.</param>
            <returns>The reversed array.</returns>
        </member>
        <member name="M:Cadru.Extensions.ArrayExtensions.ReverseArrayInPlace(System.Byte[])">
            <summary>
            Reverses an array.
            </summary>
            <param name="source">The source array.</param>
            <remarks>
            This is a destructive operation and will mutate the original array.
            </remarks>
        </member>
        <member name="T:Cadru.Extensions.BooleanExtensions">
            <summary>
            Provides basic routines for common Boolean manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.BooleanExtensions.ToBit(System.Boolean)">
            <summary>
            Returns the binary representation of the boolean value.
            </summary>
            <param name="value">
            The boolean value whose binary representation should be returned.
            </param>
            <returns>
            If the boolean value is <see langword="true"/>, 1 (one); otherwise,
            0 (zero).
            </returns>
        </member>
        <member name="M:Cadru.Extensions.BooleanExtensions.ToChar(System.Boolean)">
            <summary>
            Returns the character representation of the boolean value.
            </summary>
            <param name="value">
            The boolean value whose character representation should be returned.
            </param>
            <returns>
            If the boolean value is <see langword="true"/>, the character 'T';
            otherwise, the character 'F'.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.BooleanExtensions.ToLower(System.Boolean)">
            <summary>
            Converts the value of this instance to its equivalent lowercase
            string representation (either "true" or "false").
            </summary>
            <param name="value">
            The boolean value whose character representation should be returned.
            </param>
            <returns>
            The lowercase representation of
            <see cref="F:System.Boolean.TrueString"/> if the value of this
            instance is true, or the lowercase representation of
            <see cref="F:System.Boolean.FalseString"/> if the value of this
            instance is false.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.BooleanExtensions.ToUpper(System.Boolean)">
            <summary>
            Converts the value of this instance to its equivalent uppercase
            string representation (either "true" or "false").
            </summary>
            <param name="value">
            The boolean value whose character representation should be returned.
            </param>
            <returns>
            The uppercase representation of
            <see cref="F:System.Boolean.TrueString"/> if the value of this
            instance is true, or the uppercase representation of
            <see cref="F:System.Boolean.FalseString"/> if the value of this
            instance is false.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.BooleanExtensions.TryParseAsBoolean(System.Int32,System.Boolean@)">
            <overloads>
            <summary>
            Tries to convert the specified representation of a logical value to
            its Boolean equivalent. A return value indicates whether the
            conversion succeeded or failed.
            </summary>
            </overloads>
            <summary>
            Tries to convert the specified integer representation of a logical
            value to its Boolean equivalent. A return value indicates whether
            the conversion succeeded or failed.
            </summary>
            <param name="value">An integer containing the value to convert.</param>
            <param name="result">
            When this method returns, if the conversion succeeded, contains
            <see langword="true"/> true if <paramref name="value"/> is equal to
            1 (one) or <see langword="false"/> if <paramref name="value"/> is
            equal to 0 (zero). If the conversion failed, contains
            <see langword="false"/>. The conversion fails if
            <paramref name="value"/> is not equal to 1 (one) or 0 (zero).
            </param>
            <returns>
            <see langword="true"/> if value was converted successfully;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.BooleanExtensions.TryParseAsBoolean(System.String,System.Boolean@)">
            <summary>
            Tries to convert the specified string representation of a logical
            value to its Boolean equivalent. A return value indicates whether
            the conversion succeeded or failed.
            </summary>
            <param name="value">A string containing the value to convert.</param>
            <param name="result">
            When this method returns, if the conversion succeeded, contains
            <see langword="true"/> true if <paramref name="value"/> is equal to
            <see cref="F:System.Boolean.TrueString"/>, the character 'T', the word "Yes",
            or the character 'Y' or <see langword="false"/> if
            <paramref name="value"/> is equal to
            <see cref="F:System.Boolean.FalseString"/>, the character 'F', the word "No",
            or the character 'N'. If the conversion failed, contains
            <see langword="false"/>. The conversion fails if
            <paramref name="value"/> is <see langword="null"/> or is not equal
            to the value of either <see cref="F:System.Boolean.TrueString"/>, the
            character 'T', the word "Yes", or the character 'Y',
            <see cref="F:System.Boolean.FalseString"/>, the character 'F', the word "No",
            or the character 'N'.
            </param>
            <returns>
            <see langword="true"/> if value was converted successfully;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Cadru.Extensions.CollectionExtensions">
            <summary>
            Provides extensions for working with collections.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="instance">The collection to update.</param>
            <param name="collection">
            The collection whose elements should be added to the end of the
            <see cref="T:System.Collections.Generic.ICollection`1"/>. The collection itself cannot be
            <see langword="null"/>, but it can contain elements that are
            <see langword="null"/>, if type <typeparamref name="T"/> is a
            reference type.
            </param>
        </member>
        <member name="T:Cadru.Extensions.DateTimeExtensions">
            <summary>
            Provides basic routines for common DateTime manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.AddQuarters(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number
            of quarters to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="value">
            A number of whole and fractional quarters. The
            <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> whose value is the sum of the date and time
            represented by this instance and the number of quarters represented
            by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTime"/> is less than
            <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.AddWeekdays(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number
            of weekdays to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="value">
            A number of whole and fractional weekdays. The
            <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> whose value is the sum of the date and time
            represented by this instance and the number of weekdays represented
            by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTime"/> is less than
            <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.AddWeeks(System.DateTime,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number
            of weeks to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="value">
            A number of whole and fractional weeks. The <paramref name="value"/>
            parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> whose value is the sum of the date and time
            represented by this instance and the number of weeks represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTime"/> is less than
            <see cref="F:System.DateTime.MinValue"/> or greater than <see cref="F:System.DateTime.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.Between(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the
            current <see cref="T:System.DateTime"/> instance is between the start and end indicated.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="start">The starting <see cref="T:System.DateTime"/>.</param>
            <param name="end">The ending <see cref="T:System.DateTime"/>.</param>
            <returns>
            <see langword="true"/> if the current instance is between
            <paramref name="start"/> and <paramref name="end"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.Between(System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the
            current <see cref="T:System.DateTime"/> instance is between the start and end indicated.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="start">The starting <see cref="T:System.DateTime"/>.</param>
            <param name="end">The ending <see cref="T:System.DateTime"/>.</param>
            <param name="includeTime">
            <see langword="true"/> to compare the time portion of the date;
            otherwise, <see langword="false"/>.
            </param>
            <returns>
            <see langword="true"/> if the current instance is between
            <paramref name="start"/> and <paramref name="end"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.DaysInMonth(System.DateTime)">
            <summary>
            Returns the number of days in the month for the date represented by
            this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            The number of days in the month for the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.Elapsed(System.DateTime)">
            <summary>
            Returns the elapsed time between the date represented by this
            instance and the current date and time.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.TimeSpan"/> representing the elapsed time between the
            date represented by this instance and the current date and time.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.Elapsed(System.DateTime,System.DateTime)">
            <summary>
            Returns the elapsed time between the date represented by this
            instance and the given date and time.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="startDate">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.TimeSpan"/> representing the elapsed time between the
            date represented by this instance and the current date and time.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfMonth(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the first day of the
            month for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the first day of the month for
            the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfNextQuarter(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the first day of
            the next quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTime"/> which represents the first day of the next
            quarter of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfQuarter(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the first day of
            the quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTime"/> which represents the first day of the
            quarter of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfWeek(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the first day of
            the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTime"/> which represents the first day of the week
            of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the first day of
            the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="startOfWeek">
            An enumeration value that represents the first day of the week.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> which represents the first day of the week
            of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.FirstDayOfYear(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the first day of the
            year for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the first day of the year for
            the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetAbbreviatedMonthName(System.DateTime)">
            <summary>
            Returns the culture-specific abbreviated name of the month
            represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            The culture-specific abbreviated name of the month represented by
            this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetAbbreviatedMonthNames">
            <summary>
            Returns the culture-specific abbreviated names of the months.
            </summary>
            <returns>
            A list that contains the culture-specific abbreviated names of the months.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the day of the week
            from the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="day">
            An enumeration value that represents the day of the week for which
            the date is to be calculated.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the day of the week from the
            date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetDayOfWeek(System.DateTime,System.DayOfWeek,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the day of the week
            from the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="day">
            An enumeration value that represents the day of the week for which
            the date is to be calculated.
            </param>
            <param name="startOfWeek">
            An enumeration value that represents the first day of the week.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the day of the week from the
            date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetMonthName(System.DateTime)">
            <summary>
            Returns the culture-specific name of the month represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            The culture-specific name of the month represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetMonthNames">
            <summary>
            Returns the culture-specific names of the months.
            </summary>
            <returns>
            A list that contains the culture-specific names of the months.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetMonthNumber(System.String,System.Boolean)">
            <summary>
            Returns the month number for the given month name.
            </summary>
            <param name="name">The month name.</param>
            <param name="abbreviated">
            <see langword="true"/> if the name is abbreviated; otherwise, <see langword="false"/>.
            </param>
            <returns>The month number for the given month name.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetWeekOfYear(System.DateTime)">
            <summary>
            Returns the week of the year that includes the date in the specified
            DateTime value.
            </summary>
            <param name="time">A date and time value.</param>
            <returns>
            A positive integer that represents the week of the year that
            includes the date in the <paramref name="time"/> parameter.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule)">
            <summary>
            Returns the week of the year that includes the date in the specified
            DateTime value.
            </summary>
            <param name="time">A date and time value.</param>
            <param name="rule">
            An enumeration value that defines a calendar week.
            </param>
            <returns>
            A positive integer that represents the week of the year that
            includes the date in the <paramref name="time"/> parameter.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
            Returns the week of the year that includes the date in the specified
            DateTime value.
            </summary>
            <param name="time">A date and time value.</param>
            <param name="rule">
            An enumeration value that defines a calendar week.
            </param>
            <param name="firstDayOfWeek">
            An enumeration value that represents the first day of the week.
            </param>
            <returns>
            A positive integer that represents the week of the year that
            includes the date in the <paramref name="time"/> parameter.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsLeapDay(System.DateTime)">
            <summary>
            Determines whether the specified date is a leap day.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a leap day;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsLeapMonth(System.DateTime)">
            <summary>
            Determines whether the specified date is a leap month.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a leap month;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsLeapYear(System.DateTime)">
            <summary>
            Determines whether the specified date is a leap year.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a leap year;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsUtcDateTime(System.DateTime)">
            <summary>
            Determines whether he specified date is a UTC date.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a UTC date;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsWeekday(System.DateTime)">
            <summary>
            Determines whether the specified date is a week day.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a week day;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            Determines whether the specified date is a weekend.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a weekend;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.Last(System.DateTime,System.DayOfWeek)">
            <summary>
            Return a <see cref="T:System.DateTime"/> representing the previous day of the week.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="day">
            The <see cref="T:System.DayOfWeek"/> whose <see cref="T:System.DateTime"/>
            representation should be returned.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the previous day of the week.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the last day of the
            month for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the last day of the month for
            the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.LastDayOfQuarter(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the last day of
            the quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTime"/> which represents the last day of the
            quarter of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.LastDayOfWeek(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the last day of
            the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTime"/> which represents the last day of the week
            of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> which represents the last day of
            the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="firstDayOfWeek">
            An enumeration value that represents the first day of the week.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> which represents the last day of the week
            of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.LastDayOfYear(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the last day of the
            year for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the last day of the year for
            the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.Next(System.DateTime,System.DayOfWeek)">
            <summary>
            Return a <see cref="T:System.DateTime"/> representing the next day of the week.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <param name="day">
            The <see cref="T:System.DayOfWeek"/> whose <see cref="T:System.DateTime"/>
            representation should be returned.
            </param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the next day of the week.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.Quarter(System.DateTime)">
            <summary>
            Returns the quarter component of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            The quarter component of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.ToDateTime(System.Double)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> equivalent to the specified serial date.
            </summary>
            <param name="serialDateValue">A serial date value.</param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the same date and time as <paramref name="serialDateValue"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.Tomorrow(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the day after the date
            represented by this instance.
            </summary>
            <param name="value">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the day after the date
            represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.ToRelativeDateString(System.DateTime)">
            <summary>
            Convert a <see cref="T:System.DateTime"/> object to a relative date (e.g.,
            Today, tomorrow, yesterday) string format.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> object to convert.</param>
            <returns>A relative date/time formatted string.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.ToRelativeDateString(System.DateTime,Cadru.Text.RelativeDateFormatting)">
            <summary>
            Convert a <see cref="T:System.DateTime"/> object to a relative date (e.g.,
            Today, tomorrow, yesterday) string format.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> object to convert.</param>
            <param name="options">
            One of the <see cref="T:Cadru.Text.RelativeDateFormatting"/> values.
            </param>
            <returns>A relative date/time formatted string.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.ToRelativeTimeString(System.DateTime)">
            <summary>
            Convert a <see cref="T:System.DateTime"/> object to a relative time (e.g.,
            now, 2 days ago, 3 days from now) string format.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> object to convert.</param>
            <returns>A relative date/time formatted string.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.ToRelativeTimeString(System.DateTime,System.DateTime)">
            <summary>
            Convert a <see cref="T:System.DateTime"/> object to a relative time (e.g.,
            now, 2 days ago, 3 days from now) string format.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> object to convert.</param>
            <param name="baseDate">
            The <see cref="T:System.DateTime"/> object to use as the relative date.
            </param>
            <returns>A relative date/time formatted string.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.TryParseFromSerialDate(System.Double,System.DateTime@)">
            <summary>
            Converts the specified floating-point number into its
            <see cref="T:System.DateTime"/> equivalent and returns a value that indicates
            whether the conversion succeeded.
            </summary>
            <param name="d"></param>
            <param name="result">
            When this method returns, contains the <see cref="T:System.DateTime"/> value
            equivalent to the date and time contained in <paramref name="d"/>,
            if the conversion succeeded, or <see cref="F:System.DateTime.MinValue"/> if
            the conversion failed. The conversion fails if does not contain a
            valid floating-point representation of a date and time. This
            parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the s parameter was converted
            successfully; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            <para>
            The d parameter is a double-precision floating-point number that
            represents a date as the number of days before or after the base
            date, midnight, 30 December 1899. The sign and integral part of d
            encode the date as a positive or negative day displacement from 30
            December 1899, and the absolute value of the fractional part of d
            encodes the time of day as a fraction of a day displacement from
            midnight. d must be a value between negative 657435.0 through
            positive 2958465.99999999.
            </para>
            <para>
            Note that because of the way dates are encoded, there are two ways
            of representing any time of day on 30 December 1899. For example,
            -0.5 and 0.5 both mean noon on 30 December 1899 because a day
            displacement of plus or minus zero days from the base date is still
            the base date, and a half day displacement from midnight is noon.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.DateTimeExtensions.Yesterday(System.DateTime)">
            <summary>
            Returns a <see cref="T:System.DateTime"/> representing the day before the
            date represented by this instance.
            </summary>
            <param name="value">A valid <see cref="T:System.DateTime"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTime"/> representing the day before the date
            represented by this instance.
            </returns>
        </member>
        <member name="T:Cadru.Extensions.DateTimeOffsetExtensions">
            <summary>
            Provides basic routines for common DateTimeOffset manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.AddQuarters(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> that adds the specified
            number of quarters to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="value">
            A number of whole and fractional quarters. The
            <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> whose value is the sum of the date
            and time represented by this instance and the number of quarters
            represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTimeOffset"/> is less than
            <see cref="F:System.DateTimeOffset.MinValue"/> or greater than <see cref="F:System.DateTimeOffset.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.AddWeekdays(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> that adds the specified
            number of weekdays to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="value">
            A number of whole and fractional weekdays. The
            <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> whose value is the sum of the date
            and time represented by this instance and the number of weekdays
            represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTimeOffset"/> is less than
            <see cref="F:System.DateTimeOffset.MinValue"/> or greater than <see cref="F:System.DateTimeOffset.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.AddWeeks(System.DateTimeOffset,System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTimeOffset"/> that adds the specified
            number of weeks to the value of this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="value">
            A number of whole and fractional weeks. The <paramref name="value"/>
            parameter can be negative or positive.
            </param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> whose value is the sum of the date
            and time represented by this instance and the number of weeks
            represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:System.DateTimeOffset"/> is less than
            <see cref="F:System.DateTimeOffset.MinValue"/> or greater than <see cref="F:System.DateTimeOffset.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.Between(System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the
            current <see cref="T:System.DateTimeOffset"/> instance is between the start
            and end indicated.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="start">The starting <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="end">The ending <see cref="T:System.DateTimeOffset"/>.</param>
            <returns>
            <see langword="true"/> if the current instance is between
            <paramref name="start"/> and <paramref name="end"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.Between(System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the
            current <see cref="T:System.DateTimeOffset"/> instance is between the start
            and end indicated.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="start">The starting <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="end">The ending <see cref="T:System.DateTimeOffset"/>.</param>
            <param name="includeTime">
            <see langword="true"/> to compare the time portion of the date;
            otherwise, <see langword="false"/>.
            </param>
            <returns>
            <see langword="true"/> if the current instance is between
            <paramref name="start"/> and <paramref name="end"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.DaysInMonth(System.DateTimeOffset)">
            <summary>
            Returns the number of days in the month for the date represented by
            this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            The number of days in the month for the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.Elapsed(System.DateTimeOffset)">
            <summary>
            Returns the elapsed time between the date represented by this
            instance and the current date and time.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.TimeSpan"/> representing the elapsed time between the
            date represented by this instance and the current date and time.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.Elapsed(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Returns the elapsed time between the date represented by this
            instance and the given date and time.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="startDate">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.TimeSpan"/> representing the elapsed time between the
            date represented by this instance and the current date and time.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfMonth(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the first day of
            the month for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> representing the first day of the
            month for the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfNextQuarter(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the first
            day of the next quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> which represents the first day of the
            next quarter of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfQuarter(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the first
            day of the quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> which represents the first day of the
            quarter of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfWeek(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the first
            day of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> which represents the first day of the
            week of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfWeek(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the first
            day of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="startOfWeek">
            An enumeration value that represents the first day of the week.
            </param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> which represents the first day of the
            week of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.FirstDayOfYear(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the first day of
            the year for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> representing the first day of the
            year for the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetAbbreviatedMonthName(System.DateTimeOffset)">
            <summary>
            Returns the culture-specific abbreviated name of the month
            represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            The culture-specific abbreviated name of the month represented by
            this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetAbbreviatedMonthNames">
            <summary>
            Returns the culture-specific abbreviated names of the months.
            </summary>
            <returns>
            A list that contains the culture-specific abbreviated names of the months.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetDayOfWeek(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the day of the
            week from the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="day">
            An enumeration value that represents the day of the week for which
            the date is to be calculated.
            </param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> representing the day of the week from
            the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetDayOfWeek(System.DateTimeOffset,System.DayOfWeek,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the day of the
            week from the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="day">
            An enumeration value that represents the day of the week for which
            the date is to be calculated.
            </param>
            <param name="startOfWeek">
            An enumeration value that represents the first day of the week.
            </param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> representing the day of the week from
            the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetMonthName(System.DateTimeOffset)">
            <summary>
            Returns the culture-specific name of the month represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            The culture-specific name of the month represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetMonthNames">
            <summary>
            Returns the culture-specific names of the months.
            </summary>
            <returns>
            A list that contains the culture-specific names of the months.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetMonthNumber(System.String,System.Boolean)">
            <summary>
            Returns the month number for the given month name.
            </summary>
            <param name="name">The month name.</param>
            <param name="abbreviated">
            <see langword="true"/> if the name is abbreviated; otherwise, <see langword="false"/>.
            </param>
            <returns>The month number for the given month name.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetWeekOfYear(System.DateTimeOffset)">
            <summary>
            Returns the week of the year that includes the date in the specified
            DateTimeOffset value.
            </summary>
            <param name="time">A date and time value.</param>
            <returns>
            A positive integer that represents the week of the year that
            includes the date in the <paramref name="time"/> parameter.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetWeekOfYear(System.DateTimeOffset,System.Globalization.CalendarWeekRule)">
            <summary>
            Returns the week of the year that includes the date in the specified
            DateTimeOffset value.
            </summary>
            <param name="time">A date and time value.</param>
            <param name="rule">
            An enumeration value that defines a calendar week.
            </param>
            <returns>
            A positive integer that represents the week of the year that
            includes the date in the <paramref name="time"/> parameter.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.GetWeekOfYear(System.DateTimeOffset,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
            Returns the week of the year that includes the date in the specified
            DateTimeOffset value.
            </summary>
            <param name="time">A date and time value.</param>
            <param name="rule">
            An enumeration value that defines a calendar week.
            </param>
            <param name="firstDayOfWeek">
            An enumeration value that represents the first day of the week.
            </param>
            <returns>
            A positive integer that represents the week of the year that
            includes the date in the <paramref name="time"/> parameter.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsLeapDay(System.DateTimeOffset)">
            <summary>
            Determines whether the specified date is a leap day.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a leap day;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsLeapMonth(System.DateTimeOffset)">
            <summary>
            Determines whether the specified date is a leap month.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a leap month;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsLeapYear(System.DateTimeOffset)">
            <summary>
            Determines whether the specified date is a leap year.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a leap year;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsUtcDateTime(System.DateTimeOffset)">
            <summary>
            Determines whether he specified date is a UTC date.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a UTC date;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsWeekday(System.DateTimeOffset)">
            <summary>
            Determines whether the specified date is a week day.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a week day;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.IsWeekend(System.DateTimeOffset)">
            <summary>
            Determines whether the specified date is a weekend.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            <see langword="true"/> if the specified date is a weekend;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.Last(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Return a <see cref="T:System.DateTimeOffset"/> representing the previous day
            of the week.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="day">
            The <see cref="T:System.DayOfWeek"/> whose <see cref="T:System.DateTime"/>
            representation should be returned.
            </param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> representing the previous day of the week.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.LastDayOfMonth(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the last day of
            the month for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> representing the last day of the
            month for the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.LastDayOfQuarter(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the last day
            of the quarter of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> which represents the last day of the
            quarter of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.LastDayOfWeek(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the last day
            of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> which represents the last day of the
            week of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.LastDayOfWeek(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> which represents the last day
            of the week of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="firstDayOfWeek">
            An enumeration value that represents the first day of the week.
            </param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> which represents the last day of the
            week of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.LastDayOfYear(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the last day of
            the year for the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> representing the last day of the year
            for the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.Next(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Return a <see cref="T:System.DateTimeOffset"/> representing the next day of
            the week.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <param name="day">
            The <see cref="T:System.DayOfWeek"/> whose <see cref="T:System.DateTime"/>
            representation should be returned.
            </param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> representing the next day of the week.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.Quarter(System.DateTimeOffset)">
            <summary>
            Returns the quarter component of the date represented by this instance.
            </summary>
            <param name="date">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            The quarter component of the date represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.Tomorrow(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the day after
            the date represented by this instance.
            </summary>
            <param name="value">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> representing the day after the date
            represented by this instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.ToRelativeDateString(System.DateTimeOffset)">
            <summary>
            Convert a <see cref="T:System.DateTimeOffset"/> object to a relative date
            (e.g., Today, tomorrow, yesterday) string format.
            </summary>
            <param name="value">
            The <see cref="T:System.DateTimeOffset"/> object to convert.
            </param>
            <returns>A relative date/time formatted string.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.ToRelativeDateString(System.DateTimeOffset,Cadru.Text.RelativeDateFormatting)">
            <summary>
            Convert a <see cref="T:System.DateTimeOffset"/> object to a relative date
            (e.g., Today, tomorrow, yesterday) string format.
            </summary>
            <param name="value">
            The <see cref="T:System.DateTimeOffset"/> object to convert.
            </param>
            <param name="options">
            One of the <see cref="T:Cadru.Text.RelativeDateFormatting"/> values.
            </param>
            <returns>A relative date/time formatted string.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.ToRelativeTimeString(System.DateTimeOffset)">
            <summary>
            Convert a <see cref="T:System.DateTimeOffset"/> object to a relative time
            (e.g., now, 2 days ago, 3 days from now) string format.
            </summary>
            <param name="value">
            The <see cref="T:System.DateTimeOffset"/> object to convert.
            </param>
            <returns>A relative date/time formatted string.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.ToRelativeTimeString(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Convert a <see cref="T:System.DateTimeOffset"/> object to a relative time
            (e.g., now, 2 days ago, 3 days from now) string format.
            </summary>
            <param name="value">
            The <see cref="T:System.DateTimeOffset"/> object to convert.
            </param>
            <param name="baseDate">
            The <see cref="T:System.DateTimeOffset"/> object to use as the relative date.
            </param>
            <returns>A relative date/time formatted string.</returns>
        </member>
        <member name="M:Cadru.Extensions.DateTimeOffsetExtensions.Yesterday(System.DateTimeOffset)">
            <summary>
            Returns a <see cref="T:System.DateTimeOffset"/> representing the day before
            the date represented by this instance.
            </summary>
            <param name="value">A valid <see cref="T:System.DateTimeOffset"/> instance.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset"/> representing the day before the date
            represented by this instance.
            </returns>
        </member>
        <member name="T:Cadru.Extensions.DictionaryExtensions">
            <summary>
            Provides basic routines for common dictionary manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.DictionaryExtensions.Add``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{System.Boolean})">
            <summary>
            Gets or sets the value associated with the specified key if the
            condition is <see langword="true"/>.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="key">The key of the value to get or set.</param>
            <param name="value">The value associated with the specified key.</param>
            <param name="condition">
            <see langword="true"/> to add or update the value; otherwise, <see langword="false"/>.
            </param>
            <returns>
            The updated <see cref="T:System.Collections.Generic.IDictionary`2"/> instance.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key or the provided
            default value if the key is not found.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">
            The default value to be returned if key is not found.
            </param>
            <returns>
            If <paramref name="key"/> is found, the value associated with the
            specified key; otherwise, <paramref name="defaultValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DictionaryExtensions.GetValueOrDefault``1(System.Collections.IDictionary,System.Object,``0)">
            <summary>
            Gets the value associated with the specified key or the provided
            default value if the key is not found.
            </summary>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">
            The default value to be returned if key is not found.
            </param>
            <returns>
            If <paramref name="key"/> is found, the value associated with the
            specified key; otherwise, <paramref name="defaultValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DictionaryExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Boolean)">
            <summary>
            Merges the specified key/value pair into the source dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">
            The value of the element to add. It can be <see langword="null"/>.
            </param>
            <param name="replaceExisting">
            <see langword="true"/> to replace the existing value, if found;
            otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:Cadru.Extensions.DictionaryExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Boolean)">
            <summary>
            Merges the specified instance into the source dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="first">The source <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <param name="second">
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements will be merged.
            </param>
            <param name="replaceExisting">
            <see langword="true"/> to replace the existing value, if found;
            otherwise, <see langword="false"/>.
            </param>
        </member>
        <member name="M:Cadru.Extensions.DictionaryExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Merges the specified instance into the source dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="first">The source <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <param name="second">
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements will be merged.
            </param>
        </member>
        <member name="M:Cadru.Extensions.DictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Attempts to add the specified key and value to the dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary"></param>
            <param name="key">The key of the element to add.</param>
            <param name="value">
            The value of the element to add. It can be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the key/value pair was added to the
            dictionary successfully; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Attempts to add the specified key and value to the dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary"></param>
            <param name="item">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to add.
            </param>
            <returns>
            <see langword="true"/> if the key/value pair was added to the
            dictionary successfully; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.DictionaryExtensions.TryGetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,``1@)">
            <summary>
            Gets the value associated with the specified key or the provided
            default value if the key is not found.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The source dictionary.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">
            The default value to be returned if key is not found.
            </param>
            <param name="value">
            When this method returns, contains the value associated with the
            specified key, if the <paramref name="key"/> is found; otherwise,
            <paramref name="defaultValue"/>. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the
            <see cref="T:System.Collections.Generic.Dictionary`2"/>
            contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.DictionaryExtensions.TryGetValueOrDefault``1(System.Collections.IDictionary,System.Object,``0,``0@)">
            <summary>
            Gets the value associated with the specified key or the provided
            default value if the key is not found.
            </summary>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The source dictionary.</param>
            <param name="key">The key of the value to get.</param>
            <param name="defaultValue">
            The default value to be returned if key is not found.
            </param>
            <param name="value">
            When this method returns, contains the value associated with the
            specified key, if the <paramref name="key"/> is found; otherwise,
            <paramref name="defaultValue"/>. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the
            <see cref="T:System.Collections.Generic.Dictionary`2"/>
            contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Cadru.Extensions.EnumerableExtensions">
            <summary>
            Provides basic routines for common sequence and collection manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.FindIndex(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>Finds the index of the first item matching an expression in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the first item matching an expression in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.FindIndex(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>Finds the index of the first matching string in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="value">The string to search for.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the values in the collection.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="action">
            The <see cref="T:System.Action`2"/> delegate to perform on each element
            of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </param>
            <remarks>
            The <see cref="T:System.Action`2"/> delegate receives the item and the
            index of the item.
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the values in the collection.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="action">
            The <see cref="T:System.Action`1"/> delegate to perform on each element of
            the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </param>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.IndexOf(System.Collections.IEnumerable,System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index
            of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="item">
            The object to locate. The value can be <see langword="null"/> for
            reference types.
            </param>
            <returns>
            The zero-based index of the first occurrence of item within the
            range of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>, if found;
            otherwise, -1.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.IndexOf(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
             <summary>
             Searches for the specified object and returns the zero-based index
             of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
             </summary>
             <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="predicate">The expression to test the items against.</param>
             <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Searches for the specified object and returns the zero-based index
            of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="item">
            The object to locate. The value can be <see langword="null"/> for
            reference types.
            </param>
            <returns>
            The zero-based index of the first occurrence of item within the
            range of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>, if found;
            otherwise, -1.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
             <summary>
             Searches for the specified object and returns the zero-based index
             of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
             </summary>
             <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="predicate">The expression to test the items against.</param>
             <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.IndexOf(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Searches for the specified string and returns the zero-based index
            of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="item">The object to locate. The value can be <see langword="null"/>.</param>
            <returns>
            The zero-based index of the first occurrence of item within the
            range of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>, if found;
            otherwise, -1.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines if the collection contains values.
            </summary>
            <param name="source">The collection to test.</param>
            <returns>
            <see langword="true"/> if the collection does not contain values;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.IsNull(System.Collections.IEnumerable)">
            <summary>
            Determines if the collection is <see langword="null"/>.
            </summary>
            <param name="source">The collection to test.</param>
            <returns>
            <see langword="true"/> if the collection is <see langword="null"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines if the collection is <see langword="null"/> or contains values.
            </summary>
            <param name="source">The collection to test.</param>
            <returns>
            <see langword="true"/> if the collection is <see langword="null"/>
            or does not contain values; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join(System.Collections.Generic.IList{System.String},System.String,System.Int32,System.Int32)">
            <summary>
            Concatenates the members of a collection, using the specified
            separator between each member.
            </summary>
            <param name="values">
            A collection that contains the strings to concatenate.
            </param>
            <param name="separator">
            The string to use as a separator. <paramref name="separator"/> is
            included in the returned string only if <paramref name="values"/>
            has more than one element.
            </param>
            <param name="startIndex">
            The first element in <paramref name="values"/> to use.
            </param>
            <param name="count">
            The number of elements of <paramref name="values"/> to use.
            </param>
            <returns>
            <para>
            A string that consists of the members of values delimited by the
            separator string.
            </para>
            <para>-or-</para>
            <para>
            <see cref="F:System.String.Empty"/> if <paramref name="count"/> is
            zero, <paramref name="values"/> has no elements, or
            <paramref name="separator"/> and all of the elements of
            <paramref name="values"/> are <see cref="F:System.String.Empty"/>.
            </para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            <paramref name="startIndex"/> or <paramref name="count"/> is less
            than 0.
            </para>
            <para>-or-</para>
            <para>
            <paramref name="startIndex"/> plus <paramref name="count"/> is
            greater than the number of elements in <paramref name="values"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join(System.Collections.Generic.IList{System.String},System.Int32,System.Int32)">
            <summary>
            Concatenates the members of a collection, using a comma (,) between
            each member.
            </summary>
            <param name="values">
            A collection that contains the strings to concatenate.
            </param>
            <param name="startIndex">
            The first element in <paramref name="values"/> to use.
            </param>
            <param name="count">
            The number of elements of <paramref name="values"/> to use.
            </param>
            <returns>
            <para>
            A string that consists of the members of values delimited by a comma (,).
            </para>
            <para>-or-</para>
            <para>
            <see cref="F:System.String.Empty"/> if <paramref name="count"/> is
            zero, <paramref name="values"/> has no elements, or all of the
            elements of <paramref name="values"/> are <see cref="F:System.String.Empty"/>.
            </para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            <paramref name="startIndex"/> or <paramref name="count"/> is less
            than 0.
            </para>
            <para>-or-</para>
            <para>
            <paramref name="startIndex"/> plus <paramref name="count"/> is
            greater than the number of elements in <paramref name="values"/>.
            </para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a collection, using a comma (,)
            separator between each member.
            </summary>
            <param name="values">
            A collection that contains the strings to concatenate.
            </param>
            <returns>
            A string that consists of the members of values delimited by a comma
            (,). If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified
            separator between each member.
            </summary>
            <param name="values">
            A collection that contains the strings to concatenate.
            </param>
            <param name="separator">
            The string to use as a separator. <paramref name="separator"/> is
            included in the returned string only if <paramref name="values"/>
            has more than one element.
            </param>
            <returns>
            A string that consists of the members of values delimited by the
            separator string. If <paramref name="values"/> has no members, the
            method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of a collection, using a comma (,)
            separator between each member.
            </summary>
            <typeparam name="T">The type of the members of <paramref name="values"/>.</typeparam>
            <param name="values">
            A collection that contains the objects to concatenate.
            </param>
            <returns>
            A string that consists of the members of values delimited by a comma
            (,). If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified
            separator between each member.
            </summary>
            <typeparam name="T">The type of the members of <paramref name="values"/>.</typeparam>
            <param name="values">
            A collection that contains the objects to concatenate.
            </param>
            <param name="separator">
            The string to use as a separator. <paramref name="separator"/> is
            included in the returned string only if <paramref name="values"/>
            has more than one element.
            </param>
            <returns>
            A string that consists of the members of values delimited by the
            separator string. If <paramref name="values"/> has no members, the
            method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="values"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Partitions the specified collection into a collection of smaller collections.
            </summary>
            <typeparam name="T">The type of the members of <paramref name="source"/>.</typeparam>
            <param name="source">
            A collection that contains the objects to partition.
            </param>
            <param name="size">The size of each partition.</param>
            <returns>
            A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing one or more
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> collections.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.RandomElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a pseudo-random element from the specified collection.
            </summary>
            <typeparam name="T">The type of the members of <paramref name="source"/>.</typeparam>
            <param name="source">
            A collection that contains the objects to segment.
            </param>
            <returns>A pseudo-random element from the specified collection.</returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.RandomElement``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Returns a pseudo-random element from the specified collection.
            </summary>
            <typeparam name="T">The type of the members of <paramref name="source"/>.</typeparam>
            <param name="source">
            A collection that contains the objects to segment.
            </param>
            <param name="random">A pseudo-random number generator.</param>
            <returns>A pseudo-random element from the specified collection.</returns>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns a segment of the specified collection.
            </summary>
            <typeparam name="T">The type of the members of <paramref name="source"/>.</typeparam>
            <param name="source">
            A collection that contains the objects to segment.
            </param>
            <param name="startIndex">The starting index of the collection.</param>
            <param name="endIndex">The ending index of the collection.</param>
            <returns>
            A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the segment of the
            specified collection.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="startIndex"/> must be less than or equal to <paramref name="endIndex"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate. Each element's
            index is used in the logic of the predicate function.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="condition">
            The condition used to determine if the sequence should be filtered.
            </param>
            <param name="predicate">
            A function to test each source element for a condition; the second
            parameter of the function represents the index of the source element.
            </param>
            <returns>
            If <paramref name="condition"/> is <see langword="true"/>, an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input
            sequence that satisfy the condition; otherwise, the original input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="condition">
            The condition used to determine if the sequence should be filtered.
            </param>
            <param name="predicate">
            A function to test each source element for a condition.
            </param>
            <returns>
            If <paramref name="condition"/> is <see langword="true"/>, an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input
            sequence that satisfy the condition; otherwise, the original input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="predicate"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.ElementAt(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <param name="source">
            An <see cref="T:System.Collections.IEnumerable"/> to return an element from.
            </param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <returns>
            The element at the specified position in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than or equal to
            the number of elements in <paramref name="source"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.EnumerableExtensions.ElementAtOrDefault(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence or
            <see langword="null"/> if the index is out of range.
            </summary>
            <param name="source">
            An <see cref="T:System.Collections.IEnumerable"/> to return an element from.
            </param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <returns>
            <see langword="null"/> if the index is outside the bounds of the
            source sequence; otherwise, the element at the specified position in
            the source sequence.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than or equal to
            the number of elements in <paramref name="source"/>.
            </exception>
        </member>
        <member name="T:Cadru.Extensions.EnumExtensions">
            <summary>
            Provides basic routines for common enumerated type manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.EnumExtensions.GetAttributeOfType``1(System.Enum,System.Boolean)">
            <summary>
            Gets an attribute of type <typeparamref name="T"/> on the provided
            enumerated value.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The member to inspect.</param>
            <param name="inherit">
            <see langword="true"/> to inspect the ancestors of element;
            otherwise, <see langword="false"/>.
            </param>
            <returns>
            A custom attribute that matches <typeparamref name="T"/>, or
            <see langword="null"/> if no such attribute is found.
            </returns>
            <remarks>
            If more than one attribute is found, the first match is returned.
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Gets the description of an <see cref="T:System.Enum"/> type value.
            </summary>
            <param name="value">The <see cref="T:System.Enum"/> type value.</param>
            <returns>
            A string containing the the description or the name of the
            enumerated constant if no description is found.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.EnumExtensions.GetDescription(System.Enum,System.Boolean)">
            <summary>
            Gets the description of an <see cref="T:System.Enum"/> type value.
            </summary>
            <param name="value">The <see cref="T:System.Enum"/> type value.</param>
            <param name="useNameAsFallback">
            If <see langword="true"/>, the name of the enumerated constant is
            used if no description is found; otherwise, <see langword="null"/>.
            </param>
            <returns>
            A string containing the the description. If no description is found
            and <paramref name="useNameAsFallback"/> is <see langword="true"/>
            then the name of the enumerated constant; otherwise <see langword="null"/>.
            </returns>
            <remarks>
            This method will use the value from an
            <see cref="T:Cadru.EnumDescriptionAttribute"/>,
            <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>, or
            <see cref="T:System.ComponentModel.DescriptionAttribute"/> if found, in that respective
            order. If none of those attributes are found, or the value is
            <see langword="null"/>, and <paramref name="useNameAsFallback"/> is
            <see langword="true"/>, then the name of the enumerated constant is
            used; otherwise, a <see langword="null"/> is used.
            </remarks>
        </member>
        <member name="T:Cadru.Extensions.NameValueCollectionExtensions">
            <summary>
            Provides extensions for working with <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.NameValueCollectionExtensions.GetKeyIndex(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>Finds the index of the first matching string in a collection.</summary>
            <param name="nameValueCollection">The collection to search.</param>
            <param name="key">The key to search for.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="T:Cadru.Extensions.NullExtensions">
            <summary>
            Provides basic routines for determining if an instance is <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.NullExtensions.IsNotNull``1(``0)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="source"/> is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the instance to test.</typeparam>
            <param name="source">The source instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="source"/> is not
            <see langword="null"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NullExtensions.IsNull``1(``0)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="source"/> is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the instance to test.</typeparam>
            <param name="source">The source instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="source"/> is
            <see langword="null"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NullExtensions.IsNullOrEmpty(System.Nullable{System.Guid})">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="source"/> is not <see langword="null"/> or <see cref="F:System.Guid.Empty"/>.
            </summary>
            <param name="source">The source instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="source"/> is not
            <see langword="null"/> or <see cref="F:System.Guid.Empty"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Cadru.Extensions.NumericExtensions">
            <summary>
            Provides basic routines for common numeric manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any byte value.</param>
            <param name="min">The minimum byte value.</param>
            <param name="max">The maximum byte value.</param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Byte,System.Byte,System.Byte,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any byte value.</param>
            <param name="min">The minimum byte value.</param>
            <param name="max">The maximum byte value.</param>
            <param name="options">
            A bitwise combination of enumeration values that defines whether the
            comparison is inclusive.
            </param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any decimal value.</param>
            <param name="min">The minimum decimal value.</param>
            <param name="max">The maximum decimal value.</param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Decimal,System.Decimal,System.Decimal,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any decimal value.</param>
            <param name="min">The minimum decimal value.</param>
            <param name="max">The maximum decimal value.</param>
            <param name="options">
            A bitwise combination of enumeration values that defines whether the
            comparison is inclusive.
            </param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Double,System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any double value.</param>
            <param name="min">The minimum double value.</param>
            <param name="max">The maximum double value.</param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Double,System.Double,System.Double,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any double value.</param>
            <param name="min">The minimum double value.</param>
            <param name="max">The maximum double value.</param>
            <param name="options">
            A bitwise combination of enumeration values that defines whether the
            comparison is inclusive.
            </param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int16,System.Int16,System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any short value.</param>
            <param name="min">The minimum short value.</param>
            <param name="max">The maximum short value.</param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int16,System.Int16,System.Int16,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any short value.</param>
            <param name="min">The minimum short value.</param>
            <param name="max">The maximum short value.</param>
            <param name="options">
            A bitwise combination of enumeration values that defines whether the
            comparison is inclusive.
            </param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any integer value.</param>
            <param name="min">The minimum integer value.</param>
            <param name="max">The maximum integer value.</param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int32,System.Int32,System.Int32,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any integer value.</param>
            <param name="min">The minimum integer value.</param>
            <param name="max">The maximum integer value.</param>
            <param name="options">
            A bitwise combination of enumeration values that defines whether the
            comparison is inclusive.
            </param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any long value.</param>
            <param name="min">The minimum long value.</param>
            <param name="max">The maximum long value.</param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Int64,System.Int64,System.Int64,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any long value.</param>
            <param name="min">The minimum long value.</param>
            <param name="max">The maximum long value.</param>
            <param name="options">
            A bitwise combination of enumeration values that defines whether the
            comparison is inclusive.
            </param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Single,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any single value.</param>
            <param name="min">The minimum single value.</param>
            <param name="max">The maximum single value.</param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.Between(System.Single,System.Single,System.Single,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is between the minimum and maximum indicated.
            </summary>
            <param name="expression">Any single value.</param>
            <param name="min">The minimum single value.</param>
            <param name="max">The maximum single value.</param>
            <param name="options">
            A bitwise combination of enumeration values that defines whether the
            comparison is inclusive.
            </param>
            <returns>
            Between returns <see langword="true"/> if
            <paramref name="expression"/> is greater than the minimum value but
            less than the maximum value; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Byte,System.Byte)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Decimal,System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Int16,System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than the minimum indicated; otherwise <see clangwordref="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Int64,System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThan(System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Byte,System.Byte)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Decimal,System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">Any decimal value.</param>
            <param name="min">The minimum decimal value.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Int16,System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Int64,System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.GreaterThanOrEqualTo(System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is greater
            than or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Int32)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an even number.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an even
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an even
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an even
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an even
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an even
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsEven(System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an even number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an even
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Int32)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an odd number.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an odd
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an odd
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an odd
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an odd
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an odd
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.IsOdd(System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is an odd number.
            </summary>
            <param name="expression">The value to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is an odd
            number; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Byte,System.Byte)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Decimal,System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Int16,System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Int64,System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThan(System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Byte,System.Byte)">
            <overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the minimum indicated.
            </summary>
            </overloads>
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Decimal,System.Decimal)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the minimum indicated.
            </summary>
            <param name="expression">Any decimal value.</param>
            <param name="min">The minimum decimal value.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Double,System.Double)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Int16,System.Int16)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Int64,System.Int64)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.NumericExtensions.LessThanOrEqualTo(System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> is less than or equal to the minimum indicated.
            </summary>
            <param name="expression">The value to test.</param>
            <param name="min">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if <paramref name="expression"/> is less than
            or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Cadru.Extensions.StringBuilderExtensions">
            <summary>
            Provides basic routines for common <see cref="T:System.Text.StringBuilder"/> manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendAsHexadecimal(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the hexadecimal string representation of a specified
            <see cref="T:System.Int32"/> value to this instance.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="value">The <see cref="T:System.Int32"/> value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendAsHexadecimal(System.Text.StringBuilder,System.Int16)">
            <summary>
            Appends the hexadecimal string representation of a specified
            <see cref="T:System.Int16"/> value to this instance.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="value">The <see cref="T:System.Int16"/> value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendAsHexadecimal(System.Text.StringBuilder,System.Byte)">
            <summary>
            Appends the hexadecimal string representation of a specified
            <see cref="T:System.Byte"/> value to this instance.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="value">The <see cref="T:System.Byte"/> value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendAsHexadecimal(System.Text.StringBuilder,System.Byte[])">
            <summary>
            Appends the hexadecimal string representation of a specified
            <see cref="T:System.Byte"/> array to this instance.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="values">The <see cref="T:System.Byte"/> array to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatIf(System.Text.StringBuilder,System.Boolean,System.String,System.Object[])">
            <overloads>
            <summary>
            Appends the string returned by processing a composite format string,
            which contains zero or more format items, followed by the default
            line terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            </overloads>
            <summary>
            Appends the string returned by processing a composite format string,
            which contains zero or more format items, followed by the default
            line terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="format"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>
            A reference to <paramref name="source"/> with
            <paramref name="format"/> appended. Each format item in
            <paramref name="format"/> is replaced by the string representation
            of the corresponding object argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>
            The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatIf(System.Text.StringBuilder,System.Boolean,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string,
            which contains zero or more format items, followed by the default
            line terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>. Each format
            item is replaced by the string representation of a corresponding
            argument in a parameter array using a specified format provider.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="format"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>
            A reference to <paramref name="source"/> with
            <paramref name="format"/> appended, if <paramref name="condition"/>
            is <see langword="true"/>. Each format item in
            <paramref name="format"/> is replaced by the string representation
            of the corresponding object argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>
            The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object[])">
            <overoads>
            <summary>
            Appends the string returned by processing a composite format string,
            which contains zero or more format items, followed by the default
            line terminator to the end of this instance.
            </summary>
            </overoads>
            <summary>
            Appends the string returned by processing a composite format string,
            which contains zero or more format items, followed by the default
            line terminator to the end of this instance.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>
            A reference to <paramref name="source"/> with
            <paramref name="format"/> appended. Each format item in
            <paramref name="format"/> is replaced by the string representation
            of the corresponding object argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>
            The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatLine(System.Text.StringBuilder,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string,
            which contains zero or more format items, followed by the default
            line terminator to the end of this instance. Each format item is
            replaced by the string representation of a corresponding argument in
            a parameter array using a specified format provider.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>
            A reference to <paramref name="source"/> with
            <paramref name="format"/> appended. Each format item in
            <paramref name="format"/> is replaced by the string representation
            of the corresponding object argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>
            The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatLineIf(System.Text.StringBuilder,System.Boolean,System.String,System.Object[])">
            <overloads>
            <summary>
            Appends the string returned by processing a composite format string,
            which contains zero or more format items, followed by the default
            line terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            </overloads>
            <summary>
            Appends the string returned by processing a composite format string,
            which contains zero or more format items, followed by the default
            line terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="format"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>
            A reference to <paramref name="source"/> with
            <paramref name="format"/> appended. Each format item in
            <paramref name="format"/> is replaced by the string representation
            of the corresponding object argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>
            The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendFormatLineIf(System.Text.StringBuilder,System.Boolean,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Appends the string returned by processing a composite format string,
            which contains zero or more format items, followed by the default
            line terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>. Each format
            item is replaced by the string representation of a corresponding
            argument in a parameter array using a specified format provider.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="format"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information.
            </param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to format.</param>
            <returns>
            A reference to <paramref name="source"/> with
            <paramref name="format"/> appended. Each format item in
            <paramref name="format"/> is replaced by the string representation
            of the corresponding object argument.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> or <paramref name="args"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            <para><paramref name="format"/> is invalid.</para>
            <para>-or-</para>
            <para>
            The index of a format item is less than 0 (zero), or greater than or
            equal to the length of the args array.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <overloads>
            <summary>
            Appends the string representation of a specified object to this instance.
            </summary>
            </overloads>
            <summary>
            Appends the string representation of a specified
            <see cref="T:System.Boolean"/> value to this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The <see cref="T:System.Boolean"/> value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Byte)">
            <summary>
            Appends the string representation of a specified 8-bit unsigned
            integer to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Char)">
            <summary>
            Appends the string representation of a specified Unicode character
            to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The Unicode character to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Char[])">
            <summary>
            Appends the string representation of Unicode characters in a
            specified array to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The array of characters to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Double)">
            <summary>
            Appends the string representation of a specified double-precision
            floating-point number to this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Single)">
            <summary>
            Appends the string representation of a specified single-precision
            floating-point number to this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Int32)">
            <summary>
            Appends the string representation of a specified 32-bit signed
            integer to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Int64)">
            <summary>
            Appends the string representation of a specified 64-bit signed
            integer to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Object)">
            <summary>
            Appends the string representation of a specified object to this
            instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.SByte)">
            <summary>
            Appends the string representation of a specified 8-bit signed
            integer to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Int16)">
            <summary>
            Appends the string representation of a specified 16-bit signed
            integer to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.String)">
            <summary>
            Appends the string representation of the specified 8-bit unsigned
            integer to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The string to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.UInt32)">
            <summary>
            Appends the string representation of a specified 32-bit unsigned
            integer to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.UInt64)">
            <summary>
            Appends the string representation of a specified 64-bit unsigned
            integer to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.UInt16)">
            <summary>
            Appends the string representation of a specified 16-bit unsigned
            integer to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The value to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Char,System.Int32)">
            <summary>
            Appends a specified number of copies of the string representation of
            a Unicode character to this instance if <paramref name="condition"/>
            is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The character to append.</param>
            <param name="repeatCount">The number of times to append <paramref name="value"/>.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="repeatCount"/> is less than zero.</para>
            <para>-or-</para>
            <para>Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.</para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">Out of memory.</exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Char[],System.Int32,System.Int32)">
            <summary>
            Appends the string representation of a specified subarray of Unicode
            characters to this instance if <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">A character array.</param>
            <param name="startIndex">The starting position in <paramref name="value"/>.</param>
            <param name="charCount">The number of characters to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>, and
            <paramref name="startIndex"/> and <paramref name="charCount"/> are
            not zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="charCount"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> is less than zero.</para>
            <para>-or-</para>
            <para>
            <paramref name="startIndex"/> + <paramref name="charCount"/> is
            greater than the length of <paramref name="value"/>.
            </para>
            <para>-or-</para>
            <para>Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Appends a copy of a specified substring to this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> instance.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The string that contains the substring to append.</param>
            <param name="startIndex">
            The starting position of the substring within <paramref name="value"/>.
            </param>
            <param name="count">
            The number of characters in <paramref name="value"/> to append.
            </param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <see langword="null"/>, and
            <paramref name="startIndex"/> and <paramref name="count"/> are not zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="count"/> is less than zero.</para>
            <para>-or-</para>
            <para><paramref name="startIndex"/> is less than zero.</para>
            <para>-or-</para>
            <para>
            <paramref name="startIndex"/> + <paramref name="count"/> is greater
            than the length of <paramref name="value"/>.
            </para>
            <para>-or-</para>
            <para>Enlarging the value of this instance would exceed <see cref="p:StringBuilder.MaxCapacity"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendLineIf(System.Text.StringBuilder,System.Boolean)">
            <overloads>
            <summary>
            Appends the default line terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            </overloads>
            <summary>
            Appends the default line terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="condition">
            <see langword="true"/> to append the default line terminator;
            otherwise, <see langword="false"/>.
            </param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendLineIf(System.Text.StringBuilder,System.Boolean,System.String)">
            <summary>
            Appends a copy of the specified string followed by the default line
            terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="value"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="value">The string to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendLines(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends a copy of each of the specified strings followed by the
            default line terminator to the end of this instance.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="values">The strings to append.</param>
            <returns>
            A reference to this instance after the append operation has completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringBuilderExtensions.AppendLinesIf(System.Text.StringBuilder,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends a copy of each of the specified strings followed by the
            default line terminator to the end of this instance if
            <paramref name="condition"/> is <see langword="true"/>.
            </summary>
            <param name="source">The source <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="condition">
            <see langword="true"/> to append <paramref name="values"/>;
            otherwise, <see langword="false"/>.
            </param>
            <param name="values">The strings to append.</param>
            <returns>
            A reference to this instance after the append operation has,
            optionally, completed.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the expanded string would exceed <see cref="p:StringBuilder.MaxCapacity"/>.
            </exception>
        </member>
        <member name="T:Cadru.Extensions.StringExtensions">
            <summary>
            Provides basic routines for common string manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Clean(System.String)">
            <summary>
            Returns a new string whose textual value is the normalized form of <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to normalize.</param>
            <returns>A new, normalized string.</returns>
            <remarks>
            <para>
            The <see cref="M:Cadru.Extensions.StringExtensions.Clean(System.String)"/> method removes all occurrences of
            white space and control characters from the beginning and end of the
            given string as well as collapsing all internal white space
            characters to a single white space character.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Clean(System.String,Cadru.Text.NormalizationOptions)">
            <summary>
            Returns a new string whose textual value is the normalized form of <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to normalize.</param>
            <param name="options">
            One of the <see cref="T:Cadru.Text.NormalizationOptions"/> values.
            </param>
            <returns>A new, normalized string.</returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether the specified
            <see cref="T:System.String"/> object occurs within this string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">
            One of the enumeration values that specifies how the strings will be compared.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="value"/> parameter
            occurs within this string, or if <paramref name="value"/> is the
            empty string (""); otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.EndsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the end of this string instance matches any of
            the specified strings.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="values">A collection of string instances.</param>
            <returns>
            <see langword="true"/> if the end of this string instance matches
            any of the specified strings; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.EndsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            Determines whether the end of this string instance matches any of
            the specified strings.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="values">A collection of string instances.</param>
            <param name="comparisonType">
            One of the enumeration values that specifies the rules for the comparison.
            </param>
            <returns>
            <see langword="true"/> if the end of this string instance matches
            any of the specified strings; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.EqualsAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether this string instance is equal to any of the
            specified strings.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="values">A collection of string instances.</param>
            <returns>
            <see langword="true"/> if the string instance is equal to any of the
            specified strings; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.EqualsAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            Determines whether this string instance is equal to any of the
            specified strings.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="values">A collection of string instances.</param>
            <param name="comparisonType">
            One of the enumeration values that specifies the rules for the comparison.
            </param>
            <returns>
            <see langword="true"/> if the string instance is equal to any of the
            specified strings; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified System.String with the text
            equivalent of the value of a corresponding System.Object instance in
            a specified array.
            </summary>
            <param name="instance">A string to format.</param>
            <param name="args">
            An System.Object array containing zero or more objects to format.
            </param>
            <returns>
            A copy of format in which the format items have been replaced by the
            System.String equivalent of the corresponding instances of
            System.Object in args.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.Char,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the specified
            character in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The character to seek.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>
            The index position of <paramref name="value"/> if that character is
            found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the specified
            string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>
            The index position of <paramref name="value"/> if that string is
            found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the specified
            character in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>
            The index position of <paramref name="value"/> if that character is
            found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the specified
            string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>
            The index position of <paramref name="value"/> if that string is
            found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the nth occurrence of the specified
            string in <paramref name="source"/> using the specified string comparison.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="occurrence">The occurrence to find.</param>
            <param name="comparisonType">
            One of the <see cref="T:System.StringComparison"/> values.
            </param>
            <returns>
            The index position of <paramref name="value"/> if that string is
            found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparisonType"/> is not a valid
            <see cref="T:System.StringComparison"/> System.StringComparison value.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.Char,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the specified
            string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>
            The index position of <paramref name="value"/> if that string is
            found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the nth occurrence of the specified
            string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="occurrence">The occurrence to find.</param>
            <returns>
            The index position of <paramref name="value"/> if that string is
            found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the nth occurrence of the specified
            string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="occurrence">The occurrence to find.</param>
            <param name="comparisonType">
            One of the <see cref="T:System.StringComparison"/> values.
            </param>
            <returns>
            The index position of <paramref name="value"/> if that string is
            found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IndexOfOccurrence(System.String,System.String,System.Int32,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the nth occurrence of the specified
            string in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="occurrence">The occurrence to find.</param>
            <param name="comparisonType">
            One of the <see cref="T:System.StringComparison"/> values.
            </param>
            <returns>
            The index position of <paramref name="value"/> if that string is
            found, or -1 if it is not. If <paramref name="value"/> is
            <see cref="F:System.String.Empty">String.Empty</see>, the return value is 0.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="source"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para><paramref name="value"/> is <see langword="null"/>.</para>
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IsCaseInsensitiveEqual(System.String,System.String)">
            <summary>
            Determines whether this instance and another specified System.String
            object have the same value.
            </summary>
            <param name="instance">The string to check equality.</param>
            <param name="comparing">The comparing with string.</param>
            <returns>
            <c>true</c> if the value of the comparing parameter is the same as
            this string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IsCaseSensitiveEqual(System.String,System.String)">
            <summary>
            Determines whether this instance and another specified System.String
            object have the same value.
            </summary>
            <param name="instance">The string to check equality.</param>
            <param name="comparing">The comparing with string.</param>
            <returns>
            <c>true</c> if the value of the comparing parameter is the same as
            this string; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IsNotNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified string is not <see langword="null"/>
            or an <see cref="F:System.String.Empty"/> string.
            </summary>
            <param name="value">The string to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is not
            <see langword="null"/> or an <see cref="F:System.String.Empty"/> string ("");
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is not <see langword="null"/>,
            <see cref="F:System.String.Empty">empty</see>, or consists only of
            white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns>
            <see langword="true"/> if the <paramref name="value"/> parameter is
            not <see langword="null"/> null or
            <see cref="F:System.String.Empty">String.Empty</see>, or if
            <paramref name="value"/> does not consist exclusively of white-space characters.
            </returns>
            <remarks>
            White-space characters are defined by the Unicode standard. The
            <see cref="M:Cadru.Extensions.StringExtensions.IsNotNullOrWhiteSpace(System.String)"/> method interprets any character
            that returns a value of <see langword="true"/> when it is passed to
            the <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> method as a white-space character.
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified string is <see langword="null"/> or
            an <see cref="F:System.String.Empty"/> string.
            </summary>
            <param name="value">The string to test.</param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> is
            <see langword="null"/> or an <see cref="F:System.String.Empty"/> string ("");
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is <see langword="null"/>,
            <see cref="F:System.String.Empty">empty</see>, or consists only of
            white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns>
            <see langword="true"/> if the <paramref name="value"/> parameter is
            <see langword="null"/> null or
            <see cref="F:System.String.Empty">String.Empty</see>, or if
            <paramref name="value"/> consists exclusively of white-space characters.
            </returns>
            <remarks>
            White-space characters are defined by the Unicode standard. The
            <see cref="M:Cadru.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)"/> method interprets any character
            that returns a value of <see langword="true"/> when it is passed to
            the <see cref="M:System.Char.IsWhiteSpace(System.Char)"/> method as a white-space character.
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LastCharacter(System.String)">
            <summary>
            Returns the last character in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <returns>
            The last character in the string of the null character ('\0') if the
            string has a zero length.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.Char)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified character position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending character of a substring.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="value"/> in
            <paramref name="source"/>, or the entire string if
            <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.Char,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified string position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="value"/> in
            <paramref name="source"/>, or the entire string if
            <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified character position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="endingIndex">The index of the end of the substring.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at <paramref name="endingIndex"/> in <paramref name="source"/>, or
            the entire string if <paramref name="endingIndex"/> is not found in
            the string.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="endingIndex"/> is less than zero.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified character position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="endingIndex">The index of the end of the substring.</param>
            <param name="inclusive">
            Indicates if the substring should include the ending character position.
            </param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at <paramref name="endingIndex"/> in <paramref name="source"/>, or
            the entire string if <paramref name="endingIndex"/> is not found in
            the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.String)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified string position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="value"/> in
            <paramref name="source"/>, or the entire string if
            <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified string position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="value"/> in
            <paramref name="source"/>, or the entire string if
            <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LeftSubstring(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified string position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <param name="comparisonType">
            One of the <see cref="T:System.StringComparison"/> values.
            </param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="value"/> in
            <paramref name="source"/>, or the entire string if
            <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthBetween(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the
            length of <paramref name="source"/> is between the minimum and
            maximum indicated.
            </summary>
            <param name="source">Any string expression.</param>
            <param name="minimum">The minimum string length.</param>
            <param name="maximum">The maximum string length.</param>
            <returns>
            MinMax returns <see langword="true"/> if <paramref name="source"/>
            is greater than the minimum value but less than the maximum value;
            otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthBetween(System.String,System.Int32,System.Int32,Cadru.Text.NumericComparisonOptions)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the
            length of <paramref name="source"/> is between the minimum and
            maximum indicated.
            </summary>
            <param name="source">Any string expression.</param>
            <param name="minimum">The minimum string length.</param>
            <param name="maximum">The maximum string length.</param>
            <param name="options">
            A bitwise combination of enumeration values that defines whether the
            comparison is inclusive.
            </param>
            <returns>
            MinMax returns <see langword="true"/> if <paramref name="source"/>
            is greater than the minimum value but less than the maximum value;
            otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthGreaterThan(System.String,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the
            length of <paramref name="source"/> is greater than the minimum indicated.
            </summary>
            <param name="source">The value to test.</param>
            <param name="minimum">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if the length of <paramref name="source"/> is
            greater than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthGreaterThanOrEqualTo(System.String,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the
            length of <paramref name="source"/> is greater than or equal to the
            minimum indicated.
            </summary>
            <param name="source">The value to test.</param>
            <param name="minimum">The minimum value to compare against.</param>
            <returns>
            <see langword="true"/> if the length of <paramref name="source"/> is
            greater than or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthLessThan(System.String,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the
            length of <paramref name="source"/> is less than the minimum indicated.
            </summary>
            <param name="source">The value to test.</param>
            <param name="maximum">The maximum value to compare against.</param>
            <returns>
            <see langword="true"/> if the length of <paramref name="source"/> is
            less than the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.LengthLessThanOrEqualTo(System.String,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether the
            length of <paramref name="source"/> is less than or equal to the
            minimum indicated.
            </summary>
            <param name="source">The value to test.</param>
            <param name="maximum">The maximum value to compare against.</param>
            <returns>
            <see langword="true"/> if the length of <paramref name="source"/> is
            less than or equal to the minimum indicated; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.NullIfEmpty(System.String)">
            <summary>
            Returns <see langword="null"/> if the specified string is already
            <see langword="null"/> or <see cref="F:System.String.Empty"/>. This is useful
            <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/null-coalescing-operator">Null
            coalescing operator</see>
            </summary>
            <param name="value">The string to test.</param>
            <returns>
            <see langword="null"/> if <paramref name="value"/> is
            <see langword="null"/> or <see cref="F:System.String.Empty"/>; otherwise, <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.NullIfWhiteSpace(System.String)">
            <summary>
            Returns <see langword="null"/> if the specified string is already
            <see langword="null"/>, <see cref="F:System.String.Empty"/>, or consists only
            of white-space characters. This is useful to use with the
            <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/null-coalescing-operator">Null
            coalescing operator</see>
            </summary>
            <param name="value">The string to test.</param>
            <returns>
            <see langword="null"/> if <paramref name="value"/> is
            <see langword="null"/>, <see cref="F:System.String.Empty"/>, or consists only
            of white-space characters; otherwise, <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.OccurrencesOf(System.String,System.Char)">
            <summary>
            Returns the number of times <paramref name="value"/> appears in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The character to count.</param>
            <returns>
            The number of times <paramref name="value"/> appears in
            <paramref name="source"/> or 0 if <paramref name="value"/> is not
            found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.OccurrencesOf(System.String,System.String)">
            <summary>
            Returns the number of times <paramref name="value"/> appears in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to count.</param>
            <returns>
            The number of times <paramref name="value"/> appears in
            <paramref name="source"/> or 0 if <paramref name="value"/> is not
            found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.OccurrencesOf(System.String,System.String,System.StringComparison)">
            <summary>
            Returns the number of times <paramref name="value"/> appears in <paramref name="source"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The string to count.</param>
            <param name="comparisonType">
            One of the <see cref="T:System.StringComparison"/> values.
            </param>
            <returns>
            The number of times <paramref name="value"/> appears in
            <paramref name="source"/> or 0 if <paramref name="value"/> is not
            found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RemoveWhiteSpace(System.String)">
            <summary>
            Returns a new string whose textual value is
            <paramref name="source"/> with all whitespace characters removed.
            </summary>
            <param name="source">
            The <see cref="T:System.String"/> from which whitespace characters will be removed.
            </param>
            <returns>
            A new string representing <paramref name="source"/> with all of the
            whitespace characters removed.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Replace(System.String,System.Char,System.Char,System.Int32)">
            <summary>
            Returns a new string where <paramref name="oldValue"/> has been
            replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="oldValue">The character to replace.</param>
            <param name="newValue">The replacement character.</param>
            <param name="occurrences">
            The occurrences of <paramref name="oldValue"/> to replace.
            </param>
            <returns>
            A new string where <paramref name="oldValue"/> has been replaced by <paramref name="newValue"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Replace(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns a new string where <paramref name="oldValue"/> has been
            replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="oldValue">The character to replace.</param>
            <param name="newValue">The replacement character.</param>
            <param name="occurrences">
            The occurrences of <paramref name="oldValue"/> to replace.
            </param>
            <returns>
            A new string where <paramref name="oldValue"/> has been replaced by <paramref name="newValue"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Replace(System.String,System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Returns a new string where <paramref name="oldValue"/> has been
            replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="oldValue">The character to replace.</param>
            <param name="newValue">The replacement character.</param>
            <param name="occurrences">
            The occurrences of <paramref name="oldValue"/> to replace.
            </param>
            <param name="comparisonType">
            One of the <see cref="T:System.StringComparison"/> values.
            </param>
            <returns>
            A new string where <paramref name="oldValue"/> has been replaced by <paramref name="newValue"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.Char,System.Char,System.String)">
            <summary>
            Returns a new string where the text between <paramref name="start"/>
            and <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting character of the replacement substring.</param>
            <param name="end">The ending character of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <returns>
            A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.Char,System.Char,System.String,System.Boolean)">
            <summary>
            Returns a new string where the text between <paramref name="start"/>
            and <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting character of the replacement substring.</param>
            <param name="end">The ending character of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <param name="inclusive">
            Indicates if the substring should include the start and end characters.
            </param>
            <returns>
            A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Returns a new string where the text between <paramref name="start"/>
            and <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting index of the replacement substring.</param>
            <param name="end">The ending index of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <returns>
            A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a new string where the text between <paramref name="start"/>
            and <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting index of the replacement substring.</param>
            <param name="end">The ending index of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <param name="inclusive">
            Indicates if the substring should include the start and end indices.
            </param>
            <returns>
            A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.String,System.String,System.String)">
            <summary>
            Returns a new string where the text between <paramref name="start"/>
            and <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the replacement substring.</param>
            <param name="end">The ending string of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <returns>
            A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns a new string where the text between <paramref name="start"/>
            and <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the replacement substring.</param>
            <param name="end">The ending string of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <param name="inclusive">
            Indicates if the substring should include the start and end strings.
            </param>
            <returns>
            A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ReplaceBetween(System.String,System.String,System.String,System.String,System.Boolean,System.StringComparison)">
            <summary>
            Returns a new string where the text between <paramref name="start"/>
            and <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the replacement substring.</param>
            <param name="end">The ending string of the replacement substring.</param>
            <param name="newValue">The replacement text.</param>
            <param name="inclusive">
            Indicates if the substring should include the start and end strings.
            </param>
            <param name="comparisonType">
            One of the <see cref="T:System.StringComparison"/> values.
            </param>
            <returns>
            A new string where the text between <paramref name="start"/> and
            <parameref name="end"/> has been replaced by <paramref name="newValue"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.ResizeString(System.String,System.Int32)">
            <summary>
            Returns a new string whose textual value is the resized form of <paramref name="source"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to resize.</param>
            <param name="length">The desired length of the new <see cref="T:System.String"/>.</param>
            <returns>A new, resized string.</returns>
            <remarks>
            <para>
            If <paramref name="source"/> is less than <paramref name="length"/>,
            the returned string is padded with spaces; otherwise it is truncated
            to the desired length.
            </para>
            <para>
            If <paramref name="source"/> is <see langword="null"/> or is an
            empty string, a new string containing <paramref name="length"/>
            number of spaces is returned.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.Char)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified character position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending character of a substring.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="value"/> in
            <paramref name="source"/>, or the entire string if
            <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.Char,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified string position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="value"/> in
            <paramref name="source"/>, or the entire string if
            <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified character position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="endingIndex">The index of the end of the substring.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at <paramref name="endingIndex"/> in <paramref name="source"/>, or
            the entire string if <paramref name="endingIndex"/> is not found in
            the string.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="endingIndex"/> is less than zero.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.Int32,System.Boolean)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified character position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="endingIndex">The index of the end of the substring.</param>
            <param name="inclusive">
            Indicates if the substring should include the ending character position.
            </param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at <paramref name="endingIndex"/> in <paramref name="source"/>, or
            the entire string if <paramref name="endingIndex"/> is not found in
            the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.String)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified string position.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="value"/> in
            <paramref name="source"/>, or the entire string if
            <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.String,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified string position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="value"/> in
            <paramref name="source"/>, or the entire string if
            <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.RightSubstring(System.String,System.String,System.Int32,System.StringComparison)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            ends at the specified string position from the end of the string.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="value">The ending string of a substring.</param>
            <param name="occurrence">The occurrence of <paramref name="value"/>.</param>
            <param name="comparisonType">
            One of the <see cref="T:System.StringComparison"/> values.
            </param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="value"/> in
            <paramref name="source"/>, or the entire string if
            <paramref name="value"/> is not found in the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the start of this string instance matches any of
            the specified strings.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="values">A collection of string instances.</param>
            <returns>
            <see langword="true"/> if the start of this string instance matches
            any of the specified strings; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.StartsWithAny(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            Determines whether the start of this string instance matches any of
            the specified strings.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="values">A collection of string instances.</param>
            <param name="comparisonType">
            One of the enumeration values that specifies the rules for the comparison.
            </param>
            <returns>
            <see langword="true"/> if the start of this string instance matches
            any of the specified strings; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.SubstringBetween(System.String,System.Char,System.Char)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            begins at <paramref name="start"/> and ends at <paramref name="end"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting character of the substring.</param>
            <param name="end">The ending character of the substring.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="end"/> in
            <paramref name="source"/>, or <see cref="F:System.String.Empty"/> if
            <paramref name="start"/> or <paramref name="end"/> are not found in
            the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.SubstringBetween(System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            begins at <paramref name="start"/> and ends at <paramref name="end"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting character of the substring.</param>
            <param name="end">The ending character of the substring.</param>
            <param name="inclusive">
            Indicates if the substring should include the start and end characters.
            </param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="end"/> in
            <paramref name="source"/>, or <see cref="F:System.String.Empty"/> if
            <paramref name="start"/> or <paramref name="end"/> are not found in
            the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.SubstringBetween(System.String,System.String,System.String)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            begins at <paramref name="start"/> and ends at <paramref name="end"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the substring.</param>
            <param name="end">The ending string of the substring.</param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="end"/> in
            <paramref name="source"/>, or <see cref="F:System.String.Empty"/> if
            <paramref name="start"/> or <paramref name="end"/> are not found in
            the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.SubstringBetween(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            begins at <paramref name="start"/> and ends at <paramref name="end"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the substring.</param>
            <param name="end">The ending string of the substring.</param>
            <param name="inclusive">
            Indicates if the substring should include the start and end strings.
            </param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="end"/> in
            <paramref name="source"/>, or <see cref="F:System.String.Empty"/> if
            <paramref name="start"/> or <paramref name="end"/> are not found in
            the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.SubstringBetween(System.String,System.String,System.String,System.Boolean,System.StringComparison)">
            <summary>
            Retrieves a substring from <paramref name="source"/>. The substring
            begins at <paramref name="start"/> and ends at <paramref name="end"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="start">The starting string of the substring.</param>
            <param name="end">The ending string of the substring.</param>
            <param name="inclusive">
            Indicates if the substring should include the start and end strings.
            </param>
            <param name="comparisonType">
            One of the <see cref="T:System.StringComparison"/> values.
            </param>
            <returns>
            A <see cref="T:System.String"/> object equivalent to the substring that ends
            at the position of <paramref name="end"/> in
            <paramref name="source"/>, or <see cref="F:System.String.Empty"/> if
            <paramref name="start"/> or <paramref name="end"/> are not found in
            the string.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Returns a new string whose textual value is
            <paramref name="source"/> which has been truncated at <paramref name="length"/>.
            </summary>
            <param name="source">The source <see cref="T:System.String"/>.</param>
            <param name="length">
            The maximum number of characters to be included in the new <see cref="T:System.String"/>.
            </param>
            <returns>
            If <paramref name="source"/> is greater than
            <paramref name="length"/>, a new string representing
            <paramref name="source"/> which has been truncated at
            <paramref name="length"/>; otherwise, the original value.
            </returns>
        </member>
        <member name="T:Cadru.Extensions.TypeExtensions">
            <summary>
            Provides basic routines for common type manipulation.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.GetAttributeOfType``1(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to
            a specified field, and optionally inspects the ancestors of that field.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The field to inspect.</param>
            <param name="inherit">
            <see langword="true"/> to inspect the ancestors of element;
            otherwise, <see langword="false"/>.
            </param>
            <returns>
            A custom attribute that matches <typeparamref name="T"/>, or
            <see langword="null"/> if no such attribute is found.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.GetDescription(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            Retrieves a custom description that is applied to a specified field,
            and optionally inspects the ancestors of that field.
            </summary>
            <param name="field">The field to inspect.</param>
            <param name="useNameAsFallback">
            If <see langword="true"/>, the name of the field is used if no
            description is found; otherwise, <see langword="null"/>.
            </param>
            <returns>
            A string containing the description of the field; or
            <see langword="null"/> if no such constant is found and
            <paramref name="useNameAsFallback"/> is <see langword="false"/>;
            otherwise, the name of the field.
            </returns>
            <remarks>
            This method will use the value from an
            <see cref="T:Cadru.EnumDescriptionAttribute"/>,
            <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>, or
            <see cref="T:System.ComponentModel.DescriptionAttribute"/> if found, in that respective
            order. If none of those attributes are found, or the value is
            <see langword="null"/>, and <paramref name="useNameAsFallback"/> is
            <see langword="true"/>, then the name of the enumerated constant is
            used; otherwise, a <see langword="null"/> is used.
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.HasCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            Determines whether the specified type has a custom attribute
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The member to inspect.</param>
            <param name="inherit">
            <see langword="true"/> to inspect the ancestors of element;
            otherwise, <see langword="false"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified element has the attribute;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="element"/> is not a constructor, method, property,
            event, type, or field.
            </exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            More than one of the requested attributes was found.
            </exception>
            <exception cref="T:System.TypeLoadException">
            A custom attribute type cannot be loaded.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.HasCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified type has a custom attribute
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="element">The member to inspect.</param>
            <param name="inherit">
            <see langword="true"/> to inspect the ancestors of element;
            otherwise, <see langword="false"/>.
            </param>
            <returns>
            <see langword="true"/> if the specified element has the attribute;
            otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="element"/> is not a constructor, method, property,
            event, type, or field.
            </exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            More than one of the requested attributes was found.
            </exception>
            <exception cref="T:System.TypeLoadException">
            A custom attribute type cannot be loaded.
            </exception>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.HasInterface``1(System.Type)">
            <summary>
            Determines whether the specified type implements an interface
            </summary>
            <typeparam name="TInterface">
            The interface for which the type will be tested.
            </typeparam>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type implements the
            interface; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.HasInterface``1(System.Reflection.TypeInfo)">
            <summary>
            Determines whether the specified type implements an interface
            </summary>
            <typeparam name="TInterface">
            The interface for which the type will be tested.
            </typeparam>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type implements the
            interface; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsBoolean(System.Type)">
            <summary>
            Determines whether the specified type is a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is a
            <see cref="T:System.Boolean"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsBoolean(System.Reflection.TypeInfo)">
            <summary>
            Determines whether the specified type is a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is a
            <see cref="T:System.Boolean"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsDate(System.Type)">
            <summary>
            Determines whether the specified type is a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is a
            <see cref="T:System.DateTime"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsDate(System.Reflection.TypeInfo)">
            <summary>
            Determines whether the specified type is a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is a
            <see cref="T:System.DateTime"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsDateOffset(System.Type)">
            <summary>
            Determines whether the specified type is a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is a
            <see cref="T:System.DateTimeOffset"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsDateOffset(System.Reflection.TypeInfo)">
            <summary>
            Determines whether the specified type is a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is a
            <see cref="T:System.DateTimeOffset"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsEnumerableType(System.Type)">
            <summary>
            Determines if the type is an enumerable type.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is an enumerable type;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsEnumerableType(System.Reflection.TypeInfo)">
            <summary>
            Determines if the type is an enumerable type.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is an enumerable type;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsFlagsEnum(System.Type)">
            <summary>
            Determines whether the specified type is an <see cref="T:System.Enum"/> with
            an associated <see cref="T:System.FlagsAttribute"/>.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is an
            <see cref="T:System.Enum"/> with an associated <see cref="T:System.FlagsAttribute"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsFlagsEnum(System.Reflection.TypeInfo)">
            <summary>
            Determines whether the specified type is an <see cref="T:System.Enum"/> with
            an associated <see cref="T:System.FlagsAttribute"/>.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is an
            <see cref="T:System.Enum"/> with an associated <see cref="T:System.FlagsAttribute"/>;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is nullable; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsNullable(System.Reflection.TypeInfo)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is nullable; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            Determines whether the specified type is a numeric type.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is a numeric type;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Extensions.TypeExtensions.IsNumeric(System.Reflection.TypeInfo)">
            <summary>
            Determines whether the specified type is a numeric type.
            </summary>
            <param name="element">The type to test.</param>
            <returns>
            <see langword="true"/> if the specified type is a numeric type;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Cadru.Globalization.CountryCode">
            <summary>
            ISO 3166 country code expressions for international aware item
            validation routines.
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.None">
            <summary>
            No country specified
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.Invariant">
            <summary>
            Invariant country specified (same as None)
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AF">
            <summary>
            Afghanistan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AX">
            <summary>
            Åland Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AL">
            <summary>
            Albania
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DZ">
            <summary>
            Algeria
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AS">
            <summary>
            American Samoa
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AD">
            <summary>
            Andorra
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AO">
            <summary>
            Angola
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AI">
            <summary>
            Anguilla
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AQ">
            <summary>
            Antarctica
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AG">
            <summary>
            Antigua And Barbuda
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AR">
            <summary>
            Argentina
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AM">
            <summary>
            Armenia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AW">
            <summary>
            Aruba
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AU">
            <summary>
            Australia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AT">
            <summary>
            Austria
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AZ">
            <summary>
            Azerbaijan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BS">
            <summary>
            Bahamas
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BH">
            <summary>
            Bahrain
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BD">
            <summary>
            Bangladesh
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BB">
            <summary>
            Barbados
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BY">
            <summary>
            Belarus
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BE">
            <summary>
            Belgium
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BZ">
            <summary>
            Belize
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BJ">
            <summary>
            Benin
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BM">
            <summary>
            Bermuda
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BT">
            <summary>
            Bhutan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BO">
            <summary>
            Bolivia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BA">
            <summary>
            Bosnia And Herzegovina
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BW">
            <summary>
            Botswana
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BV">
            <summary>
            Bouvet Island
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BR">
            <summary>
            Brazil
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IO">
            <summary>
            British Indian Ocean Territory
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BN">
            <summary>
            Brunei Darussalam
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BG">
            <summary>
            Bulgaria
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BF">
            <summary>
            Burkina Faso
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.BI">
            <summary>
            Burundi
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KH">
            <summary>
            Cambodia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CM">
            <summary>
            Cameroon
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CA">
            <summary>
            Canada
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CV">
            <summary>
            Cape Verde
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KY">
            <summary>
            Cayman Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CF">
            <summary>
            Central African Republic
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TD">
            <summary>
            Chad
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CL">
            <summary>
            Chile
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CN">
            <summary>
            China
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CX">
            <summary>
            Christmas Island
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CC">
            <summary>
            Cocos (Keeling) Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CO">
            <summary>
            Colombia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KM">
            <summary>
            Comoros
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CG">
            <summary>
            Congo
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CD">
            <summary>
            Congo, The Democratic Republic Of The
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CK">
            <summary>
            Cook Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CR">
            <summary>
            Costa Rica
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CI">
            <summary>
            Cote D'Ivoire
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HR">
            <summary>
            Croatia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CU">
            <summary>
            Cuba
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CY">
            <summary>
            Cyprus
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CZ">
            <summary>
            Czech Republic
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DK">
            <summary>
            Denmark
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DJ">
            <summary>
            Djibouti
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DM">
            <summary>
            Dominica
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DO">
            <summary>
            Dominican Republic
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.EC">
            <summary>
            Ecuador
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.EG">
            <summary>
            Egypt
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SV">
            <summary>
            El Salvador
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GQ">
            <summary>
            Equatorial Guinea
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ER">
            <summary>
            Eritrea
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.EE">
            <summary>
            Estonia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ET">
            <summary>
            Ethiopia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FK">
            <summary>
            Falkland Islands (Malvinas)
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FO">
            <summary>
            Faroe Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FJ">
            <summary>
            Fiji
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FI">
            <summary>
            Finland
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FR">
            <summary>
            France
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GF">
            <summary>
            French Guiana
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PF">
            <summary>
            French Polynesia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TF">
            <summary>
            French Southern Territories
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GA">
            <summary>
            Gabon
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GM">
            <summary>
            Gambia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GE">
            <summary>
            Georgia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.DE">
            <summary>
            Germany
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GH">
            <summary>
            Ghana
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GI">
            <summary>
            Gibraltar
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GR">
            <summary>
            Greece
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GL">
            <summary>
            Greenland
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GD">
            <summary>
            Grenada
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GP">
            <summary>
            Guadeloupe
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GU">
            <summary>
            Guam
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GT">
            <summary>
            Guatemala
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GN">
            <summary>
            Guinea
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GW">
            <summary>
            Guinea-Bissau
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GY">
            <summary>
            Guyana
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HT">
            <summary>
            Haiti
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HM">
            <summary>
            Heard Island And McDonald Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VA">
            <summary>
            Holy See (Vatican City State)
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HN">
            <summary>
            Honduras
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HK">
            <summary>
            Hong Kong
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.HU">
            <summary>
            Hungary
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IS">
            <summary>
            Iceland
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IN">
            <summary>
            India
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ID">
            <summary>
            Indonesia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IR">
            <summary>
            Iran, Islamic Republic Of
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IQ">
            <summary>
            Iraq
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IE">
            <summary>
            Ireland
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IL">
            <summary>
            Israel
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.IT">
            <summary>
            Italy
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.JM">
            <summary>
            Jamaica
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.JP">
            <summary>
            Japan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.JO">
            <summary>
            Jordan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KZ">
            <summary>
            Kazakhstan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KE">
            <summary>
            Kenya
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KI">
            <summary>
            Kiribati
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KP">
            <summary>
            Korea, Democratic People's Republic Of
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KR">
            <summary>
            Korea, Republic Of
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KW">
            <summary>
            Kuwait
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KG">
            <summary>
            Kyrgyzstan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LA">
            <summary>
            Lao People's Democratic Republic
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LV">
            <summary>
            Latvia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LB">
            <summary>
            Lebanon
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LS">
            <summary>
            Lesotho
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LR">
            <summary>
            Liberia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LY">
            <summary>
            Libyan Arab Jamahiriya
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LI">
            <summary>
            Liechtenstein
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LT">
            <summary>
            Lithuania
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LU">
            <summary>
            Luxembourg
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MO">
            <summary>
            Macao
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MK">
            <summary>
            Macedonia, The Former Yugoslav Republic Of
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MG">
            <summary>
            Madagascar
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MW">
            <summary>
            Malawi
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MY">
            <summary>
            Malaysia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MV">
            <summary>
            Maldives
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ML">
            <summary>
            Mali
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MT">
            <summary>
            Malta
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MH">
            <summary>
            Marshall Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MQ">
            <summary>
            Martinique
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MR">
            <summary>
            Mauritania
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MU">
            <summary>
            Mauritius
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.YT">
            <summary>
            Mayotte
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MX">
            <summary>
            Mexico
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.FM">
            <summary>
            Micronesia, Federated States Of
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MD">
            <summary>
            Moldova, Republic Of
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MC">
            <summary>
            Monaco
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MN">
            <summary>
            Mongolia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MS">
            <summary>
            Montserrat
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MA">
            <summary>
            Morocco
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MZ">
            <summary>
            Mozambique
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MM">
            <summary>
            Myanmar
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NA">
            <summary>
            Namibia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NR">
            <summary>
            Nauru
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NP">
            <summary>
            Nepal
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NL">
            <summary>
            Netherlands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AN">
            <summary>
            Netherlands Antilles
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NC">
            <summary>
            New Caledonia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NZ">
            <summary>
            New Zealand
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NI">
            <summary>
            Nicaragua
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NE">
            <summary>
            Niger
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NG">
            <summary>
            Nigeria
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NU">
            <summary>
            Niue
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NF">
            <summary>
            Norfolk Island
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.MP">
            <summary>
            Northern Mariana Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.NO">
            <summary>
            Norway
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.OM">
            <summary>
            Oman
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PK">
            <summary>
            Pakistan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PW">
            <summary>
            Palau
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PS">
            <summary>
            Palestinian Territory, Occupied
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PA">
            <summary>
            Panama
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PG">
            <summary>
            Papua New Guinea
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PY">
            <summary>
            Paraguay
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PE">
            <summary>
            Peru
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PH">
            <summary>
            Philippines
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PN">
            <summary>
            Pitcairn
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PL">
            <summary>
            Poland
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PT">
            <summary>
            Portugal
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PR">
            <summary>
            Puerto Rico
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.QA">
            <summary>
            Qatar
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.RE">
            <summary>
            Reunion
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.RO">
            <summary>
            Romania
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.RU">
            <summary>
            Russian Federation
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.RW">
            <summary>
            Rwanda
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SH">
            <summary>
            Saint Helena
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.KN">
            <summary>
            Saint Kitts And Nevis
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LC">
            <summary>
            Saint Lucia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.PM">
            <summary>
            Saint Pierre And Miquelon
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VC">
            <summary>
            Saint Vincent And The Grenadines
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.WS">
            <summary>
            Samoa
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SM">
            <summary>
            San Marino
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ST">
            <summary>
            Sao Tome And Principe
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SA">
            <summary>
            Saudi Arabia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SN">
            <summary>
            Senegal
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CS">
            <summary>
            Serbia And Montenegro
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SC">
            <summary>
            Seychelles
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SL">
            <summary>
            Sierra Leone
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SG">
            <summary>
            Singapore
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SK">
            <summary>
            Slovakia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SI">
            <summary>
            Slovenia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SB">
            <summary>
            Solomon Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SO">
            <summary>
            Somalia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ZA">
            <summary>
            South Africa
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GS">
            <summary>
            South Georgia And The South Sandwich Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ES">
            <summary>
            Spain
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.LK">
            <summary>
            Sri Lanka
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SD">
            <summary>
            Sudan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SR">
            <summary>
            Suriname
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SJ">
            <summary>
            Svalbard And Jan Mayen
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SZ">
            <summary>
            Swaziland
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SE">
            <summary>
            Sweden
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.CH">
            <summary>
            Switzerland
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.SY">
            <summary>
            Syrian Arab Republic
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TW">
            <summary>
            Taiwan, Province Of China
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TJ">
            <summary>
            Tajikistan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TZ">
            <summary>
            Tanzania, United Republic Of
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TH">
            <summary>
            Thailand
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TL">
            <summary>
            Timor-Leste
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TG">
            <summary>
            Togo
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TK">
            <summary>
            Tokelau
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TO">
            <summary>
            Tonga
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TT">
            <summary>
            Trinidad And Tobago
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TN">
            <summary>
            Tunisia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TR">
            <summary>
            Turkey
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TM">
            <summary>
            Turkmenistan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TC">
            <summary>
            Turks And Caicos Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.TV">
            <summary>
            Tuvalu
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.UG">
            <summary>
            Uganda
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.UA">
            <summary>
            Ukraine
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.AE">
            <summary>
            United Arab Emirates
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.GB">
            <summary>
            United Kingdom
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.US">
            <summary>
            United States
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.UM">
            <summary>
            United States Minor Outlying Islands
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.UY">
            <summary>
            Uruguay
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.UZ">
            <summary>
            Uzbekistan
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VU">
            <summary>
            Vanuatu
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VE">
            <summary>
            Venezuela
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VN">
            <summary>
            Viet Nam
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VG">
            <summary>
            Virgin Islands, British
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.VI">
            <summary>
            Virgin Islands, U.S.
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.WF">
            <summary>
            Wallis And Futuna
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.EH">
            <summary>
            Western Sahara
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.YE">
            <summary>
            Yemen
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ZM">
            <summary>
            Zambia
            </summary>
        </member>
        <member name="F:Cadru.Globalization.CountryCode.ZW">
            <summary>
            Zimbabwe
            </summary>
        </member>
        <member name="T:Cadru.Globalization.LocalizableString">
            <summary>
            A helper class for providing a localizable string property.
            </summary>
        </member>
        <member name="M:Cadru.Globalization.LocalizableString.#ctor(System.String)">
            <summary>
            Constructs a localizable string, specifying the property name
            associated with this item. The <paramref name="propertyName"/> value
            will be used within any exceptions thrown as a result of
            localization failures.
            </summary>
            <param name="propertyName">
            The name of the property being localized. This name will be used
            within exceptions thrown as a result of localization failures.
            </param>
        </member>
        <member name="P:Cadru.Globalization.LocalizableString.ResourceType">
            <summary>
            Gets or sets the resource type to be used for localization.
            </summary>
        </member>
        <member name="P:Cadru.Globalization.LocalizableString.Value">
            <summary>
            Gets or sets the value of this localizable string. This value can be
            either the literal, non-localized value, or it can be a resource
            name found on the resource type supplied to <see cref="M:Cadru.Globalization.LocalizableString.GetLocalizableValue"/>.
            </summary>
        </member>
        <member name="M:Cadru.Globalization.LocalizableString.GetLocalizableValue">
            <summary>
            Gets the potentially localized value.
            </summary>
            <remarks>
            If <see cref="P:Cadru.Globalization.LocalizableString.ResourceType"/> has been specified and
            <see cref="P:Cadru.Globalization.LocalizableString.Value"/> is not null, then localization will occur and
            the localized value will be returned.
            <para>
            If <see cref="P:Cadru.Globalization.LocalizableString.ResourceType"/> is null then <see cref="P:Cadru.Globalization.LocalizableString.Value"/> will
            be returned as a literal, non-localized string.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if localization fails. This can occur if
            <see cref="P:Cadru.Globalization.LocalizableString.ResourceType"/> has been specified, <see cref="P:Cadru.Globalization.LocalizableString.Value"/>
            is not null, but the resource could not be accessed.
            <see cref="P:Cadru.Globalization.LocalizableString.ResourceType"/> must be a public class, and
            <see cref="P:Cadru.Globalization.LocalizableString.Value"/> must be the name of a public static string
            property that contains a getter.
            </exception>
            <returns>Returns the potentially localized value.</returns>
        </member>
        <member name="M:Cadru.Globalization.LocalizableString.ClearCache">
            <summary>
            Clears any cached values, forcing <see cref="M:Cadru.Globalization.LocalizableString.GetLocalizableValue"/>
            to perform evaluation.
            </summary>
        </member>
        <member name="T:Cadru.IDisposablePattern">
            <summary>
            Defines an extended method to release allocated Strings.
            </summary>
        </member>
        <member name="P:Cadru.IDisposablePattern.Disposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
            <value>
            <see langword="true"/> if the object has been disposed; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Cadru.Internal.ExceptionBuilder">
            <summary>
            Provides methods to create specific exceptions.
            </summary>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateArgumentException(System.String,System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="parameterName">
            The name of the parameter that caused the exception.
            </param>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <returns>A new <see cref="T:System.ArgumentException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateArgumentNullException(System.String,System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="parameterName">
            The name of the parameter that caused the exception.
            </param>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <returns>A new <see cref="T:System.ArgumentNullException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="parameterName">
            The name of the parameter that caused the exception.
            </param>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <returns>A new <see cref="T:System.ArgumentOutOfRangeException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateContainsNullElement(System.String)">
            <summary>
            Create an exception indicating that an array or collection element
            was <see langword="null"/>.
            </summary>
            <param name="parameterName">
            The name of the parameter that caused the exception.
            </param>
            <returns>A new <see cref="T:System.ArgumentException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateFormatException(System.String)">
            <summary>
            Create a new <see cref="T:System.FormatException"/>.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <returns>A new <see cref="T:System.FormatException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateInvalidOperation(System.String)">
            <summary>
            Create a new <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="message">
            The error message that explains the reason for the exception.
            </param>
            <returns>A new <see cref="T:System.InvalidOperationException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.CreateObjectDisposed(System.String)">
            <summary>
            Create a new <see cref="T:System.ObjectDisposedException"/>.
            </summary>
            <param name="objectName">
            A string containing the name of the disposed object.
            </param>
            <returns>A new <see cref="T:System.ObjectDisposedException"/>.</returns>
        </member>
        <member name="M:Cadru.Internal.ExceptionBuilder.Format(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified <see cref="T:System.String"/> with
            the text equivalent of the value of a corresponding
            <see cref="T:System.String"/> instance in a specified array.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arguments">
            A <see cref="T:System.String"/> array containing zero or more strings to format.
            </param>
            <returns>
            A copy of format in which the format items have been replaced by the
            corresponding instances of <see cref="T:System.String"/> in args.
            </returns>
        </member>
        <member name="T:Cadru.Internal.ValidatedNotNullAttribute">
            <summary>
            Indicates to Code Analysis that a method validates a particular parameter.
            </summary>
        </member>
        <member name="T:Cadru.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ApplicationExcpetion_UnableToDetermineInstallRoot">
            <summary>
              Looks up a localized string similar to Unable to determine the install root path for the .NET Framework..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Arg_AmbiguousMatchException">
            <summary>
              Looks up a localized string similar to Ambiguous match found..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Arg_GuidArrayCtor">
            <summary>
              Looks up a localized string similar to Byte array for GUID must be exactly {0} bytes long..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Arg_MustBeSequentialGuid">
            <summary>
              Looks up a localized string similar to Object must be of type SequentialGuid..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Arg_MustBeUnixTimestamp">
            <summary>
              Looks up a localized string similar to Object must be of type UnixTimestamp..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Arg_UnixTimestampRange">
            <summary>
              Looks up a localized string similar to Combination of arguments to the UnixTimestamp constructor is out of the legal range..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_EnumIllegalVal">
            <summary>
              Looks up a localized string similar to Illegal enum value: {0}..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for this usage of the type {1}..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_InvalidFlag">
            <summary>
              Looks up a localized string similar to Value of flags is invalid..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_InvalidIndexValuesString">
            <summary>
              Looks up a localized string similar to The starting index and ending index refer to the same location in the string..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_MustBeAttribute">
            <summary>
              Looks up a localized string similar to Argument must be an Attribute or derived from an Attribute..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_MustBeDateTime">
            <summary>
              Looks up a localized string similar to Object must be of type DateTime..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_MustBeIsoDateTime">
            <summary>
              Looks up a localized string similar to Argument must be an IsoDateTime..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_MustBeString">
            <summary>
              Looks up a localized string similar to Object must be of type String..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_NotSerializable">
            <summary>
              Looks up a localized string similar to Argument passed in is not serializable..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_NullElement">
            <summary>
              Looks up a localized string similar to {0} cannot contain a null (Nothing in Visual Basic) element..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_StartIndexGreaterThanEndIndex">
            <summary>
              Looks up a localized string similar to The starting index refers to a location that is after the ending index..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_StartIndexGreaterThanEndIndexString">
            <summary>
              Looks up a localized string similar to The starting index refers to a location in the string that is after the ending index..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_StringZeroLength">
            <summary>
              Looks up a localized string similar to String cannot be of zero length..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Argument_UnixTimestampIsInvalid">
            <summary>
              Looks up a localized string similar to The supplied UnixTimestamp represents an invalid time.  For example, when the clock is adjusted forward, any time in the period that is skipped is invalid..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentException_EmptyString">
            <summary>
              Looks up a localized string similar to {0} cannot be an empty string..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentExceptionMustBeEnum">
            <summary>
              Looks up a localized string similar to Type provided must be an Enum..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentNull_String">
            <summary>
              Looks up a localized string similar to String reference not set to an instance of a String..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_DateArithmetic">
            <summary>
              Looks up a localized string similar to The added or subtracted value results in an un-representable DateTime..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_DateTimeBadTicks">
            <summary>
              Looks up a localized string similar to Ticks must be between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_Day">
            <summary>
              Looks up a localized string similar to Day must be between 1 and {0} for month {1}..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_DayOfWeek">
            <summary>
              Looks up a localized string similar to The DayOfWeek enumeration must be in the range 0 through 6..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_IndexLessThanLength">
            <summary>
              Looks up a localized string similar to Index must be less than the length of string..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_IndexLessThanZero">
            <summary>
              Looks up a localized string similar to Index must be non-negative..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_IndexString">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the length of the string..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_Range">
            <summary>
              Looks up a localized string similar to Valid values are between {0} and {1}..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_RangeInclusive">
            <summary>
              Looks up a localized string similar to Valid values are between {0} and {1}, inclusive..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_UnixTimestampBadMonths">
            <summary>
              Looks up a localized string similar to Months value must be between +/-120000..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_UnixTimestampBadSeconds">
            <summary>
              Looks up a localized string similar to Seconds must be between UnixTimestamp.MinValue.Seconds and UnixTimestamp.MaxValue.Seconds..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_UnixTimestampBadYears">
            <summary>
              Looks up a localized string similar to Years value must be between +/-10000..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.ArgumentOutOfRange_UpperBound">
            <summary>
              Looks up a localized string similar to The upper bound must be greater than the lower bound ..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Assertion_CollectionFailure">
            <summary>
              Looks up a localized string similar to Expected a collection containing &lt;0&gt; items but actual was &lt;{0}&gt; items..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Assertion_GenericFailure">
            <summary>
              Looks up a localized string similar to Expected &lt;{0}&gt; but actual was &lt;{1}&gt;..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.AssumptionException_EmptyMessage">
            <summary>
              Looks up a localized string similar to Assumption failed..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.AssumptionException_Message">
            <summary>
              Looks up a localized string similar to Assumption failed. {0}.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.DownloadInfoConnectionClosed">
            <summary>
              Looks up a localized string similar to Could not download {0} - FTP server closed the connection..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.DownloadInfoInvalidResponseReceived">
            <summary>
              Looks up a localized string similar to Could not download {0} - a web page was returned from the web server..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.FileDownloaderCancelled">
            <summary>
              Looks up a localized string similar to Download was cancelled..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.FileDownloaderDownloadLocation">
            <summary>
              Looks up a localized string similar to Downloading file to {0}..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_BadDatePattern">
            <summary>
              Looks up a localized string similar to Could not determine the order of year, month, and date from &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_BadDateTime">
            <summary>
              Looks up a localized string similar to String was not recognized as a valid DateTime..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_BadDateTimeCalendar">
            <summary>
              Looks up a localized string similar to The DateTime represented by the string is not supported in calendar {0}..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_BadDayOfWeek">
            <summary>
              Looks up a localized string similar to String was not recognized as a valid DateTime because the day of week was incorrect..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_BadFormatSpecifier">
            <summary>
              Looks up a localized string similar to Format specifier was invalid..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_BadQuote">
            <summary>
              Looks up a localized string similar to Cannot find a matching quote character for the character &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_DateOutOfRange">
            <summary>
              Looks up a localized string similar to The DateTime represented by the string is out of range..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_Dns_Bad_Ip_Address">
            <summary>
              Looks up a localized string similar to An invalid IP address was specified..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_EmptyInputString">
            <summary>
              Looks up a localized string similar to Input string was either empty or contained only white space..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_ExtraJunkAtEnd">
            <summary>
              Looks up a localized string similar to Additional non-parsable characters are at the end of the string..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_GuidBrace">
            <summary>
              Looks up a localized string similar to Expected {0xdddddddd, etc}..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_GuidBraceAfterLastNumber">
            <summary>
              Looks up a localized string similar to Could not find a brace, or the length between the previous token and the brace was zero (i.e., &apos;0x,&apos;etc.)..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_GuidComma">
            <summary>
              Looks up a localized string similar to Could not find a comma, or the length between the previous token and the comma was zero (i.e., &apos;0x,&apos;etc.)..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_GuidDashes">
            <summary>
              Looks up a localized string similar to Dashes are in the wrong position for GUID parsing..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_GuidEndBrace">
            <summary>
              Looks up a localized string similar to Could not find the ending brace..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_GuidHexPrefix">
            <summary>
              Looks up a localized string similar to Expected hex 0x in &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_GuidInvalidChar">
            <summary>
              Looks up a localized string similar to Guid string should only contain hexadecimal characters..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_GuidInvLen">
            <summary>
              Looks up a localized string similar to Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_GuidUnrecognized">
            <summary>
              Looks up a localized string similar to Unrecognized Guid format..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_InvalidGuidFormatSpecification">
            <summary>
              Looks up a localized string similar to Format String can be only &quot;D&quot;, &quot;d&quot;, &quot;N&quot;, &quot;n&quot;, &quot;P&quot;, &quot;p&quot;, &quot;B&quot;, &quot;b&quot;, &quot;X&quot; or &quot;x&quot;..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_InvalidLen">
            <summary>
              Looks up a localized string similar to String was not of correct length..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_InvalidString">
            <summary>
              Looks up a localized string similar to Input string was not in a correct format..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_NeedSingleChar">
            <summary>
              Looks up a localized string similar to String must be exactly one character long..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_RepeatDateTimePattern">
            <summary>
              Looks up a localized string similar to DateTime pattern &apos;{0}&apos; appears more than once with different values..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_TwoTimeZoneSpecifiers">
            <summary>
              Looks up a localized string similar to The String being parsed cannot contain two TimeZone specifiers..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.Format_UnknowDateTimeWord">
            <summary>
              Looks up a localized string similar to The string was not recognized as a valid DateTime. There is a unknown word starting at index {0}..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.InvalidCast_Color">
            <summary>
              Looks up a localized string similar to Unable to convert the given value to a color..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.InvalidCast_FromTo">
            <summary>
              Looks up a localized string similar to Invalid cast from &apos;{0}&apos; to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.InvalidOperation_LocalizationFailed">
            <summary>
              Looks up a localized string similar to Cannot retrieve property &quot;{0}&quot; because localization failed.  Type &quot;{1}&quot; is not public or does not contain a public static string property with the name &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.MDA_InvalidFormatForLocal">
            <summary>
              Looks up a localized string similar to Cannot apply format &quot;{0}&quot; to the date &quot;{1}&quot; as the date is already in local time..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.MDA_InvalidFormatForUtc">
            <summary>
              Looks up a localized string similar to Cannot apply format &quot;{0}&quot; to the date &quot;{1}&quot; as the date is already in universal time..
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeDateFormatStringDaysAgo">
            <summary>
              Looks up a localized string similar to {0} days ago.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeDateFormatStringDaysFromNow">
            <summary>
              Looks up a localized string similar to {0} days from now.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeDateFormatStringDefault">
            <summary>
              Looks up a localized string similar to {0:MMM d, yyyy}.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeDateFormatStringToday">
            <summary>
              Looks up a localized string similar to Today, {0:h&apos;:&apos;mm&apos; &apos;tt}.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeDateFormatStringTomorrow">
            <summary>
              Looks up a localized string similar to Tomorrow.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeDateFormatStringYesterday">
            <summary>
              Looks up a localized string similar to Yesterday.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringDay">
            <summary>
              Looks up a localized string similar to day.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringDays">
            <summary>
              Looks up a localized string similar to days.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringFuture">
            <summary>
              Looks up a localized string similar to {0} {1} from now.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringHour">
            <summary>
              Looks up a localized string similar to hour.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringHours">
            <summary>
              Looks up a localized string similar to hours.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringMinute">
            <summary>
              Looks up a localized string similar to minute.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringMinutes">
            <summary>
              Looks up a localized string similar to minutes.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringMonth">
            <summary>
              Looks up a localized string similar to month.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringMonths">
            <summary>
              Looks up a localized string similar to months.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringPast">
            <summary>
              Looks up a localized string similar to {0} {1} ago.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringSecond">
            <summary>
              Looks up a localized string similar to second.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringSeconds">
            <summary>
              Looks up a localized string similar to seconds.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringYear">
            <summary>
              Looks up a localized string similar to year.
            </summary>
        </member>
        <member name="P:Cadru.Resources.Strings.RelativeTimeFormatStringYears">
            <summary>
              Looks up a localized string similar to years.
            </summary>
        </member>
        <member name="T:Cadru.Text.DataValidation">
            <summary>
            Provides basic routines for common data validation.
            </summary>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsAlpha(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains alphabetic characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsAlpha(System.Char)"/> returns <see langword="true"/> if
            <paramref name="expression"/> contains alphabetic characters;
            otherwise it returns <see langword="false"/>.
            </returns>
            <remarks>
            Alphabetic characters are any letters A-Z or a-z, the punctuation
            characters and the space character.
            </remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsAlpha(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains alphabetic characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsAlpha(System.String)"/> returns <see langword="true"/> if
            <paramref name="expression"/> contains alphabetic characters;
            otherwise it returns <see langword="false"/>.
            </returns>
            <remarks>
            Alphabetic characters are any letters A-Z or a-z, the punctuation
            characters and the space character.
            </remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsAlphanumeric(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains alphabetic and numeric characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsAlphanumeric(System.Char)"/> returns <see langword="true"/> if
            <paramref name="expression"/> contains alphabetic characters or
            numeric characters; otherwise it returns <see langword="false"/>.
            </returns>
            <remarks>
            Alphabetic characters are any letters A-Z or a-z, the punctuation
            characters, and the space character. Numeric characters are 0-9.
            </remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsAlphanumeric(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains alphabetic and numeric characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsAlphanumeric(System.String)"/> returns <see langword="true"/>
            if <paramref name="expression"/> contains alphabetic characters or
            numeric characters; otherwise it returns <see langword="false"/>.
            </returns>
            <remarks>
            Alphabetic characters are any letters A-Z or a-z, the punctuation
            characters, and the space character. Numeric characters are 0-9.
            </remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsCurrency(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains a valid currency string.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsCurrency(System.String)"/> returns <see langword="true"/> if
            <paramref name="expression"/> contains a valid currency string;
            otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsCurrency(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains a valid currency string.
            </summary>
            <param name="expression">Any string expression.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information about <paramref name="expression"/>.
            </param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsCurrency(System.String,System.IFormatProvider)"/> returns
            <see langword="true"/> if <paramref name="expression"/> contains a
            valid currency string; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsDate(System.String)">
             <summary>
             Returns a <see cref="T:System.Boolean"/> expression indicating whether
             <paramref name="expression"/> can be converted to a date.
             </summary>
             <param name="expression">
             Any string expression recognizable as a date or time.
             </param>
             <returns>
             <see cref="M:Cadru.Text.DataValidation.IsDate(System.String)"/> returns <see langword="true"/> if
             <paramref name="expression"/> is a string convertible to type
             <see cref="T:System.DateTime"/>; otherwise, it returns <see langword="false"/>.
             </returns>
             <remarks>
             <para>
             In Microsoft Windows, the range of valid dates is January 1, 100
             A.D. through December 31, 9999 A.D.; the ranges vary among operating systems.
             </para>
             <para>
             <see cref="M:Cadru.Text.DataValidation.IsDate(System.String)"/> uses the
             <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> object.
             </para>
             </remarks>
             <example>
             The following example uses the <see cref="M:Cadru.Text.DataValidation.IsDate(System.String)"/> function
             to determine whether an expression can be converted to a date:
             <code>
            string dtString = "9/27/1973";
            string dtBadString = "hello";
            
            Console.WriteLine(DataValidation.IsDate(dtString));
            Console.WriteLine(DataValidation.IsDate(dtBadString));
             </code>
             Produces the following output:
             <code>
            true
            false
             </code>
             </example>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsDate(System.String,System.IFormatProvider)">
             <summary>
             Returns a <see cref="T:System.Boolean"/> expression indicating whether
             <paramref name="expression"/> can be converted to a date.
             </summary>
             <param name="expression">
             Any string expression recognizable as a date or time.
             </param>
             <param name="provider">
             An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
             formatting information about <paramref name="expression"/>.
             </param>
             <returns>
             <see cref="M:Cadru.Text.DataValidation.IsDate(System.String,System.IFormatProvider)"/> returns
             <see langword="true"/> if <paramref name="expression"/> is a string
             convertible to type <see cref="T:System.DateTime"/>; otherwise, it returns <see langword="false"/>.
             </returns>
             <remarks>
             <para>
             In Microsoft Windows, the range of valid dates is January 1, 100
             A.D. through December 31, 9999 A.D.; the ranges vary among operating systems.
             </para>
             </remarks>
             <example>
             The following example uses the IsDate function to determine whether
             an expression can be converted to a date:
             <code>
            string dtString = "9/27/1973";
            string dtBadString = "hello";
            
            Console.WriteLine(DataValidation.IsDate(dtString));
            Console.WriteLine(DataValidation.IsDate(dtBadString));
             </code>
             Produces the following output:
             <code>
            true
            false
             </code>
             </example>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsDate(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
             <summary>
             Returns a <see cref="T:System.Boolean"/> expression indicating whether
             <paramref name="expression"/> can be converted to a date.
             </summary>
             <param name="expression">
             Any string expression recognizable as a date or time.
             </param>
             <param name="provider">
             An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
             formatting information about <paramref name="expression"/>.
             </param>
             <param name="styles">
             A bitwise combination of enumeration values that defines how to
             interpret the parsed date in relation to the current time zone or
             the current date. A typical value to specify is <see cref="T:System.Globalization.DateTimeStyles">None</see>.
             </param>
             <returns>
             <see cref="M:Cadru.Text.DataValidation.IsDate(System.String,System.IFormatProvider)"/> returns
             <see langword="true"/> if <paramref name="expression"/> is a string
             convertible to type <see cref="T:System.DateTime"/>; otherwise, it returns <see langword="false"/>.
             </returns>
             <remarks>
             <para>
             In Microsoft Windows, the range of valid dates is January 1, 100
             A.D. through December 31, 9999 A.D.; the ranges vary among operating systems.
             </para>
             </remarks>
             <example>
             The following example uses the IsDate function to determine whether
             an expression can be converted to a date:
             <code>
            string dtString = "9/27/1973";
            string dtBadString = "hello";
            
            Console.WriteLine(DataValidation.IsDate(dtString));
            Console.WriteLine(DataValidation.IsDate(dtBadString));
             </code>
             Produces the following output:
             <code>
            true
            false
             </code>
             </example>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsHexadecimal(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains hexadecimal characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsHexadecimal(System.Char)"/> returns <see langword="true"/> if
            <paramref name="expression"/> contains hexadecimal characters;
            otherwise it returns <see langword="false"/>.
            </returns>
            <remarks>
            Hexadecimal characters are any letters A-F, a-f, or 0-9.
            </remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsHexadecimal(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains hexadecimal characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsHexadecimal(System.String)"/> returns <see langword="true"/>
            if <paramref name="expression"/> contains hexadecimal characters;
            otherwise it returns <see langword="false"/>.
            </returns>
            <remarks>
            Hexadecimal characters are any letters A-F, a-f, or 0-9.
            </remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsNumeric(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains only numbers.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsNumeric(System.Char)"/> returns <see langword="true"/> if
            <paramref name="expression"/> contains numeric characters; otherwise
            it returns <see langword="false"/>.
            </returns>
            <remarks>Numeric characters are 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsNumeric(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains only numbers.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsNumeric(System.String)"/> returns <see langword="true"/> if
            <paramref name="expression"/> contains numeric characters; otherwise
            it returns <see langword="false"/>.
            </returns>
            <remarks>Numeric characters are 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsNumeric(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains only numbers.
            </summary>
            <param name="expression">Any string expression.</param>
            <param name="provider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information about <paramref name="expression"/>.
            </param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsNumeric(System.String,System.IFormatProvider)"/> returns
            <see langword="true"/> if <paramref name="expression"/> contains
            numeric characters; otherwise it returns <see langword="false"/>.
            </returns>
            <remarks>Numeric characters are 0-9.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsStrictlyAlpha(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains only alphabetic characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsStrictlyAlpha(System.Char)"/> returns <see langword="true"/>
            if <paramref name="expression"/> contains alphabetic characters;
            otherwise it returns <see langword="false"/>.
            </returns>
            <remarks>Alphabetic characters are any letters A-Z or a-z.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsStrictlyAlpha(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains only alphabetic characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsStrictlyAlpha(System.String)"/> returns <see langword="true"/>
            if <paramref name="expression"/> contains alphabetic characters;
            otherwise it returns <see langword="false"/>.
            </returns>
            <remarks>Alphabetic characters are any letters A-Z or a-z.</remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsStrictlyAlphanumeric(System.Char)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains only alphabetic and numeric characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsStrictlyAlphanumeric(System.Char)"/> returns
            <see langword="true"/> if <paramref name="expression"/> contains
            alphabetic characters; otherwise it returns <see langword="false"/>.
            </returns>
            <remarks>
            Alphabetic characters are any letters A-Z or a-z. Numeric characters
            are 0-9.
            </remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsStrictlyAlphanumeric(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains only alphabetic and numeric characters.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsStrictlyAlphanumeric(System.String)"/> returns
            <see langword="true"/> if <paramref name="expression"/> contains
            alphabetic characters; otherwise it returns <see langword="false"/>.
            </returns>
            <remarks>
            Alphabetic characters are any letters A-Z or a-z. Numeric characters
            are 0-9.
            </remarks>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsValidFileName(System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains a valid file name.
            </summary>
            <param name="expression">Any string expression.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsValidFileName(System.String)"/> returns <see langword="true"/>
            if <paramref name="expression"/> contains a valid file name;
            otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Text.DataValidation.IsValidFileName(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> contains a valid file name.
            </summary>
            <param name="expression">Any string expression.</param>
            <param name="platformIndependent">
            <see langword="true"/> to test whether the expression contains a
            valid platform independent file name; otherwise, <see langword="false"/>.
            </param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.IsValidFileName(System.String,System.Boolean)"/> returns
            <see langword="true"/> if <paramref name="expression"/> contains a
            valid file name; otherwise it returns <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Text.DataValidation.Validate(System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.Boolean"/> expression indicating whether
            <paramref name="expression"/> matches the regular expression pattern <paramref name="pattern"/>.
            </summary>
            <param name="expression">Any string expression.</param>
            <param name="pattern">The regular expression pattern to match against.</param>
            <returns>
            <see cref="M:Cadru.Text.DataValidation.Validate(System.String,System.String)"/> returns <see langword="true"/> if
            <paramref name="expression"/> matches the pattern; otherwise it
            returns <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Cadru.Text.NormalizationOptions">
            <summary>
            Options used by the <see cref="M:Cadru.Extensions.StringExtensions.Clean(System.String)"/> methods
            to determine how to normalize a string.
            </summary>
        </member>
        <member name="F:Cadru.Text.NormalizationOptions.None">
            <summary>
            Do not remove any characters from the string.
            </summary>
        </member>
        <member name="F:Cadru.Text.NormalizationOptions.ControlCharacters">
            <summary>
            Remove all control characters from the string.
            </summary>
        </member>
        <member name="F:Cadru.Text.NormalizationOptions.Whitespace">
            <summary>
            Remove all white space characters from the beginning and end of the
            string and collapse all internal white space characters to a single
            white space character.
            </summary>
        </member>
        <member name="F:Cadru.Text.NormalizationOptions.All">
            <summary>
            Remove all white space and control characters from the beginning and
            end of the string and collapse all internal white space characters
            to a single white space character.
            </summary>
        </member>
        <member name="T:Cadru.Text.NumericComparisonOptions">
            <summary>
            Specifies the comparison rules to be used by certain overloads of the
            <see cref="T:Cadru.Extensions.StringExtensions">StringExtensions.LengthBetween</see> and
            <see cref="T:Cadru.Extensions.NumericExtensions">NumericExtensions.Between</see> methods.
            </summary>
        </member>
        <member name="F:Cadru.Text.NumericComparisonOptions.None">
            <summary>
            The comparison includes neither the minimum and maximum value.
            </summary>
        </member>
        <member name="F:Cadru.Text.NumericComparisonOptions.IncludeMinimum">
            <summary>
            The comparison includes the minimum value.
            </summary>
        </member>
        <member name="F:Cadru.Text.NumericComparisonOptions.IncludeMaximum">
            <summary>
            The comparison includes the maximum value.
            </summary>
        </member>
        <member name="F:Cadru.Text.NumericComparisonOptions.IncludeBoth">
            <summary>
            The comparison includes both the minimum and maximum value.
            </summary>
        </member>
        <member name="T:Cadru.Text.RelativeDateFormatting">
            <summary>
            Specifies how a relative date within the current week (+/- 5 days from
            today) should be formatted.
            </summary>
        </member>
        <member name="F:Cadru.Text.RelativeDateFormatting.Days">
            <summary>
            Format the relative date as a number of days ago if earlier than
            today or a number of days from today if later.
            </summary>
        </member>
        <member name="F:Cadru.Text.RelativeDateFormatting.DayNames">
            <summary>
            Format the relative date as the name of the day of the week.
            </summary>
        </member>
        <member name="T:Cadru.UnixTimestamp">
            <summary>
            Represents an instant in time, defined as the number of seconds that
            have elapsed since 00:00:00 Coordinated Universal Time (UTC), Thursday,
            1 January 1970, not counting leap seconds.
            </summary>
            <remarks>
            The date and time range that can be represented by a
            <see cref="T:Cadru.UnixTimestamp"/> is constrained to the same date and time
            range as <see cref="P:Cadru.UnixTimestamp.DateTime"/>.
            </remarks>
        </member>
        <member name="F:Cadru.UnixTimestamp.MaxValue">
            <summary>
            Represents the largest possible value of
            <see cref="T:Cadru.UnixTimestamp"/>. This field is read-only.
            </summary>
            <remarks>
            The value of this constant is equivalent to 23:59:59, December 31, 9999.
            </remarks>
        </member>
        <member name="F:Cadru.UnixTimestamp.MinValue">
            <summary>
            Represents the smallest possible value of
            <see cref="T:Cadru.UnixTimestamp"/>. This field is read-only.
            </summary>
            <remarks>
            The value of this constant is equivalent to 00:00:00, January 01, 0001.
            </remarks>
        </member>
        <member name="M:Cadru.UnixTimestamp.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.UnixTimestamp"/>
            structure to the specified number of seconds.
            </summary>
            <param name="seconds">
            A date and time expressed in the number of seconds that have elapsed
            since January 1, 1970 at 00:00:00.000 in the Gregorian calendar.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="seconds"/> is less than
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.UnixTimestamp"/>
            structure to the specified <see cref="P:Cadru.UnixTimestamp.DateTime"/> value.
            </summary>
            <param name="date">A date and time.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="date"/> is less than
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.UnixTimestamp"/>
            structure to the specified year, month and day.
            </summary>
            <param name="year">The year (0 through 9999).</param>
            <param name="month">The month (0 through 12).</param>
            <param name="day">The day (1 through the number of days in <paramref name="month"/>).</param>
        </member>
        <member name="M:Cadru.UnixTimestamp.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.UnixTimestamp"/>
            structure to the specified year, month, day, hour, minute, and second.
            </summary>
            <param name="year">The year (0 through 9999).</param>
            <param name="month">The month (0 through 12).</param>
            <param name="day">The day (1 through the number of days in <paramref name="month"/>).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="second"/> is less than
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="P:Cadru.UnixTimestamp.Now">
            <summary>
            Gets a <see cref="T:Cadru.UnixTimestamp"/> object that is set to the current
            date and time on this computer.
            </summary>
            <value>An object whose value is the current local date and time.</value>
        </member>
        <member name="P:Cadru.UnixTimestamp.DateTime">
            <summary>
            Gets a <see cref="P:Cadru.UnixTimestamp.DateTime"/> value that represents the date and
            time of the current <see cref="T:Cadru.UnixTimestamp"/> object.
            </summary>
            <value>
            The date and time of the current <see cref="T:Cadru.UnixTimestamp"/> object.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="P:Cadru.UnixTimestamp.DateTime"/> is less than
            <see cref="P:DateTime.MinValue"/> or greater than <see cref="P:DateTime.MaxValue"/>.
            </exception>
        </member>
        <member name="P:Cadru.UnixTimestamp.Days">
            <summary>
            Gets the number of days since 00:00:00 Coordinated Universal Time
            (UTC), Thursday, 1 January 1970 represented by current <see cref="T:Cadru.UnixTimestamp"/>.
            </summary>
            <value>
            The number of days since 00:00:00 Coordinated Universal Time (UTC),
            Thursday, 1 January 1970 represented by current <see cref="T:Cadru.UnixTimestamp"/>.
            </value>
        </member>
        <member name="P:Cadru.UnixTimestamp.Seconds">
            <summary>
            Gets the number of seconds that represent the date and time of this instance.
            </summary>
            <value>
            The number of seconds that represent the date and time of this
            instance. The value is between
            <see cref="P:UnixTimestamp.MinValue.Seconds"/> and <see cref="P:UnixTimestamp.MaxValue.Seconds"/>.
            </value>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_Implicit(Cadru.UnixTimestamp)~System.Int64">
            <summary>
            Defines an implicit conversion from <see cref="T:Cadru.UnixTimestamp"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_Implicit(System.Int64)~Cadru.UnixTimestamp">
            <summary>
            Defines an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:Cadru.UnixTimestamp"/>.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_Equality(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether two specified <see cref="T:Cadru.UnixTimestamp"/> objects
            represent the same point in time.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if both objects represent the same point in
            time; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_Inequality(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether two specified <see cref="T:Cadru.UnixTimestamp"/> objects
            represent different points in time.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> and
            <paramref name="right"/> do not represent the same point in time;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_LessThan(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether one specified <see cref="T:Cadru.UnixTimestamp"/> object
            is earlier than another specified <see cref="T:Cadru.UnixTimestamp"/> object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is earlier than
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_LessThanOrEqual(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether one specified <see cref="T:Cadru.UnixTimestamp"/> object
            is the same as or earlier than another specified
            <see cref="T:Cadru.UnixTimestamp"/> object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is the same as or
            earlier than <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_GreaterThan(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether one specified <see cref="T:Cadru.UnixTimestamp"/> object
            is later than another specified <see cref="T:Cadru.UnixTimestamp"/> object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is later than
            <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.op_GreaterThanOrEqual(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Determines whether one specified <see cref="T:Cadru.UnixTimestamp"/> object
            is the same as or later than another specified
            <see cref="T:Cadru.UnixTimestamp"/> object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> is the same as or
            later than <paramref name="right"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.Equals(Cadru.UnixTimestamp,Cadru.UnixTimestamp)">
            <summary>
            Returns a value indicating whether two <see cref="T:Cadru.UnixTimestamp"/>
            instances represent the same point in time.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>
            <see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.Add(System.TimeSpan)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the value of the
            specified <see cref="T:System.TimeSpan"/> to the value of this instance.
            </summary>
            <param name="value">The valueA positive or negative time interval.</param>
            <returns>
            An object whose value is the sum of the date and time represented by
            this instance and the time interval represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddDays(System.Double)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of days to the value of this instance.
            </summary>
            <param name="value">
            A number of whole and fractional days. The <paramref name="value"/>
            parameter can be negative or positive.
            </param>
            <returns>
            An object whose value is the sum of the date and time represented by
            this instance and the number of days represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddHours(System.Double)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of hours to the value of this instance.
            </summary>
            <param name="value">
            A number of whole and fractional hours. The <paramref name="value"/>
            parameter can be negative or positive.
            </param>
            <returns>
            An object whose value is the sum of the date and time represented by
            this instance and the number of hours represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddMinutes(System.Double)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of minutes to the value of this instance.
            </summary>
            <param name="value">
            A number of whole and fractional minutes. The
            <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            An object whose value is the sum of the date and time represented by
            this instance and the number of minutes represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddMonths(System.Int32)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of months to the value of this instance.
            </summary>
            <param name="months">
            A number of months. The <paramref name="months"/> parameter can be
            negative or positive.
            </param>
            <returns>
            An object whose value is the sum of the date and time represented by
            this instance and the number of months represented by <paramref name="months"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddSeconds(System.Double)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of seconds to the value of this instance.
            </summary>
            <param name="value">
            A number of whole and fractional seconds. The
            <paramref name="value"/> parameter can be negative or positive.
            </param>
            <returns>
            An object whose value is the sum of the date and time represented by
            this instance and the number of seconds represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.AddYears(System.Int32)">
            <summary>
            Returns a new <see cref="T:Cadru.UnixTimestamp"/> that adds the specified
            number of years to the value of this instance.
            </summary>
            <param name="years">
            A number of years. The <paramref name="years"/> parameter can be
            negative or positive.
            </param>
            <returns>
            An object whose value is the sum of the date and time represented by
            this instance and the number of years represented by <paramref name="years"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>
            The resulting <see cref="T:Cadru.UnixTimestamp"/> is less than
            <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </para>
            <para>-or-</para>
            <para><paramref name="years"/> is not in the valid range.</para>
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.CompareTo(System.Object)">
            <summary>
            Compares the value of this instance to a specified object that
            contains a specified <see cref="T:Cadru.UnixTimestamp"/> value, and returns
            an integer that indicates whether this instance is earlier than, the
            same as, or later than the specified <see cref="T:Cadru.UnixTimestamp"/> value.
            </summary>
            <param name="obj">A boxed object to compare, or <see langword="null"/>.</param>
            <returns>
            A signed number indicating the relative values of this instance and
            the <paramref name="obj"/> parameter.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>This instance is earlier than <paramref name="obj"/>.</description>
            </item>
            <item>
            <term>Zero</term>
            <description>This instance is the same as <paramref name="obj"/>.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>
            This instance is later than <paramref name="obj"/>, or
            <paramref name="obj"/> is <see langword="null"/>.
            </description>
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="obj"/> is not a <see cref="T:Cadru.UnixTimestamp"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.CompareTo(Cadru.UnixTimestamp)">
            <summary>
            Compares the value of this instance to a specified
            <see cref="T:Cadru.UnixTimestamp"/> value and returns an integer that
            indicates whether this instance is earlier than, the same as, or
            later than the specified <see cref="T:Cadru.UnixTimestamp"/> value.
            </summary>
            <param name="other">The object to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and
            the <paramref name="other"/> parameter.
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Condition</term>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>This instance is earlier than <paramref name="other"/>.</description>
            </item>
            <item>
            <term>Zero</term>
            <description>This instance is the same as <paramref name="other"/>.</description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>This instance is later than <paramref name="other"/>.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.Equals(System.Object)">
            <summary>
            Returns a value indicating whether the value of this instance is
            equal to the value of the specified <see cref="T:Cadru.UnixTimestamp"/> instance.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="obj"/> parameter
            equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The current instance and <paramref name="obj"/> are equal if their
            <see cref="P:Cadru.UnixTimestamp.Seconds"/> property values are equal.
            </remarks>
        </member>
        <member name="M:Cadru.UnixTimestamp.Equals(Cadru.UnixTimestamp)">
            <summary>
            Returns a value indicating whether the value of this instance is
            equal to the value of the specified <see cref="T:Cadru.UnixTimestamp"/> instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="other"/> parameter
            equals the value of this instance; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The current instance and <paramref name="other"/> are equal if their
            <see cref="P:Cadru.UnixTimestamp.Seconds"/> property values are equal.
            </remarks>
        </member>
        <member name="M:Cadru.UnixTimestamp.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.Subtract(Cadru.UnixTimestamp)">
            <summary>
            Subtracts the specified date and time from this instance.
            </summary>
            <param name="value">The date and time value to subtract.</param>
            <returns>
            A time interval that is equal to the date and time represented by
            this instance minus the date and time represented by <paramref name="value"/>.
            </returns>
            <remarks>
            If the date and time of the current instance is earlier than value,
            the method returns a <see cref="T:System.TimeSpan"/> object that represents a
            negative time span. That is, the value of all of its non-zero
            properties (such as Days or Ticks) is negative.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The result is less than <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.Subtract(System.TimeSpan)">
            <summary>
            Subtracts the specified duration from this instance.
            </summary>
            <param name="value">The time interval to subtract.</param>
            <returns>
            An object that is equal to the date and time represented by this
            instance minus the time interval represented by <paramref name="value"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The result is less than <see cref="F:Cadru.UnixTimestamp.MinValue"/> or greater than <see cref="F:Cadru.UnixTimestamp.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Cadru.UnixTimestamp.ToDateTime">
            <summary>
            Converts the value of the current <see cref="T:Cadru.UnixTimestamp"/> object
            to its equivalent <see cref="P:Cadru.UnixTimestamp.DateTime"/>.
            </summary>
            <returns>
            A <see cref="P:Cadru.UnixTimestamp.DateTime"/> representing the current
            <see cref="T:Cadru.UnixTimestamp"/> object.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.ToString">
            <summary>
            Converts the value of the current <see cref="T:Cadru.UnixTimestamp"/> object
            to its equivalent string representation.
            </summary>
            <returns>
            A string representation of the value of the current
            <see cref="T:Cadru.UnixTimestamp"/> object.
            </returns>
        </member>
        <member name="M:Cadru.UnixTimestamp.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the current <see cref="T:Cadru.UnixTimestamp"/> object
            to its equivalent string representation using the specified format
            and culture-specific format information.
            </summary>
            <param name="format">A numeric format string.</param>
            <param name="formatProvider">
            An object that supplies culture-specific formatting information.
            </param>
            <returns>
            A string representation of value of the current
            <see cref="T:Cadru.UnixTimestamp"/> object as specified by
            <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
            <exception cref="T:System.FormatException">
            <paramref name="format"/> is invalid or not supported.
            </exception>
        </member>
        <member name="T:Cadru.WeakReference`1">
            <summary>
            Represents a weak reference, which references an object while still
            allowing that object to be reclaimed by garbage collection.
            </summary>
            <typeparam name="T">The type of object referenced.</typeparam>
        </member>
        <member name="M:Cadru.WeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.WeakReference`1"/>
            class, referencing the specified object.
            </summary>
            <param name="target">An object to track or <see langword="null"/>.</param>
        </member>
        <member name="M:Cadru.WeakReference`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.WeakReference`1"/>
            class, referencing the specified object and using the specified
            resurrection tracking.
            </summary>
            <param name="target">An object to track.</param>
            <param name="trackResurrection">
            Indicates when to stop tracking the object. If
            <see langword="true"/>, the object is tracked after finalization; if
            <see langword="false"/>, the object is only tracked until finalization.
            </param>
        </member>
        <member name="P:Cadru.WeakReference`1.Target">
            <summary>
            Gets or sets the object (the target) referenced by the current
            <see cref="T:Cadru.WeakReference`1"/> object.
            </summary>
            <value>
            <see langword="null"/> if the object referenced by the current
            <see cref="T:Cadru.WeakReference`1"/> object has been garbage collected;
            otherwise, a reference to the object referenced by the current
            <see cref="T:Cadru.WeakReference`1"/> object.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The reference to the target object is invalid. This exception can be
            thrown while setting this property if the value is a null reference
            or if the object has been finalized during the set operation.
            </exception>
        </member>
    </members>
</doc>
