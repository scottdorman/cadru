//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cadru.Polly.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Cadru.Polly.Resources.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PolicyKey cannot be changed once set; or (when using the default value after the PolicyKey property has been accessed..
        /// </summary>
        internal static string ArgumentException_PolicyKeyMutability {
            get {
                return ResourceManager.GetString("ArgumentException.PolicyKeyMutability", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A severe error occurred on the current command.  The results, if any, should be discarded..
        /// </summary>
        internal static string SQL_SevereError {
            get {
                return ResourceManager.GetString("SQL_SevereError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are duplicate policies configured. When using WithDefaults, you don&apos;t need to also include WithCircuitBreaker, WithOverallTimeout, or WithTransientErrors..
        /// </summary>
        internal static string SqlServer_DuplicatedPolicies {
            get {
                return ResourceManager.GetString("SqlServer.DuplicatedPolicies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A TimeoutPerRetry policy is configured without any Retry policies..
        /// </summary>
        internal static string SqlServer_InvalidTimeoutConfiguration {
            get {
                return ResourceManager.GetString("SqlServer.InvalidTimeoutConfiguration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Database operation circuit broken, next retry in {@1}, exception: {@2}.
        /// </summary>
        internal static string SqlServer_LoggingMessage_CircuitBroken {
            get {
                return ResourceManager.GetString("SqlServer.LoggingMessage.CircuitBroken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Database operation circuit reset..
        /// </summary>
        internal static string SqlServer_LoggingMessage_CircuitReset {
            get {
                return ResourceManager.GetString("SqlServer.LoggingMessage.CircuitReset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Database operation retry attempt {@0}, exception: {@1}..
        /// </summary>
        internal static string SqlServer_LoggingMessage_RetryFailure {
            get {
                return ResourceManager.GetString("SqlServer.LoggingMessage.RetryFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Database operation timed out, exception {@0}..
        /// </summary>
        internal static string SqlServer_LoggingMessage_Timeout {
            get {
                return ResourceManager.GetString("SqlServer.LoggingMessage.Timeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There are no policies configured..
        /// </summary>
        internal static string SqlServer_NoPoliciesConfigured {
            get {
                return ResourceManager.GetString("SqlServer.NoPoliciesConfigured", resourceCulture);
            }
        }
    }
}
