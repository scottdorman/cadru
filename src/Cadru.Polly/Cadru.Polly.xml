<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cadru.Polly</name>
    </assembly>
    <members>
        <member name="T:Cadru.Polly.ContextExtensions">
            <summary>
            Extension methods for working with a <see cref="T:Polly.Context"/>.
            </summary>
        </member>
        <member name="M:Cadru.Polly.ContextExtensions.CreateScope(Polly.Context)">
            <inheritdoc cref="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.CreateScope(System.IServiceProvider)"/>
            <param name="context">
            The <see cref="T:Polly.Context"/> to retrieve items from.
            </param>
        </member>
        <member name="M:Cadru.Polly.ContextExtensions.GetLogger(Polly.Context)">
            <summary>
            Gets an <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance from the <see cref="T:Polly.Context"/>.
            </summary>
            <param name="context">
            The <see cref="T:Polly.Context"/> to retrieve items from.
            </param>
            <returns>
            An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance if one is found in the
            <paramref name="context"/>; otherwise, <see langword="null"/>.
            </returns>
            <remarks>
            This expects the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to be a context item
            and does not resolve it from the <see cref="T:System.IServiceProvider"/>.
            </remarks>
        </member>
        <member name="M:Cadru.Polly.ContextExtensions.GetRequiredService``1(Polly.Context)">
            <inheritdoc cref="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService``1(System.IServiceProvider)"/>
            <param name="context">
            The <see cref="T:Polly.Context"/> to retrieve items from.
            </param>
        </member>
        <member name="M:Cadru.Polly.ContextExtensions.GetService``1(Polly.Context)">
            <inheritdoc cref="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService``1(System.IServiceProvider)"/>
            <param name="context">
            The <see cref="T:Polly.Context"/> to retrieve items from.
            </param>
        </member>
        <member name="M:Cadru.Polly.ContextExtensions.GetServices``1(Polly.Context)">
            <inheritdoc cref="M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices``1(System.IServiceProvider)"/>
            <param name="context">
            The <see cref="T:Polly.Context"/> to retrieve items from.
            </param>
        </member>
        <member name="M:Cadru.Polly.ContextExtensions.TryGetLogger(Polly.Context,Microsoft.Extensions.Logging.ILogger@)">
            <summary>
            Gets an <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance from the <see cref="T:Polly.Context"/>.
            </summary>
            <param name="context">
            The <see cref="T:Polly.Context"/> to retrieve items from.
            </param>
            <param name="logger">
            When this method returns, contains the <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
            instance if one is found in the <paramref name="context"/>;
            otherwise, <see langword="null"/>. This parameter is passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="context"/> contains an
            <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This expects the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to be a context item
            and does not resolve it from the <see cref="T:System.IServiceProvider"/>.
            </remarks>
        </member>
        <member name="M:Cadru.Polly.ContextExtensions.TryGetValue``1(Polly.Context,System.String,``0@)">
            <summary>
            Gets the value associated with the specified key from the <see cref="T:Polly.Context"/>.
            </summary>
            <param name="context">
            The <see cref="T:Polly.Context"/> to retrieve items from.
            </param>
            <param name="key">The key of the value to get.</param>
            <param name="value">
            When this method returns, contains the value associated with the
            specified key, if the key is found in the
            <paramref name="context"/>; otherwise, the default value for the
            type of the <paramref name="value"/> parameter. This parameter is
            passed uninitialized.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="context"/> contains an
            element with the specified key; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Cadru.Polly.ContextExtensions.WithContextData(Polly.Context,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds additional items to the <see cref="T:Polly.Context"/>.
            </summary>
            <param name="context">The <see cref="T:Polly.Context"/> to add items to.</param>
            <param name="contextData">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are
            copied into the <paramref name="context"/>.
            </param>
            <returns>
            The <see cref="T:Polly.Context"/> so that additional calls can be chained.
            </returns>
        </member>
        <member name="M:Cadru.Polly.ContextExtensions.WithContextData(Polly.Context,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds additional items to the <see cref="T:Polly.Context"/>.
            </summary>
            <param name="context">The <see cref="T:Polly.Context"/> to add items to.</param>
            <param name="contextData">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied into the <paramref name="context"/>.
            </param>
            <returns>
            The <see cref="T:Polly.Context"/> so that additional calls can be chained.
            </returns>
        </member>
        <member name="M:Cadru.Polly.ContextExtensions.WithLogger(Polly.Context,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Adds the specified <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to <see cref="T:Polly.Context"/>.
            </summary>
            <param name="context">
            The <see cref="T:Polly.Context"/> to add the <paramref name="logger"/> to.
            </param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance to be added.</param>
            <returns>
            The <see cref="T:Polly.Context"/> so that additional calls can be chained.
            </returns>
            <remarks>
            This adds the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance as a context item.
            </remarks>
        </member>
        <member name="T:Cadru.Polly.Data.ISqlStrategy">
            <summary>
            Represents the policies used for performing database operations.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.ISqlStrategy.AsyncPolicy">
            <summary>
            The asynchronous policy used for performing database operations.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.ISqlStrategy.SyncPolicy">
            <summary>
            The synchronous policy used for performing database operations.
            </summary>
        </member>
        <member name="T:Cadru.Polly.Data.ISqlStrategyFactory">
            <summary>
            Represents a set of methods for creating instances of an <see cref="T:Cadru.Polly.Data.ISqlStrategy"/>.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.ISqlStrategyFactory.Create(System.IServiceProvider,System.Collections.Generic.IEnumerable{Cadru.Polly.IExceptionHandlingStrategy})">
            <summary>
            Create a new <see cref="T:Cadru.Polly.Data.ISqlStrategy"/> instance.
            </summary>
            <returns>A new <see cref="T:Cadru.Polly.Data.ISqlStrategy"/>.</returns>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.ServiceCollectionExtensions">
            <summary>
            Extension methods for adding exception handling strategies in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.ServiceCollectionExtensions.UseExceptionHandlingStrategies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds default exception handling strategies to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add services to.
            </param>
            <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.
            </returns>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.NetworkConnectivityExceptionHandlingStrategy">
            <summary>
            Defines a strategy for determining transient SQL Server network
            connectivity errors.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.NetworkConnectivityExceptionHandlingStrategy.ShouldHandle(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.SqlServerTimeoutExceptionHandlingStrategy">
            <summary>
            Defines a strategy for determining SQL Server timeout errors.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerTimeoutExceptionHandlingStrategy.ShouldHandle(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.SqlServerTransientExceptionHandlingStrategy">
            <summary>
            Defines a strategy for determining transient SQL Server errors.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerTransientExceptionHandlingStrategy.ShouldHandle(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.SqlServerTransientTransactionExceptionHandlingStrategy">
            <summary>
            Defines a strategy for determining transient SQL Server transaction errors.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerTransientTransactionExceptionHandlingStrategy.ShouldHandle(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.SqlServerStrategyBuilder">
            <summary>
            Represents the policies used for performing SQL Server database operations.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.SqlServerStrategyBuilder.Default">
            <summary>
            Creates a <see cref="T:Cadru.Polly.Data.SqlServer.SqlServerStrategyBuilder"/> with default policies already included.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.SqlServerStrategyBuilder.Empty">
            <summary>
            Creates a <see cref="T:Cadru.Polly.Data.SqlServer.SqlServerStrategyBuilder"/> with no policies.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerStrategyBuilder.#ctor(System.Collections.Generic.IEnumerable{Cadru.Polly.IExceptionHandlingStrategy},Microsoft.Extensions.Options.IOptions{Cadru.Polly.Data.SqlStrategyOptions})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.Polly.Data.SqlServer.SqlServerStrategyBuilder"/> class.
            </summary>
            <param name="exceptionHandlingStrategies">
            The collection of <see cref="T:Cadru.Polly.IExceptionHandlingStrategy"/>
            strategies to use.
            </param>
            <param name="strategyOptionsAccessor">
            The strategy configuration. If
            <paramref name="strategyOptionsAccessor"/> is
            <see langword="null"/>, a default configuration will be used.
            </param>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerStrategyBuilder.Validate">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.SqlServerStrategyFactory">
            <summary>
            Represents a set of methods for creating instances of an <see cref="T:Cadru.Polly.Data.SqlServer.SqlServerStrategyBuilder"/>.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.SqlServerStrategyFactory.Instance">
            <summary>
            Gets an instance of the <see cref="T:Cadru.Polly.Data.SqlServer.SqlServerStrategyFactory"/>.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerStrategyFactory.CreateStrategyBuilder(System.IServiceProvider,System.Collections.Generic.IEnumerable{Cadru.Polly.IExceptionHandlingStrategy})">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax">
            <summary>
            Fluent API for defining a <see cref="T:Cadru.Polly.Data.SqlStrategy"/>.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.Retry(Cadru.Polly.Data.SqlStrategyBuilder,Cadru.Polly.IExceptionHandlingStrategy,Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            Builds a <see cref="T:Cadru.Polly.Data.SqlStrategy"/> with a policy for retrying
            actions on transaction failures.
            </summary>
            <param name="sqlStrategy">The SQL strategy.</param>
            <param name="exceptionHandlingStrategy">
            The exception handling strategy used to determine which exceptions
            should be retried.
            </param>
            <param name="sqlStrategyConfiguration">
            An <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> containing configuration parameters.
            </param>
            <returns>The strategy instance.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithCircuitBreakers(Cadru.Polly.Data.SqlStrategyBuilder,Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            Builds a <see cref="T:Cadru.Polly.Data.SqlStrategy"/> with policies that will function
            like a Circuit Breaker.
            </summary>
            <param name="sqlStrategyBuilder">The SQL strategy.</param>
            <param name="sqlStrategyConfiguration">
            An <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> containing configuration parameters.
            </param>
            <returns>The strategy instance.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithFallback``1(Cadru.Polly.Data.SqlStrategyBuilder,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Builds a <see cref="T:Cadru.Polly.Data.SqlStrategy"/> with a policy which provides a
            fallback action if the main execution fails.
            </summary>
            <param name="sqlStrategy">The SQL strategy.</param>
            <param name="action">The fallback action delegate.</param>
            <returns>The strategy instance.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithFallback(Cadru.Polly.Data.SqlStrategyBuilder,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Builds a <see cref="T:Cadru.Polly.Data.SqlStrategy"/> with a policy which provides a
            fallback action if the main execution fails.
            </summary>
            <param name="sqlStrategy">The SQL strategy.</param>
            <param name="action">The fallback action delegate.</param>
            <returns>The strategy instance.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithOverallAndTimeoutPerRetry(Cadru.Polly.Data.SqlStrategyBuilder,Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            Builds a <see cref="T:Cadru.Polly.Data.SqlStrategy"/> with policies for both an overall
            timeout and a per retry timeout.
            </summary>
            <param name="sqlStrategy">The SQL strategy.</param>
            <param name="sqlStrategyConfiguration">
            An <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> containing configuration parameters.
            </param>
            <returns>The strategy instance.</returns>
            <remarks>
            This is equivalent to calling
            <see cref="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithOverallTimeout(Cadru.Polly.Data.SqlStrategyBuilder,Cadru.Polly.Data.SqlStrategyOptions)"/>, <see cref="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithTimeoutPerRetry(Cadru.Polly.Data.SqlStrategyBuilder,Cadru.Polly.Data.SqlStrategyOptions)"/>.
            </remarks>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithOverallTimeout(Cadru.Polly.Data.SqlStrategyBuilder,Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            Builds a <see cref="T:Cadru.Polly.Data.SqlStrategy"/> with a policy for an overall timeout.
            </summary>
            <param name="sqlStrategy">The SQL strategy.</param>
            <param name="sqlStrategyConfiguration">
            An <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> containing configuration parameters.
            </param>
            <returns>The strategy instance.</returns>
            <remarks>
            This is equivalent to calling
            <see cref="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithOverallTimeout(Cadru.Polly.Data.SqlStrategyBuilder,Cadru.Polly.Data.SqlStrategyOptions)"/>, <see cref="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithTimeoutPerRetry(Cadru.Polly.Data.SqlStrategyBuilder,Cadru.Polly.Data.SqlStrategyOptions)"/>.
            </remarks>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithTimeoutPerRetry(Cadru.Polly.Data.SqlStrategyBuilder,Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            Builds a <see cref="T:Cadru.Polly.Data.SqlStrategy"/> with a policy for a per retry timeout.
            </summary>
            <param name="sqlStrategy">The SQL strategy.</param>
            <param name="sqlStrategyConfiguration">
            An <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> containing configuration parameters.
            </param>
            <returns>The strategy instance.</returns>
            <remarks>
            This is equivalent to calling
            <see cref="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithOverallTimeout(Cadru.Polly.Data.SqlStrategyBuilder,Cadru.Polly.Data.SqlStrategyOptions)"/>, <see cref="M:Cadru.Polly.Data.SqlServer.SqlServerStrategySyntax.WithTimeoutPerRetry(Cadru.Polly.Data.SqlStrategyBuilder,Cadru.Polly.Data.SqlStrategyOptions)"/>.
            </remarks>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.ThrottledResourceType">
            <summary>
            Defines the types of resources in SQL Database that may be subject to
            throttling conditions.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottledResourceType.PhysicalDatabaseSpace">
            <summary>
            Corresponds to the "Physical Database Space" resource, which may be
            subject to throttling.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottledResourceType.PhysicalLogSpace">
            <summary>
            Corresponds to the "Physical Log File Space" resource, which may be
            subject to throttling.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottledResourceType.LogWriteIoDelay">
            <summary>
            Corresponds to the "Transaction Log Write IO Delay" resource, which
            may be subject to throttling.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottledResourceType.DataReadIoDelay">
            <summary>
            Corresponds to the "Database Read IO Delay" resource, which may be
            subject to throttling.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottledResourceType.Cpu">
            <summary>
            Corresponds to the "CPU" resource, which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottledResourceType.DatabaseSize">
            <summary>
            Corresponds to the "Database Size" resource, which may be subject to throttling.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottledResourceType.WorkerThreads">
            <summary>
            Corresponds to the "SQL Worker Thread Pool" resource, which may be
            subject to throttling.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottledResourceType.Internal">
            <summary>
            Corresponds to an internal resource that may be subject to throttling.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottledResourceType.Unknown">
            <summary>
            Corresponds to an unknown resource type in the event that the actual
            resource cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.ThrottlingMode">
            <summary>
            Defines the possible throttling modes in SQL Database.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingMode.NoThrottling">
            <summary>
            Corresponds to the "No Throttling" throttling mode, in which all SQL
            statements can be processed.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingMode.RejectUpdateInsert">
            <summary>
            Corresponds to the "Reject Update / Insert" throttling mode, in
            which SQL statements such as INSERT, UPDATE, CREATE TABLE, and
            CREATE INDEX are rejected.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingMode.RejectAllWrites">
            <summary>
            Corresponds to the "Reject All Writes" throttling mode, in which SQL
            statements such as INSERT, UPDATE, DELETE, CREATE, and DROP are rejected.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingMode.RejectAll">
            <summary>
            Corresponds to the "Reject All" throttling mode, in which all SQL
            statements are rejected.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingMode.Unknown">
            <summary>
            Corresponds to an unknown throttling mode whereby throttling mode
            cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.ThrottlingType">
            <summary>
            Defines the possible throttling types in SQL Database.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingType.None">
            <summary>
            Indicates that no throttling was applied to a given resource.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingType.Soft">
            <summary>
            Corresponds to a soft throttling type. Soft throttling is applied
            when machine resources such as, CPU, I/O, storage, and worker
            threads exceed predefined safety thresholds despite the load
            balancer’s best efforts.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingType.Hard">
            <summary>
            Corresponds to a hard throttling type. Hard throttling is applied
            when the machine is out of resources, for example storage space.
            With hard throttling, no new connections are allowed to the
            databases hosted on the machine until resources are freed up.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingType.Unknown">
            <summary>
            Corresponds to an unknown throttling type in the event that the
            throttling type cannot be determined with certainty.
            </summary>
        </member>
        <member name="T:Cadru.Polly.Data.SqlServer.ThrottlingCondition">
            <summary>
            Implements an object that holds the decoded reason code returned from
            SQL Database when throttling conditions are encountered.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingCondition.ThrottlingErrorNumber">
            <summary>
            Gets the error number that corresponds to the throttling conditions
            reported by SQL Database.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingCondition.sqlErrorCodeRegEx">
            <summary>
            Provides a compiled regular expression used to extract the reason
            code from the error message.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlServer.ThrottlingCondition.throttledResources">
            <summary>
            Maintains a collection of key/value pairs where a key is the
            resource type and a value is the type of throttling applied to the
            given resource type.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.ThrottlingCondition.Unknown">
            <summary>
            Gets an unknown throttling condition in the event that the actual
            throttling condition cannot be determined.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.ThrottlingCondition.IsThrottledOnCpu">
            <summary>
            Gets a value that indicates whether CPU throttling was reported by
            SQL Database.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.ThrottlingCondition.IsThrottledOnDatabaseSize">
            <summary>
            Gets a value that indicates whether database size throttling was
            reported by SQL Database.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.ThrottlingCondition.IsThrottledOnDataRead">
            <summary>
            Gets a value that indicates whether data read activity throttling
            was reported by SQL Database.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.ThrottlingCondition.IsThrottledOnDataSpace">
            <summary>
            Gets a value that indicates whether physical data file space
            throttling was reported by SQL Database.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.ThrottlingCondition.IsThrottledOnLogSpace">
            <summary>
            Gets a value that indicates whether physical log space throttling
            was reported by SQL Database.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.ThrottlingCondition.IsThrottledOnLogWrite">
            <summary>
            Gets a value that indicates whether transaction activity throttling
            was reported by SQL Database.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.ThrottlingCondition.IsThrottledOnWorkerThreads">
            <summary>
            Gets a value that indicates whether concurrent requests throttling
            was reported by SQL Database.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.ThrottlingCondition.IsUnknown">
            <summary>
            Gets a value that indicates whether throttling conditions were not
            determined with certainty.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.ThrottlingCondition.ThrottledResources">
            <summary>
            Gets a list of the resources in the SQL Database that were subject
            to throttling conditions.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlServer.ThrottlingCondition.ThrottlingMode">
            <summary>
            Gets the value that reflects the throttling mode in SQL Database.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.ThrottlingCondition.FromError(Microsoft.Data.SqlClient.SqlError)">
            <summary>
            Determines the throttling conditions from the specified SQL error.
            </summary>
            <param name="error">
            The <see cref="T:Microsoft.Data.SqlClient.SqlError"/> object that contains information relevant
            to a warning or error returned by SQL Server.
            </param>
            <returns>
            An instance of the object that holds the decoded reason codes
            returned from SQL Database when throttling conditions were encountered.
            </returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.ThrottlingCondition.FromException(Microsoft.Data.SqlClient.SqlException)">
            <summary>
            Determines throttling conditions from the specified SQL exception.
            </summary>
            <param name="ex">
            The <see cref="T:Microsoft.Data.SqlClient.SqlException"/> object that contains information
            relevant to an error returned by SQL Server when throttling
            conditions were encountered.
            </param>
            <returns>
            An instance of the object that holds the decoded reason codes
            returned from SQL Database when throttling conditions were encountered.
            </returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.ThrottlingCondition.FromReasonCode(System.Int32)">
            <summary>
            Determines the throttling conditions from the specified reason code.
            </summary>
            <param name="reasonCode">
            The reason code returned by SQL Database that contains the
            throttling mode and the exceeded resource types.
            </param>
            <returns>
            An instance of the object holding the decoded reason codes returned
            from SQL Database when encountering throttling conditions.
            </returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlServer.ThrottlingCondition.ToString">
            <summary>
            Returns a textual representation of the current ThrottlingCondition
            object, including the information held with respect to throttled resources.
            </summary>
            <returns>
            A string that represents the current ThrottlingCondition object.
            </returns>
        </member>
        <member name="T:Cadru.Polly.Data.SqlStrategy">
            <summary>
            Represents the policies used for performing database operations.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Polly.Data.SqlStrategy"/> class.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategy.Default">
            <summary>
            Gets a <see cref="T:Cadru.Polly.Data.SqlStrategy"/> containing policies that will
            execute without any custom behavior.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategy.AsyncPolicy">
            <inheritdoc/>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategy.SyncPolicy">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategy.NoOp">
            <summary>
            Builds a NoOp <see cref="P:Cadru.Polly.Data.SqlStrategy.SyncPolicy"/> that will execute without any
            custom behavior.
            </summary>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategy.NoOpAsync">
            <summary>
            Builds a NoOp <see cref="P:Cadru.Polly.Data.SqlStrategy.AsyncPolicy"/> that will execute without
            any custom behavior.
            </summary>
            <returns>The policy instance.</returns>
        </member>
        <member name="T:Cadru.Polly.Data.SqlStrategyBuilder">
            <summary>
            Builder class that holds the list of current exception predicates
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyBuilder.#ctor(System.Collections.Generic.IEnumerable{Cadru.Polly.IExceptionHandlingStrategy},Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Polly.Data.SqlStrategyBuilder"/> class.
            </summary>
            <param name="exceptionHandlingStrategies">
            The collection of <see cref="T:Cadru.Polly.IExceptionHandlingStrategy"/>
            strategies to use.
            </param>
            <param name="strategyOptions">An optional strategy configuration.</param>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyBuilder.#ctor(System.Collections.Generic.IEnumerable{Cadru.Polly.IExceptionHandlingStrategy},Microsoft.Extensions.Options.IOptions{Cadru.Polly.Data.SqlStrategyOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Polly.Data.SqlStrategyBuilder"/> class.
            </summary>
            <param name="exceptionHandlingStrategies">
            The collection of <see cref="T:Cadru.Polly.IExceptionHandlingStrategy"/>
            strategies to use.
            </param>
            <param name="strategyOptionsAccessor">An optional strategy configuration.</param>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategyBuilder.ExceptionHandlingStrategies">
            <summary>
            Gets the <see cref="T:Cadru.Polly.IExceptionHandlingStrategy">exception handling
            strategies</see> used.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategyBuilder.Policies">
            <summary>
            Gets the list of policies which make up the strategy.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategyBuilder.StrategyOptions">
            <summary>
            Gets the <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> used to configure the policies.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyBuilder.NoOp">
            <summary>
            Builds a NoOp <see cref="T:Polly.Policy"/> that will execute without any
            custom behavior.
            </summary>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyBuilder.NoOpAsync">
            <summary>
            Builds a NoOp <see cref="T:Polly.AsyncPolicy"/> that will execute without
            any custom behavior.
            </summary>
            <returns>The policy instance.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyBuilder.Build">
            <summary>
            Builds a <see cref="T:Cadru.Polly.Data.ISqlStrategy"/>.
            </summary>
            <returns>The SQL strategy instance.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyBuilder.GetDefaultPolicyBuilder">
            <summary>
            Gets a <see cref="T:Polly.PolicyBuilder"/> which handles the exceptions in
            the default <see cref="T:Cadru.Polly.IExceptionHandlingStrategy"/>.
            </summary>
            <returns>A <see cref="T:Polly.PolicyBuilder"/> instance.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyBuilder.GetPolicyBuilder">
            <summary>
            Gets a <see cref="T:Polly.PolicyBuilder"/> which handles all of the
            exceptions in <see cref="P:Cadru.Polly.Data.SqlStrategyBuilder.ExceptionHandlingStrategies"/>.
            </summary>
            <returns>A <see cref="T:Polly.PolicyBuilder"/> instance.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyBuilder.GetAsyncPolicies">
            <summary>
            Gets the ordered set of asynchronous policies to build.
            </summary>
            <returns>An ordered set of asynchronous policies.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyBuilder.GetSyncPolicies">
            <summary>
            Gets the ordered set of synchronous policies to build.
            </summary>
            <returns>An ordered set of synchronous policies.</returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyBuilder.Validate">
            <summary>
            When overridden in a derived class, provides additional validation
            for the policies before building them.
            </summary>
        </member>
        <member name="T:Cadru.Polly.Data.SqlStrategyFactory">
            <summary>
            Represents a set of methods for creating instances of an <see cref="T:Cadru.Polly.Data.ISqlStrategy"/>.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Polly.Data.SqlStrategyFactory"/> class.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyFactory.Create(System.IServiceProvider,System.Collections.Generic.IEnumerable{Cadru.Polly.IExceptionHandlingStrategy})">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyFactory.CreateStrategyBuilder(System.IServiceProvider,System.Collections.Generic.IEnumerable{Cadru.Polly.IExceptionHandlingStrategy})">
            <summary>
            When overridden in a derived class, creates a new
            <see cref="T:Cadru.Polly.Data.ISqlStrategy"/> instance.
            </summary>
            <returns>A new <see cref="T:Cadru.Polly.Data.ISqlStrategy"/>.</returns>
        </member>
        <member name="T:Cadru.Polly.Data.SqlStrategyOptions">
            <summary>
            The configuration options for a retry strategy.
            </summary>
        </member>
        <member name="F:Cadru.Polly.Data.SqlStrategyOptions.SectionKey">
            <summary>
            The configuration section key.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategyOptions.DurationOfBreak">
            <summary>
            The duration the circuit will stay open before resetting.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategyOptions.ExceptionsAllowedBeforeBreaking">
            <summary>
            The number of exceptions that are allowed before opening the circuit.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategyOptions.OverallTimeout">
            <summary>
            The timeout for the overall strategy.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategyOptions.RetryCount">
            <summary>
            The retry count.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategyOptions.TimeoutPerRetry">
            <summary>
            The timeout for each retry.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Data.SqlStrategyOptions.Defaults">
            <summary>
            Gets the default options values.
            </summary>
        </member>
        <member name="T:Cadru.Polly.Data.SqlStrategyOptionsExtensions">
            <summary>
            Helper methods for getting strongly typed values from an <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/>.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyOptionsExtensions.DurationOfBreak(Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            The duration the circuit will stay open before resetting.
            </summary>
            <param name="sqlStrategyOptions">
            The <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> instance.
            </param>
            <returns>
            The configured value if it is not <see langword="null"/>; otherwise,
            the default value.
            </returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyOptionsExtensions.ExceptionsAllowedBeforeBreaking(Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            The number of exceptions that are allowed before opening the circuit.
            </summary>
            <param name="sqlStrategyOptions">
            The <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> instance.
            </param>
            <returns>
            The configured value if it is not <see langword="null"/>; otherwise,
            the default value.
            </returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyOptionsExtensions.ExponentialBackoff(Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            Generates sleep durations in an exponential manner.
            </summary>
            <param name="sqlStrategyOptions">
            The <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> instance.
            </param>
            <returns>
            The configured value if it is not <see langword="null"/> otherwise,
            the default value.
            </returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyOptionsExtensions.OverallTimeout(Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            The timeout for the overall policy.
            </summary>
            <param name="sqlStrategyOptions">
            The <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> instance.
            </param>
            <returns>
            The configured value if it is not <see langword="null"/>; otherwise,
            the default value.
            </returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyOptionsExtensions.RetryCount(Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            The retry count.
            </summary>
            <param name="sqlStrategyOptions">
            The <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> instance.
            </param>
            <returns>
            The configured value if it is not <see langword="null"/>; otherwise,
            the default value.
            </returns>
        </member>
        <member name="M:Cadru.Polly.Data.SqlStrategyOptionsExtensions.TimeoutPerRetry(Cadru.Polly.Data.SqlStrategyOptions)">
            <summary>
            The timeout for each retry.
            </summary>
            <param name="sqlStrategyOptions">
            The <see cref="T:Cadru.Polly.Data.SqlStrategyOptions"/> instance.
            </param>
            <returns>
            The configured value if it is not <see langword="null"/>; otherwise,
            the default value.
            </returns>
        </member>
        <member name="T:Cadru.Polly.AsyncExecutionEnvironment">
            <summary>
            Represents both a <see cref="T:Polly.Context"/> and an
            <see cref="T:Polly.IAsyncPolicy"/> for execution.
            </summary>
        </member>
        <member name="M:Cadru.Polly.AsyncExecutionEnvironment.#ctor(Polly.IAsyncPolicy,Polly.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Polly.ExecutionEnvironment"/>.
            </summary>
            <param name="policy">The policy for executing actions.</param>
            <param name="context">
            The context for a single execution through a Policy.
            </param>
        </member>
        <member name="P:Cadru.Polly.AsyncExecutionEnvironment.Policy">
            <summary>
            The asynchronous policy for execution.
            </summary>
        </member>
        <member name="T:Cadru.Polly.ExecutionEnvironment">
            <summary>
            Represents both a <see cref="T:Polly.Context"/> and an <see cref="T:Polly.ISyncPolicy"/>
            for execution.
            </summary>
        </member>
        <member name="M:Cadru.Polly.ExecutionEnvironment.#ctor(Polly.ISyncPolicy,Polly.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Polly.ExecutionEnvironment"/>.
            </summary>
            <param name="policy">The policy for executing actions.</param>
            <param name="context">
            The context for a single execution through a Policy.
            </param>
        </member>
        <member name="P:Cadru.Polly.ExecutionEnvironment.Policy">
            <summary>
            The synchronous policy for execution.
            </summary>
        </member>
        <member name="T:Cadru.Polly.PolicyExecutionEnvironment">
            <summary>
            Represents both a <see cref="P:Cadru.Polly.PolicyExecutionEnvironment.Context"/> and a Policy for execution.
            </summary>
        </member>
        <member name="M:Cadru.Polly.PolicyExecutionEnvironment.#ctor(Polly.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Polly.PolicyExecutionEnvironment"/>.
            </summary>
            <param name="context">
            The context for a single execution through a Policy.
            </param>
        </member>
        <member name="P:Cadru.Polly.PolicyExecutionEnvironment.Context">
            <summary>
            Context for a single execution through a Policy.
            </summary>
        </member>
        <member name="T:Cadru.Polly.IExceptionHandlingStrategy">
            <summary>
            Defines an interface that must be implemented by custom components
            responsible for detecting specific transient conditions.
            </summary>
        </member>
        <member name="M:Cadru.Polly.IExceptionHandlingStrategy.ShouldHandle(System.Exception)">
            <summary>
            Determines whether the specified exception represents a transient
            failure that can be compensated by a retry.
            </summary>
            <param name="exception">The exception object to be verified.</param>
            <returns>
            true if the specified exception is considered as transient;
            otherwise, false.
            </returns>
        </member>
        <member name="T:Cadru.Polly.IPolicyContextFactory">
            <summary>
            Represents a set of methods for creating instances of a
            <see cref="T:Polly.Context"/> which has an <see cref="T:System.IServiceProvider"/> item
            automatically added.
            </summary>
        </member>
        <member name="M:Cadru.Polly.IPolicyContextFactory.Create">
            <summary>
            Create a new <see cref="T:Polly.Context"/> instance.
            </summary>
            <returns>
            A new <see cref="T:Polly.Context"/> which has an
            <see cref="T:System.IServiceProvider"/> item automatically added.
            </returns>
        </member>
        <member name="M:Cadru.Polly.IPolicyContextFactory.CreateAsync">
            <summary>
            Create a new <see cref="T:Polly.Context"/> instance.
            </summary>
            <returns>
            A new <see cref="T:Polly.Context"/> which has an
            <see cref="T:System.IServiceProvider"/> item automatically added.
            </returns>
        </member>
        <member name="T:Cadru.Polly.Logging.AsyncLoggingPolicy">
            <summary>
            A Logging policy that can be applied to asynchronous delegates.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Logging.AsyncLoggingPolicy.ImplementationAsync``1(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Polly.Logging.AsyncLoggingPolicy`1">
            <summary>
            A Logging policy that can be applied to asynchronous delegates returning
            a value of type <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TResult">
            The type of return values this policy will handle.
            </typeparam>
        </member>
        <member name="M:Cadru.Polly.Logging.AsyncLoggingPolicy`1.ImplementationAsync(System.Func{Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}},Polly.Context,System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Polly.Logging.ILoggingPolicy">
            <summary>
            Defines properties common to synchronous and asynchronous Logging policies.
            </summary>
        </member>
        <member name="T:Cadru.Polly.Logging.ILoggingPolicy`1">
            <summary>
            Defines properties common to generic, synchronous and asynchronous
            Logging policies.
            </summary>
        </member>
        <member name="T:Cadru.Polly.Logging.LoggingPolicy">
            <summary>
            A Logging policy that can be applied to delegates.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Logging.LoggingPolicy.Implementation``1(System.Func{Polly.Context,System.Threading.CancellationToken,``0},Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Polly.Logging.LoggingPolicy`1">
            <summary>
            A Logging policy that can be applied to delegates returning a value of
            type <typeparamref name="TResult"/>
            </summary>
            <typeparam name="TResult">
            The type of return values this policy will handle.
            </typeparam>
        </member>
        <member name="M:Cadru.Polly.Logging.LoggingPolicy`1.Implementation(System.Func{Polly.Context,System.Threading.CancellationToken,`0},Polly.Context,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Polly.Logging.LoggingPolicySyntax">
            <summary>
            Fluent API for defining an <see cref="T:Cadru.Polly.Logging.AsyncLoggingPolicy"/>.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Logging.LoggingPolicySyntax.AsyncLog(Polly.PolicyBuilder,System.Func{Polly.Context,Microsoft.Extensions.Logging.ILogger},System.Action{Microsoft.Extensions.Logging.ILogger,Polly.Context,System.Exception})">
            <summary>
            Constructs a new instance of <see cref="T:Cadru.Polly.Logging.AsyncLoggingPolicy"/>,
            configured to handle the exceptions specified in the <paramref name="policyBuilder"/>.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="loggerProvider">A func returning a logger to use.</param>
            <param name="logAction">A logging action.</param>
            <returns><see cref="T:Cadru.Polly.Logging.AsyncLoggingPolicy"/></returns>
        </member>
        <member name="M:Cadru.Polly.Logging.LoggingPolicySyntax.AsyncLog``1(Polly.PolicyBuilder{``0},System.Func{Polly.Context,Microsoft.Extensions.Logging.ILogger},System.Action{Microsoft.Extensions.Logging.ILogger,Polly.Context,Polly.DelegateResult{``0}})">
            <summary>
            Constructs a new instance of
            <see cref="T:Cadru.Polly.Logging.AsyncLoggingPolicy`1"/>, configured to handle the
            exceptions and results specified in the <paramref name="policyBuilder"/>.
            </summary>
            <typeparam name="TResult">
            The return type of delegates which may be executed through the policy.
            </typeparam>
            <param name="policyBuilder">The policy builder.</param>
            <param name="loggerProvider">A func returning a logger to use.</param>
            <param name="logAction">A logging action.</param>
            <returns><see cref="T:Cadru.Polly.Logging.AsyncLoggingPolicy`1"/></returns>
        </member>
        <member name="M:Cadru.Polly.Logging.LoggingPolicySyntax.Log(Polly.PolicyBuilder,System.Func{Polly.Context,Microsoft.Extensions.Logging.ILogger},System.Action{Microsoft.Extensions.Logging.ILogger,Polly.Context,System.Exception})">
            <summary>
            Constructs a new instance of <see cref="T:Cadru.Polly.Logging.LoggingPolicy"/>, configured
            to handle the exceptions specified in the <paramref name="policyBuilder"/>.
            </summary>
            <param name="policyBuilder">The policy builder.</param>
            <param name="loggerProvider">A func returning a logger to use.</param>
            <param name="logAction">A logging action.</param>
            <returns><see cref="T:Cadru.Polly.Logging.LoggingPolicy"/></returns>
        </member>
        <member name="M:Cadru.Polly.Logging.LoggingPolicySyntax.Log``1(Polly.PolicyBuilder{``0},System.Func{Polly.Context,Microsoft.Extensions.Logging.ILogger},System.Action{Microsoft.Extensions.Logging.ILogger,Polly.Context,Polly.DelegateResult{``0}})">
            <summary>
            Constructs a new instance of <see cref="T:Cadru.Polly.Logging.LoggingPolicy`1"/>,
            configured to handle the exceptions and results specified in the <paramref name="policyBuilder"/>.
            </summary>
            <typeparam name="TResult">
            The return type of delegates which may be executed through the policy.
            </typeparam>
            <param name="policyBuilder">The policy builder.</param>
            <param name="loggerProvider">A func returning a logger to use.</param>
            <param name="logAction">A logging action.</param>
            <returns><see cref="T:Cadru.Polly.Logging.LoggingPolicy`1"/></returns>
        </member>
        <member name="T:Cadru.Polly.PolicyContextFactory">
            <summary>
            Represents a set of methods for creating instances of a
            <see cref="T:Polly.Context"/> which has an <see cref="T:System.IServiceProvider"/> item
            automatically added.
            </summary>
        </member>
        <member name="M:Cadru.Polly.PolicyContextFactory.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Polly.PolicyContextFactory"/> class.
            </summary>
        </member>
        <member name="M:Cadru.Polly.PolicyContextFactory.Create">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Polly.PolicyContextFactory.CreateAsync">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Polly.PolicyContextItems">
            <summary>
            Standard <see cref="T:Polly.Context"/> item keys.
            </summary>
        </member>
        <member name="F:Cadru.Polly.PolicyContextItems.Logger">
            <summary>
            The key for an <see cref="T:Microsoft.Extensions.Logging.ILogger"/> item.
            </summary>
        </member>
        <member name="F:Cadru.Polly.PolicyContextItems.Services">
            <summary>
            The key for an <see cref="T:System.IServiceProvider"/> item.
            </summary>
        </member>
        <member name="T:Cadru.Polly.PolicyRegistryExtensions">
            <summary>
            Extension methods for working with a <see cref="T:Polly.Registry.IPolicyRegistry`1"/>.
            </summary>
        </member>
        <member name="M:Cadru.Polly.PolicyRegistryExtensions.Add(Polly.Registry.IPolicyRegistry{System.String},Polly.IsPolicy)">
            <summary>
            Adds the specified <paramref name="policy"/> to the registry using
            the <see cref="P:Polly.IsPolicy.PolicyKey"/>.
            </summary>
            <param name="registry">
            The <see cref="T:Polly.Registry.IPolicyRegistry`1"/> to add policies to.
            </param>
            <param name="policy">The <see cref="T:Polly.IsPolicy"/> to add.</param>
        </member>
        <member name="T:Cadru.Polly.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Resources.Strings.ArgumentException_PolicyKeyMutability">
            <summary>
              Looks up a localized string similar to PolicyKey cannot be changed once set; or (when using the default value after the PolicyKey property has been accessed..
            </summary>
        </member>
        <member name="P:Cadru.Polly.Resources.Strings.SQL_SevereError">
            <summary>
              Looks up a localized string similar to A severe error occurred on the current command.  The results, if any, should be discarded..
            </summary>
        </member>
        <member name="P:Cadru.Polly.Resources.Strings.SqlServer_DuplicatedPolicies">
            <summary>
              Looks up a localized string similar to There are duplicate policies configured. When using WithDefaults, you don&apos;t need to also include WithCircuitBreaker, WithOverallTimeout, or WithTransientErrors..
            </summary>
        </member>
        <member name="P:Cadru.Polly.Resources.Strings.SqlServer_InvalidTimeoutConfiguration">
            <summary>
              Looks up a localized string similar to A TimeoutPerRetry policy is configured without any Retry policies..
            </summary>
        </member>
        <member name="P:Cadru.Polly.Resources.Strings.SqlServer_LoggingMessage_CircuitBroken">
            <summary>
              Looks up a localized string similar to Database operation circuit broken, next retry in {@1}, exception: {@2}.
            </summary>
        </member>
        <member name="P:Cadru.Polly.Resources.Strings.SqlServer_LoggingMessage_CircuitReset">
            <summary>
              Looks up a localized string similar to Database operation circuit reset..
            </summary>
        </member>
        <member name="P:Cadru.Polly.Resources.Strings.SqlServer_LoggingMessage_RetryFailure">
            <summary>
              Looks up a localized string similar to Database operation retry attempt {@0}, exception: {@1}..
            </summary>
        </member>
        <member name="P:Cadru.Polly.Resources.Strings.SqlServer_LoggingMessage_Timeout">
            <summary>
              Looks up a localized string similar to Database operation timed out, exception {@0}..
            </summary>
        </member>
        <member name="P:Cadru.Polly.Resources.Strings.SqlServer_NoPoliciesConfigured">
            <summary>
              Looks up a localized string similar to There are no policies configured..
            </summary>
        </member>
        <member name="T:Cadru.Polly.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Extension methods for setting up
            <see href="https://github.com/App-vNext/Polly">Polly</see> services in
            an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Cadru.Polly.DependencyInjection.ServiceCollectionExtensions.AddPolicyRegistry(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds a <see cref="T:Polly.Registry.PolicyRegistry"/> instance to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add services to.
            </param>
            <returns>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.
            </returns>
        </member>
        <member name="T:Cadru.Polly.Utilities.TimeoutHelper">
            <summary>
            Helper methods for creating timeout strategies.
            </summary>
        </member>
        <member name="M:Cadru.Polly.Utilities.TimeoutHelper.GetTimeout(System.TimeSpan,System.Int32,System.Double)">
            <summary>
            Generates a timeout based retries and exponential back-off.
            </summary>
            <param name="initialDelay">The initial delay added to the timeout.</param>
            <param name="factor">
            The linear factor to use for increasing the duration.
            </param>
            <param name="retryCount">
            The maximum number of retries to use, in addition to the original call.
            </param>
            <returns>A <see cref="T:System.TimeSpan"/> representing the timeout.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
                Specifies that the method or property will ensure that the listed field and property members have
                not-<see langword="null"/> values.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
                Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
                Initializes the attribute with a field or property member.
            </summary>
            <param name="member">
                The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
                Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
                Specifies that the method or property will ensure that the listed field and property members have
                non-<see langword="null"/> values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
                Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
                Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value,
                the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="member">
                The field or property member that is promised to be not-<see langword="null"/>.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
                Initializes the attribute with the specified return value condition and list
                of field and property members.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value,
                the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
    </members>
</doc>
