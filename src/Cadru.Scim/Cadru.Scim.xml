<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cadru.Scim</name>
    </assembly>
    <members>
        <member name="T:Cadru.Scim.Filters.FilterExpression">
            <summary>
            Represents an SCIM filter expression.
            </summary>
            <remarks>
            Each expression MUST contain an attribute name followed by an attribute
            operator and optional value. Multiple expressions MAY be combined using
            an <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see>.
            </remarks>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpression.Attribute">
            <inheritdoc/>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpression.Operator">
            <inheritdoc/>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpression.Value">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterExpression.ToFilterExpression(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterExpression.ToFilterExpression(Cadru.Scim.Filters.FilterExpressionFormatOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterExpression.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Scim.Filters.FilterExpressionFormatOptions">
            <summary>
            Provides options to be used when formatting an <see cref="T:Cadru.Scim.Filters.IFilter"/>.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionFormatOptions.IncludeQuerySeparator">
            <summary>
            To prepend the "?" query string separator,
            <see langword="true"/>; otherwise, <see langword="false"/>
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionFormatOptions.IncludeFilterParameterName">
            <summary>
            To prepend the "filter=" query string parameter key,
            <see langword="true"/>; otherwise, <see langword="false"/>
            </summary>
        </member>
        <member name="T:Cadru.Scim.Filters.FilterExpressionOperator">
            <summary>
            The expression operators.
            </summary>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterExpressionOperator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.Scim.Filters.FilterExpressionOperator"/> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionOperator.Contains">
            <summary>
            The entire operator value must be a substring of the attribute value
            for a match.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionOperator.EndsWith">
            <summary>
            The entire operator value must be a substring of the attribute
            value, matching at the end of the attribute value.
            </summary>
            <remarks>This criterion is satisfied if the two strings are identical.</remarks>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionOperator.Equal">
            <summary>
            The attribute and operator values must be identical for a match.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionOperator.GreaterThan">
            <summary>
            If the attribute value is greater than the operator value, there is
            a match.
            </summary>
            <remarks>
            The actual comparison is dependent on the attribute type. For string
            attribute types, this is a lexicographical comparison, and for
            DateTime types, it is a chronological comparison. For integer
            attributes, it is a comparison by numeric value. Boolean and Binary
            attributes will cause a failed response (HTTP status code 400) with
            "scimType" of "invalidFilter".
            </remarks>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionOperator.GreaterThanOrEqual">
            <summary>
            If the attribute value is greater than or equal to the operator
            value, there is a match.
            </summary>
            <remarks>
            The actual comparison is dependent on the attribute type. For string
            attribute types, this is a lexicographical comparison, and for
            DateTime types, it is a chronological comparison. For integer
            attributes, it is a comparison by numeric value. Boolean and Binary
            attributes will cause a failed response (HTTP status code 400) with
            "scimType" of "invalidFilter".
            </remarks>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionOperator.HasValue">
            <summary>
            If the attribute has a non-empty or non-null value, or if it
            contains a non-empty node for complex attributes, there is a match.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionOperator.LessThan">
            <summary>
            If the attribute value is less than the operator value, there is a match.
            </summary>
            <remarks>
            The actual comparison is dependent on the attribute type. For string
            attribute types, this is a lexicographical comparison, and for
            DateTime types, it is a chronological comparison. For integer
            attributes, it is a comparison by numeric value. Boolean and Binary
            attributes will cause a failed response (HTTP status code 400) with
            "scimType" of "invalidFilter".
            </remarks>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionOperator.LessThanOrEqual">
            <summary>
            If the attribute value is less than or equal to the operator value,
            there is a match.
            </summary>
            <remarks>
            The actual comparison is dependent on the attribute type. For string
            attribute types, this is a lexicographical comparison, and for
            DateTime types, it is a chronological comparison. For integer
            attributes, it is a comparison by numeric value. Boolean and Binary
            attributes will cause a failed response (HTTP status code 400) with
            "scimType" of "invalidFilter".
            </remarks>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionOperator.NotEqual">
            <summary>
            The attribute and operator values are not identical.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionOperator.Present">
            <summary>
            If the attribute has a non-empty or non-null value, or if it
            contains a non-empty node for complex attributes, there is a match.
            </summary>
            <remarks>This is synonymous with <see cref="P:Cadru.Scim.Filters.FilterExpressionOperator.HasValue"></see>.</remarks>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterExpressionOperator.StartsWith">
            <summary>
            The entire operator value must be a substring of the attribute
            value, matching at the beginning of the attribute value.
            </summary>
            <remarks>This criterion is satisfied if the two strings are identical.</remarks>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterExpressionOperator.op_Implicit(System.String)~Cadru.Scim.Filters.FilterExpressionOperator">
            <summary>
            Converts a string to a <see cref="T:Cadru.Scim.Filters.FilterExpressionOperator"/>.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterExpressionOperator.op_Inequality(Cadru.Scim.Filters.FilterExpressionOperator,Cadru.Scim.Filters.FilterExpressionOperator)">
            <summary>
            Determines if two <see cref="T:Cadru.Scim.Filters.FilterExpressionOperator"/> values are different.
            </summary>
            <param name="left">
            The first <see cref="T:Cadru.Scim.Filters.FilterExpressionOperator"/> to compare.
            </param>
            <param name="right">
            The second <see cref="T:Cadru.Scim.Filters.FilterExpressionOperator"/> to compare.
            </param>
            <returns>
            True if <paramref name="left"/> and <paramref name="right"/> are
            different; otherwise, false.
            </returns>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterExpressionOperator.op_Equality(Cadru.Scim.Filters.FilterExpressionOperator,Cadru.Scim.Filters.FilterExpressionOperator)">
            <summary>
            Determines if two <see cref="T:Cadru.Scim.Filters.FilterExpressionOperator"/> values are
            the same.
            </summary>
            <param name="left">
            The first <see cref="T:Cadru.Scim.Filters.FilterExpressionOperator"/> to compare.
            </param>
            <param name="right">
            The second <see cref="T:Cadru.Scim.Filters.FilterExpressionOperator"/> to compare.
            </param>
            <returns>
            True if <paramref name="left"/> and <paramref name="right"/> are the
            same; otherwise, false.
            </returns>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterExpressionOperator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterExpressionOperator.Equals(Cadru.Scim.Filters.FilterExpressionOperator)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterExpressionOperator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterExpressionOperator.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Scim.Filters.FilterGroup">
            <summary>
            Represents a group of <see cref="T:Cadru.Scim.Filters.IFilter"></see> instances.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterGroup.Filters">
            <inheritdoc/>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterGroup.GroupingCharacter">
            <inheritdoc/>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterGroup.LogicalOperator">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterGroup.ToFilterExpression(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterGroup.ToFilterExpression(Cadru.Scim.Filters.FilterExpressionFormatOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterGroup.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Scim.Filters.FilterGroupExtensions">
            <summary>
            Extension methods for working with <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see> instances.
            </summary>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterGroupExtensions.AddExpression(Cadru.Scim.Filters.IFilterGroup,Cadru.Scim.Filters.IFilterExpression)">
            <summary>
            Add a new <see cref="T:Cadru.Scim.Filters.IFilterExpression"></see> to the <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see>.
            </summary>
            <param name="filterGroup">
            A <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see> to modify.
            </param>
            <param name="filter">
            An <see cref="T:Cadru.Scim.Filters.IFilterExpression"></see> to add.
            </param>
            <returns>
            A reference to the <paramref name="filterGroup"/> after the
            operation has completed.
            </returns>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterGroupExtensions.AddGroup(Cadru.Scim.Filters.IFilterGroup,Cadru.Scim.Filters.IFilterGroup)">
            <summary>
            Add a new <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see> to the <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see>.
            </summary>
            <param name="filterGroup">
            A <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see> to modify.
            </param>
            <param name="group">An <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see> to add.</param>
            <returns>
            A reference to the <paramref name="filterGroup"/> after the
            operation has completed.
            </returns>
        </member>
        <member name="T:Cadru.Scim.Filters.FilterLogicalOperator">
            <summary>
            The logical grouping operators for grouping one or more
            <see cref="T:Cadru.Scim.Filters.IFilterExpression"></see> instances together in an <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see>.
            </summary>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterLogicalOperator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.Scim.Filters.FilterLogicalOperator"/> structure.
            </summary>
            <param name="value">The string value of the instance.</param>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterLogicalOperator.And">
            <summary>
            The <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see> is only a match if all
            <see cref="T:Cadru.Scim.Filters.IFilterExpression"></see> instances evaluate to true.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.FilterLogicalOperator.Or">
            <summary>
            The <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see> is only a match if any
            <see cref="T:Cadru.Scim.Filters.IFilterExpression"></see> instances evaluate to true.
            </summary>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterLogicalOperator.op_Implicit(System.String)~Cadru.Scim.Filters.FilterLogicalOperator">
            <summary>
            Converts a string to a <see cref="T:Cadru.Scim.Filters.FilterLogicalOperator"/>.
            </summary>
            <param name="value">The string value to convert.</param>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterLogicalOperator.op_Inequality(Cadru.Scim.Filters.FilterLogicalOperator,Cadru.Scim.Filters.FilterLogicalOperator)">
            <summary>
            Determines if two <see cref="T:Cadru.Scim.Filters.FilterLogicalOperator"/> values are different.
            </summary>
            <param name="left">
            The first <see cref="T:Cadru.Scim.Filters.FilterLogicalOperator"/> to compare.
            </param>
            <param name="right">
            The second <see cref="T:Cadru.Scim.Filters.FilterLogicalOperator"/> to compare.
            </param>
            <returns>
            True if <paramref name="left"/> and <paramref name="right"/> are
            different; otherwise, false.
            </returns>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterLogicalOperator.op_Equality(Cadru.Scim.Filters.FilterLogicalOperator,Cadru.Scim.Filters.FilterLogicalOperator)">
            <summary>
            Determines if two <see cref="T:Cadru.Scim.Filters.FilterLogicalOperator"/> values are the same.
            </summary>
            <param name="left">
            The first <see cref="T:Cadru.Scim.Filters.FilterLogicalOperator"/> to compare.
            </param>
            <param name="right">
            The second <see cref="T:Cadru.Scim.Filters.FilterLogicalOperator"/> to compare.
            </param>
            <returns>
            True if <paramref name="left"/> and <paramref name="right"/> are the
            same; otherwise, false.
            </returns>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterLogicalOperator.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterLogicalOperator.Equals(Cadru.Scim.Filters.FilterLogicalOperator)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterLogicalOperator.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.FilterLogicalOperator.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Cadru.Scim.Filters.GroupingCharacter">
            <summary>
            Indicates the grouping character used by an <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see>.
            </summary>
        </member>
        <member name="F:Cadru.Scim.Filters.GroupingCharacter.None">
            <summary>
            No grouping characters will be used.
            </summary>
        </member>
        <member name="F:Cadru.Scim.Filters.GroupingCharacter.Parentheses">
            <summary>
            Boolean expressions may be grouped using parentheses to change the
            standard order of operations.
            </summary>
        </member>
        <member name="F:Cadru.Scim.Filters.GroupingCharacter.SquareBracket">
            <summary>
            Service providers may support complex filters where expressions must
            be applied to the same value of a parent attribute. The expression
            with square brackets must be a valid filter expression based upon
            sub-attributes of the parent attribute. Nested expressions may be used.
            </summary>
        </member>
        <member name="T:Cadru.Scim.Filters.IFilter">
            <summary>
            Represents common features of an SCIM filter expression or filter group.
            </summary>
        </member>
        <member name="M:Cadru.Scim.Filters.IFilter.ToFilterExpression(System.Boolean)">
            <summary>
            Returns a string that represents the current
            <see cref="T:Cadru.Scim.Filters.IFilter"></see> as a valid query
            </summary>
            <param name="prependQuerySeprator">
            To prepend the "?" query string separator,
            <see langword="true"></see>; otherwise, <see langword="false"></see>.
            </param>
            <returns>A string that represents the current <see cref="T:Cadru.Scim.Filters.IFilter"/>.</returns>
        </member>
        <member name="M:Cadru.Scim.Filters.IFilter.ToFilterExpression(Cadru.Scim.Filters.FilterExpressionFormatOptions)">
            <summary>
            Returns a string that represents the current
            <see cref="T:Cadru.Scim.Filters.IFilter"></see> as a valid query
            </summary>
            <param name="options">
            The options to use when formatting the <see cref="T:Cadru.Scim.Filters.IFilter"/>.
            </param>
            <returns>A string that represents the current <see cref="T:Cadru.Scim.Filters.IFilter"/>.</returns>
        </member>
        <member name="M:Cadru.Scim.Filters.IFilter.ToString">
            <summary>
            Returns a string that represents the current
            <see cref="T:Cadru.Scim.Filters.FilterExpression"></see> as a valid query
            </summary>
            <returns>A string that represents the current <see cref="T:Cadru.Scim.Filters.FilterExpression"></see>.</returns>
        </member>
        <member name="T:Cadru.Scim.Filters.IFilterExpression">
            <summary>
            Represents an SCIM filter expression.
            </summary>
            <remarks>
            Each expression MUST contain an attribute name followed by an attribute
            operator and optional value. Multiple expressions MAY be combined using
            an <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see>.
            </remarks>
        </member>
        <member name="P:Cadru.Scim.Filters.IFilterExpression.Attribute">
            <summary>
            The attribute name.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.IFilterExpression.Operator">
            <summary>
            The attribute operator.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.IFilterExpression.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:Cadru.Scim.Filters.IFilterGroup">
            <summary>
            Represents a group of <see cref="T:Cadru.Scim.Filters.IFilter"></see> instances.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.IFilterGroup.Filters">
            <summary>
            The collection of <see cref="T:Cadru.Scim.Filters.IFilter"></see> instances to be grouped.
            </summary>
            <remarks>
            An <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see> may contain either
            <see cref="T:Cadru.Scim.Filters.IFilterExpression"></see> instances or
            <see cref="T:Cadru.Scim.Filters.IFilterGroup"></see> instances.
            </remarks>
        </member>
        <member name="P:Cadru.Scim.Filters.IFilterGroup.GroupingCharacter">
            <summary>
            The grouping character used.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.IFilterGroup.LogicalOperator">
            <summary>
            The logical grouping operator.
            </summary>
        </member>
        <member name="T:Cadru.Scim.Filters.NotFilterGroup">
            <summary>
            Represents a group of <see cref="T:Cadru.Scim.Filters.IFilter"></see> instances where the
            filter is a match if the expression evaluates to <see langword="false"></see>.
            </summary>
        </member>
        <member name="P:Cadru.Scim.Filters.NotFilterGroup.Filters">
            <inheritdoc/>
        </member>
        <member name="P:Cadru.Scim.Filters.NotFilterGroup.GroupingCharacter">
            <inheritdoc/>
        </member>
        <member name="P:Cadru.Scim.Filters.NotFilterGroup.LogicalOperator">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.NotFilterGroup.ToFilterExpression(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.NotFilterGroup.ToFilterExpression(Cadru.Scim.Filters.FilterExpressionFormatOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Cadru.Scim.Filters.NotFilterGroup.ToString">
            <inheritdoc/>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
                Specifies that <see langword="null"/> is allowed as an input even if the
                corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.AllowNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
                Specifies that <see langword="null"/> is disallowed as an input even if the
                corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DisallowNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
                Specifies that a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute.#ctor">
             <summary>
                 Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute"/> class.
             </summary>
            
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
                Specifies that the method will not return if the associated <see cref="T:System.Boolean"/>
                parameter is passed the specified value.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
                Gets the condition parameter value.
                Code after the method is considered unreachable by diagnostics if the argument
                to the associated parameter matches this value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/>
                class with the specified parameter value.
            </summary>
            <param name="parameterValue">
                The condition parameter value.
                Code after the method is considered unreachable by diagnostics if the argument
                to the associated parameter matches this value.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
                Specifies that an output may be <see langword="null"/> even if the
                corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
                Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, 
                the parameter may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
                If the method returns this value, the associated parameter may be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
                 Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
                The return value condition.
                If the method returns this value, the associated parameter may be <see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
                Specifies that the method or property will ensure that the listed field and property members have
                not-<see langword="null"/> values.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
                Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
                Initializes the attribute with a field or property member.
            </summary>
            <param name="member">
                The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
                Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
                Specifies that the method or property will ensure that the listed field and property members have
                non-<see langword="null"/> values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
                Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
                Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value,
                the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="member">
                The field or property member that is promised to be not-<see langword="null"/>.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
                Initializes the attribute with the specified return value condition and list
                of field and property members.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value,
                the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
                Specifies that an output is not <see langword="null"/> even if the
                corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
                Specifies that the output will be non-<see langword="null"/> if the
                named parameter is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
                Gets the associated parameter name.
                The output will be non-<see langword="null"/> if the argument to the
                parameter specified is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
                Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">
                The associated parameter name.
                The output will be non-<see langword="null"/> if the argument to the
                parameter specified is non-<see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
                Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
                the parameter will not be <see langword="null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
                If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
                The return value condition.
                If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </param>
        </member>
    </members>
</doc>
