<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cadru.Build.Tasks</name>
    </assembly>
    <members>
        <member name="T:Cadru.Build.Tasks.AddReleaseNotesRootEntry">
            <summary>
            Adds a release notes root entry to the specified XML file.
            </summary>
            <remarks>
            This takes a fairly opinionated view of what a release notes file should
            look like and may not be suitable for everyone.
            </remarks>
        </member>
        <member name="P:Cadru.Build.Tasks.AddReleaseNotesRootEntry.AddIfNotFound">
            <summary>
            Gets or sets a value indicating whether or not the root node should
            be added if it isn't found.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.AddReleaseNotesRootEntry.BuildDate">
            <summary>
            The build date.
            </summary>
            <remarks>
            This can be the <see cref="P:Cadru.Build.Tasks.GetVersionProperties.BuildDate"/> property value.
            </remarks>
        </member>
        <member name="P:Cadru.Build.Tasks.AddReleaseNotesRootEntry.File">
            <summary>
            The release notes XML file to be updated.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.AddReleaseNotesRootEntry.Milestone">
            <summary>
            An optional milestone value to include in the release notes entry.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.AddReleaseNotesRootEntry.Version">
            <summary>
            The build version.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.AddReleaseNotesRootEntry.Execute">
            <summary>
            Main entry point.
            </summary>
        </member>
        <member name="T:Cadru.Build.Tasks.GetAssemblyVersion">
            <summary>
            Generates the value for the
            <see cref="P:System.Reflection.AssemblyVersionAttribute.Version"/> property from the
            specified NuGet version.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.GetAssemblyVersion.AssemblyVersion">
            <summary>
            Gets the <see cref="P:System.Reflection.AssemblyVersionAttribute.Version"/> value.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.GetAssemblyVersion.NuGetVersion">
            <summary>
            The NuGet version used to derive the assembly version from.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.GetAssemblyVersion.Execute">
            <summary>
            Main entry point.
            </summary>
        </member>
        <member name="T:Cadru.Build.Tasks.VersionStrategy">
            <summary>
            The build version strategy.
            </summary>
        </member>
        <member name="F:Cadru.Build.Tasks.VersionStrategy.ShortDate">
            <summary>
            The build version properties will be based on the result of
            computations involving the year, month, and day of the current date..
            </summary>
            <remarks>
            This strategy follows these rules:
            <list type="table">
            <item>
            <term>Build</term>
            <description>
            The result of ((now.Year % 100) * 1000 + 50 * now.Month + now.Day),
            where <c>now</c> is the <see cref="P:System.DateTimeOffset.UtcNow"/>.
            </description>
            </item>
            <item>
            <term>Revision</term>
            <description>
            The result of (((<c>build</c> + <c>new DateTime(2000, 1, 1)</c>) * 100)
            + (int)(now - now.Date).TotalSeconds / 2) % 50000, where
            <c>now</c> is the <see cref="P:System.DateTimeOffset.UtcNow"/>
            </description>
            </item>
            </list>
            Both formulas use the same value of <c>now</c>.
            </remarks>
        </member>
        <member name="F:Cadru.Build.Tasks.VersionStrategy.DayOfYear">
            <summary>
            The build version properties will be based on the year and day of year.
            </summary>
            <remarks>
            This strategy follows these rules:
            <list type="table">
            <item>
            <term>Build</term>
            <description>
            The last two digits of the year followed by the day of the year,
            expressed as a value between 1 and 366
            </description>
            </item>
            <item>
            <term>Revision</term>
            <description>
            The total number of seconds between the start of the current day and
            the current time, divided in half.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Cadru.Build.Tasks.VersionStrategy.VisualStudio">
            <summary>
            The build version properties will be based on the same rules used by Visual Studio.
            </summary>
            <remarks>
            This strategy follows these rules:
            <list type="table">
            <item>
            <term>Build</term>
            <description>
            The number of days between 1/1/2000 and the current date
            </description>
            </item>
            <item>
            <term>Revision</term>
            <description>
            The total number of seconds between the start of the current day and
            the current time, divided in half.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Cadru.Build.Tasks.GetVersionProperties">
            <summary>
            Generates version properties and updates the specified properties file.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.GetVersionProperties.Build">
            <summary>
            Gets the value of the build component of the version number.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.GetVersionProperties.BuildDate">
            <summary>
            Gets the value of the build date.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.GetVersionProperties.PropertiesFile">
            <summary>
            Gets or sets the path to the properties file to be updated.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.GetVersionProperties.Revision">
            <summary>
            Gets the value of the revision component of the version number.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.GetVersionProperties.Strategy">
            <summary>
            Gets or sets the value of the build version strategy to be used.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.GetVersionProperties.Execute">
            <summary>
            Main entry point.
            </summary>
        </member>
        <member name="T:Cadru.Build.Tasks.Internal.WarningPragmaMode">
            <summary>
            Specifies the start or end of a warning pragma.
            </summary>
        </member>
        <member name="F:Cadru.Build.Tasks.Internal.WarningPragmaMode.None">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Cadru.Build.Tasks.Internal.WarningPragmaMode.Disable">
            <summary>
            The start of a warning pragma.
            </summary>
        </member>
        <member name="F:Cadru.Build.Tasks.Internal.WarningPragmaMode.Restore">
            <summary>
            The end of a warning pragma.
            </summary>
        </member>
        <member name="T:Cadru.Build.Tasks.Internal.CodeWarningPragmaDirective">
            <summary>
            Represents a code warning pragma code entity
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.CodeWarningPragmaDirective.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.Build.Tasks.Internal.CodeWarningPragmaDirective"/> class.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.CodeWarningPragmaDirective.#ctor(Cadru.Build.Tasks.Internal.WarningPragmaMode,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.Build.Tasks.Internal.CodeWarningPragmaDirective"/> class, specifying its mode
            and warning list.
            </summary>
            <param name="mode">One of the <see cref="P:Cadru.Build.Tasks.Internal.CodeWarningPragmaDirective.WarningPragmaMode"/> values.</param>
            <param name="warningList">The list of warnings.</param>
        </member>
        <member name="P:Cadru.Build.Tasks.Internal.CodeWarningPragmaDirective.WarningList">
            <summary>
            Gets the list of warnings for the pragma directive.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Internal.CodeWarningPragmaDirective.WarningPragmaMode">
            <summary>
            Gets the mode for the pragma directive.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.CodeWarningPragmaDirective.ToPragmaString(System.String)">
            <summary>
            Generates the pragma directive as a line of code for the specified language.
            </summary>
            <param name="language">The code language</param>
            <returns>A string representing the pragma directive.</returns>
            <remarks>
            <para>
            The <see href="https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/using-the-codedom">CodeDOM</see>
            compilers do not work with third-party <see cref="T:System.CodeDom.CodeDirective"/> derived classes.
            As a result, it is necessary to create the warning pragma as a raw line of code.
            </para>
            </remarks>
        </member>
        <member name="T:Cadru.Build.Tasks.Internal.ExceptionHandling">
            <summary>
            Utility methods for classifying and handling exceptions.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Internal.ExceptionHandling.DebugDumpPath">
            <summary>
            The directory used for diagnostic log files.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.ExceptionHandling.GetXmlLineAndColumn(System.Exception)">
            <summary>
            Extracts line and column numbers from the exception if it is
            XML-related one.
            </summary>
            <param name="e">XML-related exception.</param>
            <returns>Line and column numbers if available, (0,0) if not.</returns>
            <remarks>
            This function works around the fact that XmlException and
            XmlSchemaException are not directly related.
            </remarks>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.ExceptionHandling.IsCriticalException(System.Exception)">
            <summary>
            If the given exception is "ignorable under some circumstances"
            return false. Otherwise it's "really bad", and return true. This
            makes it possible to catch(Exception ex) without catching disasters.
            </summary>
            <param name="e">The exception to check.</param>
            <returns>True if exception is critical.</returns>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.ExceptionHandling.IsIoRelatedException(System.Exception)">
            <summary>
            Determine whether the exception is file-IO related.
            </summary>
            <param name="e">The exception to check.</param>
            <returns>True if exception is IO related.</returns>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.ExceptionHandling.IsXmlException(System.Exception)">
            <summary>
            Checks if the exception is an XML one.
            </summary>
            <param name="e">Exception to check.</param>
            <returns>True if exception is related to XML parsing.</returns>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.ExceptionHandling.NotExpectedException(System.Exception)">
            <summary>
            If the given exception is file IO related or expected return false.
            Otherwise, return true.
            </summary>
            <param name="e">The exception to check.</param>
            <returns>
            True if exception is not IO related or expected otherwise false.
            </returns>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.ExceptionHandling.NotExpectedFunctionException(System.Exception)">
            <summary>
            Returns false if this is a known exception thrown by function evaluation
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.ExceptionHandling.NotExpectedIoOrXmlException(System.Exception)">
            <summary>
            If the given exception is file IO related or Xml related return
            false. Otherwise, return true.
            </summary>
            <param name="e">The exception to check.</param>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.ExceptionHandling.NotExpectedReflectionException(System.Exception)">
            <summary>
            If the given exception is reflection-related return false.
            Otherwise, return true.
            </summary>
            <param name="e">The exception to check.</param>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.ExceptionHandling.NotExpectedRegistryException(System.Exception)">
            <summary>
            Returns false if this is a known exception thrown by the registry API.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.ExceptionHandling.NotExpectedSerializationException(System.Exception)">
            <summary>
            Serialization has been observed to throw TypeLoadException as well
            as SerializationException and IO exceptions. (Obviously it has to do
            reflection but it ought to be wrapping the exceptions.)
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.ExceptionHandling.GetDebugDumpPath">
            <summary>
            Gets the location of the directory used for diagnostic log files.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cadru.Build.Tasks.Internal.ExceptionHandling.LineAndColumn">
            <summary>
            Line and column pair.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Internal.ExceptionHandling.LineAndColumn.Column">
            <summary>
            Gets or sets column position.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Internal.ExceptionHandling.LineAndColumn.Line">
            <summary>
            Gets or sets line number.
            </summary>
        </member>
        <member name="T:Cadru.Build.Tasks.Internal.FileUtilities">
            <summary>
            This class contains utility methods for file IO.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.FileUtilities.GetTemporaryDirectory(System.Boolean)">
            <summary>
            Generates a unique directory name in the temporary folder. Caller
            must delete when finished.
            </summary>
            <param name="createDirectory"></param>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.FileUtilities.GetTemporaryFile">
            <summary>
            Generates a unique temporary file name with a given extension in the
            temporary folder. If no extension is provided, uses ".tmp". File is
            guaranteed to be unique. Caller must delete it when finished.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.FileUtilities.GetTemporaryFile(System.String)">
            <summary>
            Generates a unique temporary file name with a given extension in the
            temporary folder. File is guaranteed to be unique. Extension may
            have an initial period. Caller must delete it when finished. May
            throw IOException.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.FileUtilities.GetTemporaryFile(System.String,System.String,System.Boolean)">
            <summary>
            Creates a file with unique temporary file name with a given
            extension in the specified folder. File is guaranteed to be unique.
            Extension may have an initial period. If folder is null, the
            temporary folder will be used. Caller must delete it when finished.
            May throw IOException.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.Internal.FileUtilities.GetTemporaryFileName(System.String)">
            <summary>
            Generates a unique temporary file name with a given extension in the
            temporary folder. File is guaranteed to be unique. Extension may
            have an initial period. File will NOT be created. May throw IOException.
            </summary>
        </member>
        <member name="T:Cadru.Build.Tasks.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.General_InvalidValue">
            <summary>
              Looks up a localized string similar to MSB3098: &quot;{1}&quot; task received an invalid value for the &quot;{0}&quot; parameter..
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.Shared_FailedCreatingTempFile">
            <summary>
              Looks up a localized string similar to MSB5003: Failed to create a temporary file. Temporary files folder is full or its path is incorrect. {0}.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.Shared_ParameterCannotBeNull">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; cannot be null..
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.Shared_ParameterCannotHaveZeroLength">
            <summary>
              Looks up a localized string similar to Parameter &quot;{0}&quot; cannot have zero length..
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Cadru.Build.Tasks.Resources.Strings.WriteCodeFragment_AutoGeneratedComment" -->
        <member name="P:Cadru.Build.Tasks.Resources.Strings.WriteCodeFragment_Comment">
            <summary>
              Looks up a localized string similar to Generated by the {0} class..
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.WriteCodeFragment_CouldNotCreateProvider">
            <summary>
              Looks up a localized string similar to MSB3712: Code for the language &quot;{0}&quot; could not be generated. {1}.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.WriteCodeFragment_CouldNotWriteOutput">
            <summary>
              Looks up a localized string similar to MSB3713: The file &quot;{0}&quot; could not be created. {1}.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.WriteCodeFragment_GeneratedFile">
            <summary>
              Looks up a localized string similar to Emitted specified code into &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.WriteCodeFragment_MustSpecifyLocation">
            <summary>
              Looks up a localized string similar to MSB3711: At least one of OutputFile or OutputDirectory must be provided..
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.WriteCodeFragment_NoWorkToDo">
            <summary>
              Looks up a localized string similar to No output file was written because no code was specified to create..
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.Resources.Strings.WriteCodeFragment_SkippedNumberedParameter">
            <summary>
              Looks up a localized string similar to MSB3714: The parameter &quot;{0}&quot; was supplied, but not all previously numbered parameters..
            </summary>
        </member>
        <member name="T:Cadru.Build.Tasks.WriteThisAssemblyCodeFile">
            <summary>
            Generates a temporary code file with the specified generated code
            fragment. Does not delete the file.
            </summary>
            <comment>Currently only supports writing .NET attributes.</comment>
        </member>
        <member name="M:Cadru.Build.Tasks.WriteThisAssemblyCodeFile.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.Build.Tasks.WriteThisAssemblyCodeFile"/> task.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.WriteThisAssemblyCodeFile.Language">
            <summary>
            Language of code to generate. Language name can be any language for
            which a CodeDom provider is available. For example, "C#",
            "VisualBasic". Emitted file will have the default extension for that language.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.WriteThisAssemblyCodeFile.RootNamespace">
            <summary>
            The root namespace for the generated code.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.WriteThisAssemblyCodeFile.AssemblyAttributes">
            <summary>
            Description of attributes to write. Item include is the full type
            name of the attribute. For example,
            "System.AssemblyVersionAttribute". Each piece of metadata is the
            name-value pair of a parameter, which must be of type System.String.
            Some attributes only allow positional constructor arguments, or the
            user may just prefer them. To set those, use metadata names like
            "_Parameter1", "_Parameter2" etc. If a parameter index is skipped,
            it's an error.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.WriteThisAssemblyCodeFile.OutputDirectory">
            <summary>
            Destination folder for the generated code. Typically the
            intermediate folder.
            </summary>
        </member>
        <member name="P:Cadru.Build.Tasks.WriteThisAssemblyCodeFile.OutputFile">
            <summary>
            The path to the file that was generated. If this is set, and a file
            name, the destination folder will be prepended. If this is set, and
            is rooted, the destination folder will be ignored. If this is not
            set, the destination folder will be used, an arbitrary file name
            will be used, and the default extension for the language selected.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.WriteThisAssemblyCodeFile.Execute">
            <summary>
            Main entry point.
            </summary>
        </member>
        <member name="M:Cadru.Build.Tasks.WriteThisAssemblyCodeFile.GenerateCode(System.String@)">
            <summary>
            Generates the code into a string. If it fails, logs an error and
            returns null. If no meaningful code is generated, returns empty
            string. Returns the default language extension as an out parameter.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
                Specifies that <see langword="null"/> is allowed as an input even if the
                corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.AllowNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
                Specifies that <see langword="null"/> is disallowed as an input even if the
                corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DisallowNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
                Specifies that a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute.#ctor">
             <summary>
                 Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute"/> class.
             </summary>
            
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
                Specifies that the method will not return if the associated <see cref="T:System.Boolean"/>
                parameter is passed the specified value.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
                Gets the condition parameter value.
                Code after the method is considered unreachable by diagnostics if the argument
                to the associated parameter matches this value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/>
                class with the specified parameter value.
            </summary>
            <param name="parameterValue">
                The condition parameter value.
                Code after the method is considered unreachable by diagnostics if the argument
                to the associated parameter matches this value.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
                Specifies that an output may be <see langword="null"/> even if the
                corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
                Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, 
                the parameter may be <see langword="null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
                If the method returns this value, the associated parameter may be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
                 Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
                The return value condition.
                If the method returns this value, the associated parameter may be <see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
                Specifies that the method or property will ensure that the listed field and property members have
                not-<see langword="null"/> values.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
                Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
                Initializes the attribute with a field or property member.
            </summary>
            <param name="member">
                The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
                Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
                Specifies that the method or property will ensure that the listed field and property members have
                non-<see langword="null"/> values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
                Gets field or property member names.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
                Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value,
                the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="member">
                The field or property member that is promised to be not-<see langword="null"/>.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
                Initializes the attribute with the specified return value condition and list
                of field and property members.
            </summary>
            <param name="returnValue">
                The return value condition. If the method returns this value,
                the associated parameter will not be <see langword="null"/>.
            </param>
            <param name="members">
                The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
                Specifies that an output is not <see langword="null"/> even if the
                corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullAttribute.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
                Specifies that the output will be non-<see langword="null"/> if the
                named parameter is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
                Gets the associated parameter name.
                The output will be non-<see langword="null"/> if the argument to the
                parameter specified is non-<see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
                Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">
                The associated parameter name.
                The output will be non-<see langword="null"/> if the argument to the
                parameter specified is non-<see langword="null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
                Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
                the parameter will not be <see langword="null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
                Gets the return value condition.
                If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
                Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">
                The return value condition.
                If the method returns this value, the associated parameter will not be <see langword="null"/>.
            </param>
        </member>
    </members>
</doc>
