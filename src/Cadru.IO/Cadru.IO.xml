<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cadru.IO</name>
    </assembly>
    <members>
        <member name="T:Cadru.IO.ExecutableType">
            <summary>
            Specifies the executable file type.
            </summary>
        </member>
        <member name="F:Cadru.IO.ExecutableType.Unknown">
            <summary>
            The file executable type is not able to be determined.
            </summary>
        </member>
        <member name="F:Cadru.IO.ExecutableType.DOS">
            <summary>
            The file is an MS-DOS .exe, .com, or .bat file.
            </summary>
        </member>
        <member name="F:Cadru.IO.ExecutableType.Win32Console">
            <summary>
            The file is a Microsoft Win32Â®-based console application.
            </summary>
        </member>
        <member name="F:Cadru.IO.ExecutableType.Windows">
            <summary>
            The file is a Windows application.
            </summary>
        </member>
        <member name="T:Cadru.IO.ExtendedDirectoryInfo">
            <summary>
            Provides an encapsulated implementation of the standard .NET
            <see cref="T:System.IO.DirectoryInfo"/> and the
            <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb762179(v=vs.85).aspx">SHGetFileInfo</see>
            API method.
            </summary>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.IO.ExtendedDirectoryInfo"/> class, which acts as a wrapper
            for a file path.
            </summary>
            <param name="path">
            The fully qualified name of the new file, or the relative file name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is empty, contains only white spaces, or
            contains invalid characters.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Access to fileName is denied.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must
            be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path"/> contains a colon (:) in the middle of the string.
            </exception>
            <remarks>
            You can specify either the fully qualified or the relative file
            name, but the security check gets the fully qualified name.
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Attributes">
            <summary>
            Gets or sets the FileAttributes of the current FileSystemInfo.
            </summary>
            <value>FileAttributes of the current FileSystemInfo.</value>
            <exception cref="T:System.IO.FileNotFoundException">
            The specified file does not exist.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            The caller attempts to set an invalid file attribute.
            </exception>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            The value of this property is a combination of the archive,
            compressed, directory, hidden, offline, read-only, system, and
            temporary file attribute flags.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current FileSystemInfo object.
            </summary>
            <value>
            The creation date and time of the current FileSystemInfo object.
            </value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            <para>
            Windows Mobile for Pocket PC, Windows Mobile for Smartphone, Windows
            CE Platform Note: This property is read-only.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.CreateTimeUtc">
            <summary>
            Gets the creation time, in coordinated universal time (UTC), of the
            current FileSystemInfo object.
            </summary>
            <value>
            The creation date and time in UTC format of the current
            FileSystemInfo object.
            </value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Exists">
            <summary>
            Gets a value indicating whether the directory exists.
            </summary>
            <value>
            <see langword="true"/> if the directory exists; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Extension">
            <summary>
            Gets the string representing the extension part of the file.
            </summary>
            <value>A string containing the FileSystemInfo extension.</value>
            <remarks>
            The Extension property returns the FileSystemInfo extension,
            including the period (.). For example, for a file C:\NewFile.txt,
            this property returns ".txt".
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.DirectoryOwner">
            <summary>
            Gets the Windows owner associated with the directory.
            </summary>
            <value>
            A string representing the owner of the directory or
            <see langword="null"/> if the owner cannot be determined.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
            <value>A string containing the full path.</value>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <remarks>
            For example, for a file C:\NewFile.txt, this property returns "C:\NewFile.txt".
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.LastAccessTime">
            <summary>
            Gets the time the current file or directory was last accessed.
            </summary>
            <value>The time that the current file or directory was last accessed.</value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            <para>
            Windows Mobile for Pocket PC, Windows Mobile for Smartphone, Windows
            CE Platform Note: This property is read-only.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.LastAccessTimeUtc">
            <summary>
            Gets the time, in coordinated universal time (UTC), that the current
            file or directory was last accessed.
            </summary>
            <value>
            The UTC time that the current file or directory was last accessed.
            </value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.LastWriteTime">
            <summary>
            Gets the time when the current file or directory was last written to.
            </summary>
            <value>The time the current file was last written.</value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            <para>
            Windows Mobile for Pocket PC, Windows Mobile for Smartphone, Windows
            CE Platform Note: This property is read-only.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.LastWriteTimUtc">
            <summary>
            Gets the time, in coordinated universal time (UTC), when the current
            file or directory was last written to.
            </summary>
            <value>The UTC time when the current file was last written to.</value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Name">
            <summary>
            Gets the name of this DirectoryInfo instance.
            </summary>
            <value>The directory name.</value>
            <remarsk>
            <para>
            This Name property returns only the name of the directory, such as
            "Bin". To get the full path, such as "c:\public\Bin", use the
            FullName property.
            </para>
            <para>
            The Name property of a DirectoryInfo requires no permission (beyond
            the read permission to the directory necessary to construct the
            Exists) but can give out the directory name. If it is necessary to
            hand out a DirectoryInfo to a protected directory with a
            cryptographically secure name, create a dummy directory for the
            untrusted codeâs use.
            </para>
            </remarsk>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
            <value>
            The parent directory, or a <see langword="null"/> if the path is
            null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").
            </value>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Root">
            <summary>
            Gets the root portion of a path.
            </summary>
            <value>A DirectoryInfo object representing the root of a path.</value>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
            <remarks>If the directory already exists, this method does nothing.</remarks>
            <exception cref="T:System.IO.IOException">The directory cannot be created.</exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates a directory using a DirectorySecurity object.
            </summary>
            <param name="directorySecurity">
            The access control to apply to the directory.
            </param>
            <remarks>
            <para>
            Use this method overload to create a directory with access control,
            so there is no chance the directory can be accessed before security
            is applied.
            </para>
            <para>If the directory already exists, this method does nothing.</para>
            </remarks>
            <exception cref="T:System.IO.IOException">
            The directory specified by path is read-only or is not empty.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            path is a zero-length string, contains only white space, or contains
            one or more invalid characters as defined by InvalidPathChars.
            </exception>
            <exception cref="T:System.ArgumentNullException">path is a <see langword="null"/>.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must
            be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Creating a directory with only the colon (:) character was attempted.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path. The
            specified path can be relative to this instance of the DirectoryInfo class.
            </summary>
            <param name="path">
            The specified path. This cannot be a different disk volume or
            Universal Naming Convention (UNC) name.
            </param>
            <returns>The last directory specified in path.</returns>
            <remarks>
            <para>
            Any and all directories specified in path are created, unless some
            part of path is invalid. The path parameter specifies a directory
            path, not a file path. If the subdirectory already exists, this
            method does nothing.
            </para>
            <para type="note">Path names are limited to 248 characters.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> does not specify a valid file path or
            contains invalid DirectoryInfo characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.IO.IOException">
            <para>The subdirectory cannot be created.</para>
            <para>-or-</para>
            <para>A file or directory already has the name specified by path.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must
            be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            <para>
            The caller does not have code access permission to create the directory.
            </para>
            <para>-or-</para>
            <para>
            The caller does not have code access permission to read the
            directory described by the returned DirectoryInfo object. This can
            occur when the path parameter describes an existing directory.
            </para>
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path with
            the specified security. The specified path can be relative to this
            instance of the DirectoryInfo class.
            </summary>
            <param name="path">
            The specified path. This cannot be a different disk volume or
            Universal Naming Convention (UNC) name.
            </param>
            <param name="directorySecurity">The security to apply.</param>
            <returns>The last directory specified in path.</returns>
            <remarks>
            <para>
            Any and all directories specified in path are created, unless some
            part of path is invalid. The path parameter specifies a directory
            path, not a file path. If the subdirectory already exists, this
            method does nothing.
            </para>
            <para type="note">Path names are limited to 248 characters.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> does not specify a valid file path or
            contains invalid DirectoryInfo characters.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.IO.IOException">
            <para>The subdirectory cannot be created.</para>
            <para>-or-</para>
            <para>A file or directory already has the name specified by path.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must
            be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            <para>
            The caller does not have code access permission to create the directory.
            </para>
            <para>-or-</para>
            <para>
            The caller does not have code access permission to read the
            directory described by the returned DirectoryInfo object. This can
            occur when the path parameter describes an existing directory.
            </para>
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.Delete">
            <summary>
            Deletes this DirectoryInfo if it is empty.
            </summary>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            <para>The directory is not empty.</para>
            <para>-or-</para>
            <para>The directory is the application's current working directory.</para>
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes this instance of a DirectoryInfo, specifying whether to
            delete subdirectories and files.
            </summary>
            <param name="recursive">
            <see langword="true"/> to delete this directory, its subdirectories,
            and all files; otherwise, <see langword="false"/>.
            </param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            <para>The directory is read-only.</para>
            <para>-or-</para>
            <para>
            The directory contains one or more files or subdirectories and
            <paramref name="recursive"/> is <see langword="false"/>.
            </para>
            <para>-or-</para>
            <para>The directory is the application's current working directory.</para>
            </exception>
            <remarks>
            If the DirectoryInfo has no files or subdirectories, this method
            deletes the DirectoryInfo even if recursive is false. Attempting to
            delete a DirectoryInfo that is not empty when recursive is false
            throws an IOException.
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetAccessControl">
            <summary>
            Gets a DirectorySecurity object that encapsulates the access control
            list (ACL) entries for the directory described by the current
            DirectoryInfo object.
            </summary>
            <returns>
            A DirectorySecurity object that encapsulates the access control
            rules for the directory.
            </returns>
            <exception cref="!:SystemException">
            The directory could not be found or modified.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating systme is not Microsoft Windows 2000 or later.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the directory.
            </exception>
            <exception cref="!:SystemException">The file could not be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>The current process does not have access to open the directory.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>
            <para>
            Calling this method overload is equivalent to calling the
            GetAccessControl method overload and specifying the access control
            sections AccessControlSections.Access | AccessControlSections.Owner
            | AccessControlSections.Group
            (AccessControlSections.AccessOrAccessControlSections.OwnerOrAccessControlSections.Group
            in Visual Basic).
            </para>
            <para>
            Use the GetAccessControl method to retrieve the access control list
            (ACL) entries for the current file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file or directory. For more
            information, see ACL Technology Overview and How to: Add or Remove
            Access Control List Entries.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a DirectorySecurity object that encapsulates the specified type
            of access control list (ACL) entries for the directory described by
            the current DirectoryInfo object.
            </summary>
            <param name="includeSections">
            One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies
            which group of access control entries to retrieve.
            </param>
            <returns>
            A DirectorySecurity object that encapsulates the access control
            rules for the file described by the path parameter.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating systme is not Microsoft Windows 2000 or later.
            </exception>
            <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">
            The current system account does not have administrative privileges.
            </exception>
            <exception cref="!:SystemException">The file could not be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>This operation is not supported on teh current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>
            <para>
            Use the GetAccessControl method to retrieve the access control list
            (ACL) entries for the current file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>An array of DirectoryInfo objects.</returns>
            <remarks>
            If there are no subdirectories, this method returns an empty array.
            This method is not recursive.
            </remarks>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path encapsulated in the DirectoryInfo object is invalid, such
            as being on an unmapped drive.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns an array of directories in the current DirectoryInfo
            matching the given search criteria.
            </summary>
            <param name="searchPattern">
            The search string, such as "System*", used to search for all
            directories beginning with the word "System".
            </param>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
            <remarks>
            <para>
            Wildcards are permitted. For example, the searchPattern string "*t"
            searches for all directory names in path ending with the letter "t".
            The searchPattern string "s*" searches for all directory names in
            path beginning with the letter "s".
            </para>
            <para>
            The string ".." can only be used in searchPattern if it is specified
            as a part of a valid directory name, such as in the directory name
            "a..b". It cannot be used to move up the directory hierarchy.
            </para>
            <para>
            If there are no subdirectories, or no subdirectories match the
            searchPattern parameter, this method returns an empty array.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path encapsulated in the DirectoryInfo object is invalid, such
            as being on an unmapped drive.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
            Returns an array of directories in the current DirectoryInfo
            matching the given search criteria and using a value to determine
            whether to search subdirectories.
            </summary>
            <param name="searchPattern">
            The search string, such as "System*", used to search for all
            directories beginning with the word "System".
            </param>
            <param name="searchOption">
            One of the values of the SearchOption enumeration that specifies
            whether the search operation should include only the current
            directory or should include all subdirectories.
            </param>
            <returns>An array of type DirectoryInfo matching <paramref name="searchPattern"/>.</returns>
            <remarks>
            <para>
            Wildcards are permitted. For example, the searchPattern string "*t"
            searches for all directory names in path ending with the letter "t".
            The searchPattern string "s*" searches for all directory names in
            path beginning with the letter "s".
            </para>
            <para>
            The string ".." can only be used in <paramref name="searchPattern"/>
            if it is specified as a part of a valid directory name, such as in
            the directory name "a..b". It cannot be used to move up the
            directory hierarchy.
            </para>
            <para>
            If there are no subdirectories, or no subdirectories match the
            searchPattern parameter, this method returns an empty array.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path encapsulated in the DirectoryInfo object is invalid, such
            as being on an unmapped drive.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <returns>An array of type FileInfo.</returns>
            <remarks>
            <para>
            If there are no files in the DirectoryInfo, this method returns an
            empty array.
            </para>
            <para>
            The order of the returned file names is not guaranteed; use the Sort
            method if a specific sort order is required.
            </para>
            </remarks>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path is invalid, such as being on an unmapped drive.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns a file list from the current directory matching the given searchPattern.
            </summary>
            <param name="searchPattern">The search string, such as "*.txt".</param>
            <returns>An array of type FileInfo.</returns>
            <remarks>
            <para>
            The following wildcard specifiers are permitted in the searchPattern parameter.
            </para>
            <list type="table">
            <listheader>
            <term>Wildcard character</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>*</term>
            <description>Zero or more characters.</description>
            </item>
            <item>
            <term>?</term>
            <description>Exactly one character.</description>
            </item>
            </list>
            <para>
            The order of the returned file names is not guaranteed; use the Sort
            method if a specific sort order is required.
            </para>
            <para>
            Wildcards are permitted. For example, the searchPattern string
            "*.txt" searches for all file names having an extension of "txt".
            The searchPattern string "s*" searches for all file names beginning
            with the letter "s". If there are no files, or no files that match
            the searchPattern string in the DirectoryInfo, this method returns
            an empty array.
            </para>
            <para type="note">
            When using the asterisk wildcard character in a searchPattern (for
            example, "*.txt"), the matching behavior varies depending on the
            length of the specified file extension. A searchPattern with a file
            extension of exactly three characters returns files with an
            extension of three or more characters, where the first three
            characters match the file extension specified in the searchPattern.
            A searchPattern with a file extension of one, two, or more than
            three characters returns only files with extensions of exactly that
            length that match the file extension specified in the searchPattern.
            When using the question mark wildcard character, this method returns
            only files that match the specified file extension. For example,
            given two files in a directory, "file1.txt" and "file1.txtother", a
            search pattern of "file?.txt" returns only the first file, while a
            search pattern of "file*.txt" returns both files.
            </para>
            <para>
            The following list shows the behavior of different lengths for the
            searchPattern parameter:
            </para>
            <list type="bulleted">
            <item>
            "*.abc" returns files having an extension
            of.abc,.abcd,.abcde,.abcdef, and so on.
            </item>
            <item>"*.abcd" returns only files having an extension of.abcd.</item>
            <item>"*.abcde" returns only files having an extension of.abcde.</item>
            <item>"*.abcdef" returns only files having an extension of.abcdef.</item>
            </list>
            <para type="note">
            Because this method checks against file names with both the 8.3 file
            name format and the long file name format, a search pattern similar
            to "*1*.txt" may return unexpected file names. For example, using a
            search pattern of "*1*.txt" will return "longfilename.txt" because
            the equivalent 8.3 file name format would be "longf~1.txt".
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            Returns a file list from the current directory matching the given
            searchPattern and using a value to determine whether to search subdirectories.
            </summary>
            <param name="searchPattern">The search string, such as "*.txt".</param>
            <returns>An array of type FileInfo.</returns>
            <param name="searchOption">
            One of the values of the SearchOption enumeration that specifies
            whether the search operation should include only the current
            directory or should include all subdirectories.
            </param>
            <remarks>
            <para>
            The following wildcard specifiers are permitted in the searchPattern parameter.
            </para>
            <list type="table">
            <listheader>
            <term>Wildcard character</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>*</term>
            <description>Zero or more characters.</description>
            </item>
            <item>
            <term>?</term>
            <description>Exactly one character.</description>
            </item>
            </list>
            <para>
            The order of the returned file names is not guaranteed; use the Sort
            method if a specific sort order is required.
            </para>
            <para>
            Wildcards are permitted. For example, the searchPattern string
            "*.txt" searches for all file names having an extension of "txt".
            The searchPattern string "s*" searches for all file names beginning
            with the letter "s". If there are no files, or no files that match
            the searchPattern string in the DirectoryInfo, this method returns
            an empty array.
            </para>
            <para type="note">
            When using the asterisk wildcard character in a searchPattern (for
            example, "*.txt"), the matching behavior varies depending on the
            length of the specified file extension. A searchPattern with a file
            extension of exactly three characters returns files with an
            extension of three or more characters, where the first three
            characters match the file extension specified in the searchPattern.
            A searchPattern with a file extension of one, two, or more than
            three characters returns only files with extensions of exactly that
            length that match the file extension specified in the searchPattern.
            When using the question mark wildcard character, this method returns
            only files that match the specified file extension. For example,
            given two files in a directory, "file1.txt" and "file1.txtother", a
            search pattern of "file?.txt" returns only the first file, while a
            search pattern of "file*.txt" returns both files.
            </para>
            <para>
            The following list shows the behavior of different lengths for the
            searchPattern parameter:
            </para>
            <list type="bulleted">
            <item>
            "*.abc" returns files having an extension
            of.abc,.abcd,.abcde,.abcdef, and so on.
            </item>
            <item>"*.abcd" returns only files having an extension of.abcd.</item>
            <item>"*.abcde" returns only files having an extension of.abcde.</item>
            <item>"*.abcdef" returns only files having an extension of.abcdef.</item>
            </list>
            <para type="note">
            Because this method checks against file names with both the 8.3 file
            name format and the long file name format, a search pattern similar
            to "*1*.txt" may return unexpected file names. For example, using a
            search pattern of "*1*.txt" will return "longfilename.txt" because
            the equivalent 8.3 file name format would be "longf~1.txt".
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="searchPattern"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetFileSystemInfos">
            <summary>
            Returns an array of strongly typed FileSystemInfo entries
            representing all the files and subdirectories in a directory.
            </summary>
            <returns>An array of strongly typed FileSystemInfo entries.</returns>
            <remarks>
            <para>
            If there are no files or directories in the DirectoryInfo, this
            method returns an empty array. This method is not recursive.
            </para>
            <para>
            For subdirectories, the FileSystemInfo objects returned by this
            method can be cast to the derived class DirectoryInfo. Use the
            FileAttributes value returned by the FileSystemInfo.Attributes
            property to determine whether the FileSystemInfo represents a file
            or a directory.
            </para>
            </remarks>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path is invalid, such as being on an unmapped drive.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>
            Retrieves an array of strongly typed FileSystemInfo objects
            representing the files and subdirectories matching the specified
            search criteria.
            </summary>
            <param name="searchPattern">
            The search string, such as "System*", used to search for all
            directories beginning with the word "System".
            </param>
            <returns>
            An array of strongly typed FileSystemInfo objects matching the
            search criteria.
            </returns>
            <remarks>
            <para>This method is not recursive.</para>
            <para>
            For subdirectories, the FileSystemInfo objects returned by this
            method can be cast to the derived class DirectoryInfo. Use the
            FileAttributes value returned by the FileSystemInfo.Attributes
            property to determine whether the FileSystemInfo represents a file
            or a directory.
            </para>
            <para>
            Wild cards are permitted. For example, the searchPattern string "*t"
            searches for all directory names in path ending with the letter "t".
            The searchPattern string "s*" searches for all directory names in
            path beginning with the letter "s".
            </para>
            <para>
            The string ".." can only be used in searchPattern if it is specified
            as a part of a valid directory name, such as in the directory name
            "a..b". It cannot be used to move up the directory hierarchy. If
            there are no files or directories, or no files or directories that
            match the searchPattern string in the DirectoryInfo, this method
            returns an empty array.
            </para>
            </remarks>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The path is invalid, such as being on an unmapped drive.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.MoveTo(System.String)">
            <summary>
            Moves a DirectoryInfo instance and its contents to a new path.
            </summary>
            <param name="destinationDirectoryName">
            The name and path to which to move this directory. The destination
            cannot be another disk volume or a directory with the identical
            name. It can be an existing directory to which you want to add this
            directory as a subdirectory.
            </param>
            <remarks>
            <para>
            This method throws an IOException if, for example, you try to move
            c:\mydir to c:\public, and c:\public already exists. You must
            specify "c:\\public\\mydir" as the
            <paramref name="destinationDirectoryName"/> parameter, or specify a
            new directory name such as "c:\\newdir".
            </para>
            <para>
            This method permits moving a directory to a read-only directory. The
            read/write attribute of neither directory is affected.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="destinationDirectoryName"/> is a <see langword="null"/>.</para>
            <para>-or-</para>
            <para>
            The directory being moved and the destination directory have the
            same name.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="destinationDirectoryName"/> is an empty string ("").
            </exception>
            <exception cref="T:System.IO.IOException">
            <para>An attempt was made to move a directory to a different volume.</para>
            <para>-or-</para>
            <para><paramref name="destinationDirectoryName"/> already exists.</para>
            <para>-or-</para>
            <para>You are not authorized to access this path.</para>
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The destination directory cannot be found.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
            <exception cref="T:System.IO.IOException">
            A device such as a disk drive is not ready.
            </exception>
            <remarks>
            <para>
            FileSystemInfo.Refresh takes a snapshot of the file from the current
            file system. Refresh cannot correct the underlying file system even
            if the file system returns incorrect or outdated information. This
            can happen on platforms such as Windows 98.
            </para>
            <para>
            Calls must be made to Refresh before attempting to get the attribute
            information, or the information will be outdated.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Applies access control list (ACL) entries described by a
            DirectorySecurity object to the directory described by the current
            DirectoryInfo object.
            </summary>
            <param name="directorySecurity">
            A DirectorySecurity object that describes an ACL entry to apply to
            the directory described by the path parameter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="directorySecurity"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="!:SystemException">
            The file could not be found or modified.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The current process does not have access to open the file.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows 2000 or later.
            </exception>
            <remarks>
            <para>
            The SetAccessControl method applies access control list (ACL)
            entries to the current file that represents the noninherited ACL list.
            </para>
            <para>
            Use the SetAccessControl method whenever you need to add or remove
            ACL entries from a file.
            </para>
            <para type="caution">
            The ACL specified for the directorySecurity parameter replaces the
            existing ACL for the file. To add permissions for a new user, use
            the GetAccessControl method to obtain the existing ACL, modify it,
            and then use SetAccessControl to apply it back to the file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file.
            </para>
            <para>
            The SetAccessControl method persists only DirectorySecurity objects
            that have been modified after object creation. If a
            DirectorySecurity object has not been modified, it will not be
            persisted to a file. Therefore, it is not possible to retrieve a
            DirectorySecurity object from one file and reapply the same object
            to another file.
            </para>
            <para>To copy ACL information from one file to another:</para>
            <list type="numbered">
            <item>
            Use the GetAccessControl method to retrieve the DirectorySecurity
            object from the source file.
            </item>
            <item>
            Create a new DirectorySecurity object for the destination file.
            </item>
            <item>
            Use the GetSecurityDescriptorBinaryForm or
            GetSecurityDescriptorSddlForm method of the source FileSecurity
            object to retrieve the ACL information.
            </item>
            <item>
            Use the SetSecurityDescriptorBinaryForm or
            SetSecurityDescriptorSddlForm method to copy the information
            retrieved in step 3 to the destination DirectorySecurity object.
            </item>
            <item>
            Set the destination DirectorySecurity object to the destination file
            using the SetAccessControl method.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.ToString">
            <summary>
            Returns the path as a string.
            </summary>
            <returns>A string representing the path.</returns>
            <remarks>
            The string returned by the ToString method represents path that was
            passed to the constructor. When you create a FileInfo object using
            the constructors, the ToString method returns the fully qualified
            path. However, there are cases where the string returned by the
            ToString method does not represent the fully qualified path. For
            example, when you create a FileInfo object using the GetFiles
            method, the ToString method does not represent the fully qualified path.
            </remarks>
        </member>
        <member name="T:Cadru.IO.ExtendedFileInfo">
            <summary>
            Provides an encapsulated implementation of the standard .NET
            <see cref="T:System.IO.FileInfo"/>, <see cref="T:System.Diagnostics.FileVersionInfo"/> and the
            <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb762179(v=vs.85).aspx">SHGetFileInfo</see>
            API method.
            </summary>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.IO.ExtendedFileInfo"/>
            class, which acts as a wrapper for a file path.
            </summary>
            <param name="fileName">
            The fully qualified name of the new file, or the relative file name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileName"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            The file name is empty, contains only white spaces, or contains
            invalid characters.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Access to <paramref name="fileName"/> is denied.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must
            be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="fileName"/> contains a colon (:) in the middle of
            the string.
            </exception>
            <remarks>
            You can specify either the fully qualified or the relative file
            name, but the security check gets the fully qualified name.
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Attributes">
            <summary>
            Gets or sets the FileAttributes of the current FileSystemInfo.
            </summary>
            <value>FileAttributes of the current FileSystemInfo.</value>
            <exception cref="T:System.IO.FileNotFoundException">
            The specified file does not exist.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            The caller attempts to set an invalid file attribute.
            </exception>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            The value of this property is a combination of the archive,
            compressed, directory, hidden, offline, read-only, system, and
            temporary file attribute flags.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Comments">
            <summary>
            Gets the comments associated with the file.
            </summary>
            <value>
            The comments associated with the file or a <see langword="null"/> if
            the file did not contain version information.
            </value>
            <remarks>
            This property contains additional information that can be displayed
            for diagnostic purposes.
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.CompanyName">
            <summary>
            Gets the name of the company that produced the file.
            </summary>
            <value>
            The name of the company that produced the file or a
            <see langword="null"/> if the file did not contain version information.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current FileSystemInfo object.
            </summary>
            <value>
            The creation date and time of the current FileSystemInfo object.
            </value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            <para>
            Windows Mobile for Pocket PC, Windows Mobile for Smartphone, Windows
            CE Platform Note: This property is read-only.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.CreateTimeUtc">
            <summary>
            Gets the creation time, in coordinated universal time (UTC), of the
            current FileSystemInfo object.
            </summary>
            <value>
            The creation date and time in UTC format of the current
            FileSystemInfo object.
            </value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Directory">
            <summary>
            Gets an instance of the parent directory.
            </summary>
            <value>
            A <see cref="T:System.IO.DirectoryInfo"/> object representing the parent
            directory of this file.
            </value>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <remarks>
            <para>
            To get the parent directory as a string, use the
            <see cref="P:Cadru.IO.ExtendedFileInfo.DirectoryName"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.DirectoryName">
            <summary>
            Gets a string representing the directory's full path.
            </summary>
            <value>A string representing the directory's full path.</value>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A <see langword="null"/> was passed in for the directory name.
            </exception>
            <remarks>
            <para>
            To get the parent directory as a <see cref="T:System.IO.DirectoryInfo"/> object,
            use the <see cref="P:Cadru.IO.ExtendedFileInfo.Directory"/> property.
            </para>
            <para>
            When first called, <see cref="T:Cadru.IO.ExtendedFileInfo"/> calls
            <see cref="M:Cadru.IO.ExtendedFileInfo.Refresh"/> and caches information on the file. On
            subsequent calls, you must call <see cref="M:Cadru.IO.ExtendedFileInfo.Refresh"/> to get the
            latest copy of the information.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ExecutableType">
            <summary>
            Gets the type of executable that this instance of FileVersionInfo describes.
            </summary>
            <value>
            The type of executable of the file described by this instance of FileVersionInfo.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Exists">
            <summary>
            Gets a value indicating whether a file exists.
            </summary>
            <value>
            <see langword="true"/> if the file exists; <see langword="false"/>
            if the file does not exist or the file is a directory.
            </value>
            <remarks>
            <para>
            When first called, <see cref="T:Cadru.IO.ExtendedFileInfo"/> calls
            <see cref="M:Cadru.IO.ExtendedFileInfo.Refresh"/> and caches information on the file. On
            subsequent calls, you must call <see cref="M:Cadru.IO.ExtendedFileInfo.Refresh"/> to get the
            latest copy of the information.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Extension">
            <summary>
            Gets the string representing the extension part of the file.
            </summary>
            <value>A string containing the FileSystemInfo extension.</value>
            <remarks>
            The Extension property returns the FileSystemInfo extension,
            including the period (.). For example, for a file C:\NewFile.txt,
            this property returns ".txt".
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileBuildPart">
            <summary>
            Gets the build number of the file.
            </summary>
            <value>
            A value representing the build number of the file or a
            <see langword="null"/> if the file did not contain version information.
            </value>
            <remarks>
            <para>
            Typically, a version number is displayed as "major number.minor
            number.build number.private part number". A file version number is a
            64-bit number that holds the version number for a file as follows:
            </para>
            <list type="bullet">
            <item>The first 16 bits are the FileMajorPart number.</item>
            <item>The next 16 bits are the FileMinorPart number.</item>
            <item>The third set of 16 bits are the FileBuildPart number.</item>
            <item>The last 16 bits are the FilePrivatePart number.</item>
            </list>
            <para>This property gets the third set of 16 bits.</para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileDescription">
            <summary>
            Gets the description of the file.
            </summary>
            <value>
            The description of the file or a <see langword="null"/> if the file
            did not contain version information.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileMajorPart">
            <summary>
            Gets the major part of the version number.
            </summary>
            <value>
            A value representing the major part of the version number or a
            <see langword="null"/> if the file did not contain version information.
            </value>
            <remarks>
            <para>
            Typically, a version number is displayed as "major number.minor
            number.build number.private part number". A file version number is a
            64-bit number that holds the version number for a file as follows:
            </para>
            <list type="bullet">
            <item>The first 16 bits are the FileMajorPart number.</item>
            <item>The next 16 bits are the FileMinorPart number.</item>
            <item>The third set of 16 bits are the FileBuildPart number.</item>
            <item>The last 16 bits are the FilePrivatePart number.</item>
            </list>
            <para>This property gets the first set of 16 bits.</para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileMinorPart">
            <summary>
            Gets the minor part of the version number.
            </summary>
            <value>
            A value representing the minor part of the version number or a
            <see langword="null"/> if the file did not contain version information.
            </value>
            <remarks>
            <para>
            Typically, a version number is displayed as "major number.minor
            number.build number.private part number". A file version number is a
            64-bit number that holds the version number for a file as follows:
            </para>
            <list type="bullet">
            <item>The first 16 bits are the FileMajorPart number.</item>
            <item>The next 16 bits are the FileMinorPart number.</item>
            <item>The third set of 16 bits are the FileBuildPart number.</item>
            <item>The last 16 bits are the FilePrivatePart number.</item>
            </list>
            <para>This property gets the second set of 16 bits.</para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileName">
            <summary>
            Gets the name of the file that this instance of FileVersionInfo describes.
            </summary>
            <value>The name of the file described by this instance of FileVersionInfo.</value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileOwner">
            <summary>
            Gets the Windows owner associated with the file.
            </summary>
            <value>
            A string representing the owner of the file or
            <see langword="null"/> if the owner cannot be determined.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FilePrivatePart">
            <summary>
            Gets the private part number.
            </summary>
            <value>
            A value representing the file private part number or a
            <see langword="null"/> if the file did not contain version information.
            </value>
            <remarks>
            <para>
            Typically, a version number is displayed as "major number.minor
            number.build number.private part number". A file version number is a
            64-bit number that holds the version number for a file as follows:
            </para>
            <list type="bullet">
            <item>The first 16 bits are the FileMajorPart number.</item>
            <item>The next 16 bits are the FileMinorPart number.</item>
            <item>The third set of 16 bits are the FileBuildPart number.</item>
            <item>The last 16 bits are the FilePrivatePart number.</item>
            </list>
            <para>This property gets the last set of 16 bits.</para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileType">
            <summary>
            Gets the type of file.
            </summary>
            <value>The type of the file as displayed by the Shell.</value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileVersion">
            <summary>
            Gets the file version number.
            </summary>
            <value>
            The version number of the file or a <see langword="null"/> if the
            file did not contain version information.
            </value>
            <remarks>
            <para>
            Typically, a version number is displayed as "major number.minor
            number.build number.private part number". A file version number is a
            64-bit number that holds the version number for a file as follows:
            </para>
            <list type="bullet">
            <item>The first 16 bits are the FileMajorPart number.</item>
            <item>The next 16 bits are the FileMinorPart number.</item>
            <item>The third set of 16 bits are the FileBuildPart number.</item>
            <item>The last 16 bits are the FilePrivatePart number.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
            <value>A string containing the full path.</value>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <remarks>
            For example, for a file C:\NewFile.txt, this property returns "C:\NewFile.txt".
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.InternalName">
            <summary>
            Gets the internal name of the file, if one exists.
            </summary>
            <value>
            The internal name of the file. If none exists, this property will
            contain the original name of the file without the extension.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsDebug">
            <summary>
            Gets a value indicating whether the file contains debugging
            information or is compiled with debugging features enabled.
            </summary>
            <value>
            <see langword="true"/> if the file contains debugging information or
            is compiled with debugging features enabled; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            <para>
            The FileVersionInfo properties are based on version resource
            information built into the file. Version resources are often built
            into binary files such as .exe or .dll files; text files do not have
            version resource information.
            </para>
            <para>
            Version resources are typically specified in a Win32 resource file,
            or in assembly attributes. The IsDebug property reflects the
            VS_FF_DEBUG flag value in the file's VS_FIXEDFILEINFO block, which
            is built from the VERSIONINFO resource in a Win32 resource file. For
            more information about specifying version resources in a Win32
            resource file, see the Platform SDK About Resource Files topic and
            VERSIONINFO Resource topic topics.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsPatched">
            <summary>
            Gets a value indicating whether the file has been modified and is
            not identical to the original shipping file of the same version number.
            </summary>
            <value>
            <see langword="true"/> if the file is patched; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsPreRelease">
            <summary>
            Gets a value indicating whether the file is a development version,
            rather than a commercially released product.
            </summary>
            <value>
            <see langword="true"/> if the file is prerelease; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsPrivateBuild">
            <summary>
            Gets a value indicating whether the file was built using standard
            release procedures.
            </summary>
            <value>
            <see langword="true"/> if the file is a private build;
            <see langword="false"/> if the file was built using standard release
            procedures or if the file did not contain version information.
            </value>
            <remarks>
            If this value is true, PrivateBuild will describe how this version
            of the file differs from the standard version.
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the file is read only.
            </summary>
            <value>
            <see langword="true"/> if the current file is read only; otherwise <see langword="false"/>.
            </value>
            <exception cref="T:System.IO.FileNotFoundException">
            The file described by the current <see cref="T:Cadru.IO.ExtendedFileInfo"/>
            object could not be found.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>
            The file described by the current <see cref="T:Cadru.IO.ExtendedFileInfo"/>
            object could not be found.
            </para>
            <para>-or-</para>
            <para>This operation is not supported on the current paltform.</para>
            <para>-or-</para>
            <para>THe called does not have the required permissions.</para>
            </exception>
            <remarsk>
            <para>
            Use the <see cref="P:Cadru.IO.ExtendedFileInfo.IsReadOnly"/> property to quickly determine or
            change whether the current file is read only.
            </para>
            <para>
            When first called, <see cref="T:Cadru.IO.ExtendedFileInfo"/> calls
            <see cref="M:Cadru.IO.ExtendedFileInfo.Refresh"/> and caches information on the file. On
            subsequent calls, you must call <see cref="M:Cadru.IO.ExtendedFileInfo.Refresh"/> to get the
            latest copy of the information.
            </para>
            </remarsk>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsSpecialBuild">
            <summary>
            Gets a value indicating whether the file is a special build.
            </summary>
            <value>
            <see langword="true"/> if the file is a special build; otherwise, <see langword="false"/>.
            </value>
            <remarks>
            A file that is a special build was built using standard release
            procedures, but the file differs from a standard file of the same
            version number. If this value is true, the SpecialBuild property
            must specify how this file differs from the standard version.
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Language">
            <summary>
            Gets the default language string for the version info block.
            </summary>
            <value>
            The description string for the Microsoft Language Identifier in the
            version resource or a <see langword="null"/> if the file did not
            contain version information.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LastAccessTime">
            <summary>
            Gets the time the current file or directory was last accessed.
            </summary>
            <value>The time that the current file or directory was last accessed.</value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            <para>
            Windows Mobile for Pocket PC, Windows Mobile for Smartphone, Windows
            CE Platform Note: This property is read-only.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LastAccessTimeUtc">
            <summary>
            Gets the time, in coordinated universal time (UTC), that the current
            file or directory was last accessed.
            </summary>
            <value>
            The UTC time that the current file or directory was last accessed.
            </value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LastWriteTime">
            <summary>
            Gets the time when the current file or directory was last written to.
            </summary>
            <value>The time the current file was last written.</value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            <para>
            Windows Mobile for Pocket PC, Windows Mobile for Smartphone, Windows
            CE Platform Note: This property is read-only.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LastWriteTimUtc">
            <summary>
            Gets the time, in coordinated universal time (UTC), when the current
            file or directory was last written to.
            </summary>
            <value>The UTC time when the current file was last written to.</value>
            <exception cref="T:System.IO.IOException">
            Refresh cannot initialize the data.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows NT or later.
            </exception>
            <remarks>
            <para>
            When first called, FileSystemInfo calls Refresh and returns the
            cached information on APIs to get attributes and so on. On
            subsequent calls, you must call Refresh to get the latest copy of
            the information.
            </para>
            <para>
            If the file described in the FileSystemInfo object does not exist,
            this property will return 12:00 midnight, January 1, 1601 A.D.
            (C.E.) Coordinated Universal Time (UTC), adjusted to local time.
            </para>
            <para>
            NTFS-formatted drives may cache file meta-info, such as file
            creation time, for a short period of time. This process is known as
            file tunneling. As a result, it may be necessary to explicitly set
            the creation time of a file if you are overwriting or replacing an
            existing file.
            </para>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the FileSystemInfo object does not support this information.
            </para>
            <para>
            Windows 95, Windows 98, Windows 98 Second Edition Platform Note:
            These operating systems do not support this property, and
            DirectoryInfo implementations of this property are not supported.
            </para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LegalCopyright">
            <summary>
            Gets all copyright notices that apply to the specified file.
            </summary>
            <value>The copyright notices that apply to the specified file.</value>
            <remarks>
            This should include the full text of all notices, legal symbols,
            copyright dates, and so on or a <see langword="null"/> if the file
            did not contain version information.
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LegalTrademarks">
            <summary>
            Gets the trademarks and registered trademarks that apply to the file.
            </summary>
            <value>
            The trademarks and registered trademarks that apply to the file or a
            <see langword="null"/> if the file did not contain version information.
            </value>
            <remarks>
            The legal trademarks include the full text of all notices, legal
            symbols, and trademark numbers.
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Length">
            <summary>
            Gets the size of the current file.
            </summary>
            <value>The size of the current file.</value>
            <exception cref="T:System.IO.IOException">
            <see cref="M:Cadru.IO.ExtendedFileInfo.Refresh"/> cannot update the state of the file or directory.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>The file does not exist.</para>
            <para>-or-</para>
            <para>The <see cref="P:Cadru.IO.ExtendedFileInfo.Length"/> property is called for a directory.</para>
            </exception>
            <remarsk>
            <para>
            This property value is a <see langword="null"/> if the file system
            containing the file does not support this information.
            </para>
            <para>
            When first called, <see cref="T:Cadru.IO.ExtendedFileInfo"/> calls
            <see cref="M:Cadru.IO.ExtendedFileInfo.Refresh"/> and caches information on the file. On
            subsequent calls, you must call <see cref="M:Cadru.IO.ExtendedFileInfo.Refresh"/> to get the
            latest copy of the information.
            </para>
            </remarsk>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Name">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
            <remarsk>
            <para>
            When first called, <see cref="T:Cadru.IO.ExtendedFileInfo"/> calls
            <see cref="M:Cadru.IO.ExtendedFileInfo.Refresh"/> and caches information on the file. On
            subsequent calls, you must call <see cref="M:Cadru.IO.ExtendedFileInfo.Refresh"/> to get the
            latest copy of the information.
            </para>
            </remarsk>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.OriginalFilename">
            <summary>
            Gets the name the file was created with.
            </summary>
            <value>
            The name the file was created with or a <see langword="null"/> if
            the file did not contain version information.
            </value>
            <remarks>
            This property enables an application to determine whether a file has
            been renamed.
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.PrivateBuild">
            <summary>
            Gets information about a private version of the file.
            </summary>
            <value>
            Information about a private version of the file or a
            <see langword="null"/> if the file did not contain version information.
            </value>
            <remarks>This information is present when IsPrivateBuild is true.</remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductBuildPart">
            <summary>
            Gets the build number of the product this file is associated with.
            </summary>
            <value>
            A value representing the build number of the product this file is
            associated with or a <see langword="null"/> if the file did not
            contain version information.
            </value>
            <remarks>
            <para>
            Typically, a version number is displayed as "major number.minor
            number.build number.private part number". A product version number
            is a 64-bit number that holds the version number for a file as follows:
            </para>
            <list type="bullet">
            <item>The first 16 bits are the ProductMajorPart number.</item>
            <item>The next 16 bits are the ProductMinorPart number.</item>
            <item>The third set of 16 bits are the ProductBuildPart number.</item>
            <item>The last 16 bits are the ProductPrivatePart number.</item>
            </list>
            <para>This property gets the third set of 16 bits.</para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductMajorPart">
            <summary>
            Gets the major part of the version number for the product this file
            is associated with.
            </summary>
            <value>
            A value representing the major part of the product version number or
            a <see langword="null"/> if the file did not contain version information.
            </value>
            <remarks>
            <para>
            Typically, a version number is displayed as "major number.minor
            number.build number.private part number". A product version number
            is a 64-bit number that holds the version number for a file as follows:
            </para>
            <list type="bullet">
            <item>The first 16 bits are the ProductMajorPart number.</item>
            <item>The next 16 bits are the ProductMinorPart number.</item>
            <item>The third set of 16 bits are the ProductBuildPart number.</item>
            <item>The last 16 bits are the ProductPrivatePart number.</item>
            </list>
            <para>This property gets the first set of 16 bits.</para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductMinorPart">
            <summary>
            Gets the minor part of the version number for the product this file
            is associated with.
            </summary>
            <value>
            A value representing the minor part of the product version number or
            a <see langword="null"/> if the file did not contain version information.
            </value>
            <remarks>
            <para>
            Typically, a version number is displayed as "major number.minor
            number.build number.private part number". A product version number
            is a 64-bit number that holds the version number for a file as follows:
            </para>
            <list type="bullet">
            <item>The first 16 bits are the ProductMajorPart number.</item>
            <item>The next 16 bits are the ProductMinorPart number.</item>
            <item>The third set of 16 bits are the ProductBuildPart number.</item>
            <item>The last 16 bits are the ProductPrivatePart number.</item>
            </list>
            <para>This property gets the second set of 16 bits.</para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductName">
            <summary>
            Gets the name of the product this file is distributed with.
            </summary>
            <value>
            The name of the product this file is distributed with or a
            <see langword="null"/> if the file did not contain version information.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductPrivatePart">
            <summary>
            Gets the private part number of the product this file is associated with..
            </summary>
            <value>
            A value representing the private part number of the product this
            file is associated with or a <see langword="null"/> if the file did
            not contain version information.
            </value>
            <remarks>
            <para>
            Typically, a version number is displayed as "major number.minor
            number.build number.private part number". A product version number
            is a 64-bit number that holds the version number for a file as follows:
            </para>
            <list type="bullet">
            <item>The first 16 bits are the ProductMajorPart number.</item>
            <item>The next 16 bits are the ProductMinorPart number.</item>
            <item>The third set of 16 bits are the ProductBuildPart number.</item>
            <item>The last 16 bits are the ProductPrivatePart number.</item>
            </list>
            <para>This property gets the last set of 16 bits.</para>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductVersion">
            <summary>
            Gets the version of the product this file is distributed with.
            </summary>
            <value>
            The version of the product this file is distributed with or a
            <see langword="null"/> if the file did not contain version information.
            </value>
            <remarks>
            <para>
            Typically, a version number is displayed as "major number.minor
            number.build number.private part number". A product version number
            is a 64-bit number that holds the version number for a file as follows:
            </para>
            <list type="bullet">
            <item>The first 16 bits are the ProductMajorPart number.</item>
            <item>The next 16 bits are the ProductMinorPart number.</item>
            <item>The third set of 16 bits are the ProductBuildPart number.</item>
            <item>The last 16 bits are the ProductPrivatePart number.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.SpecialBuild">
            <summary>
            Gets the special build information for the file.
            </summary>
            <value>
            The special build information for the file or a
            <see langword="null"/> if the file did not contain version information.
            </value>
            <remarks>
            If IsSpecialBuild is true, SpecialBuild must specify how this file
            differs from the standard version of the file.
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.AppendText">
            <summary>
            Creates a <see cref="T:System.IO.StreamWriter"/> that appends text to the file
            represented by this instance of the <see cref="T:Cadru.IO.ExtendedFileInfo"/>.
            </summary>
            <returns>A new <see cref="T:System.IO.StreamWriter"/>.</returns>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.CopyTo(System.String)">
            <summary>
            Copies an existing file to a new file, disallowing the overwriting
            of an existing file.
            </summary>
            <param name="destinationFileName">
            The name of the new file to copy to.
            </param>
            <returns>A new file with a fully qualified path.</returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="destinationFileName"/> is empty, contains only white
            space, or contains invalid characters.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurs, or the destination file already exists.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destinationFileName"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            A directory path is passed in, or the file is being moved to a
            differnt drive.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory specified in <paramref name="destinationFileName"/>
            does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceeded the system-defined
            maximum length. For example, on Windows-based platforms, paths must
            be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <remarks>
            <para>
            Use the <see cref="M:Cadru.IO.ExtendedFileInfo.CopyTo(System.String,System.Boolean)"/> method to allow
            overwriting of an existing file.
            </para>
            <para type="caution">
            Whenever possible, avoid using short file names (such as
            XXXXXX~1.XXX) with this method. If two files have equivalent short
            file names then this method may fail and raise an exception and/or
            result in undesirable behavior.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of
            an existing file.
            </summary>
            <param name="destinationFileName">
            The name of the new file to copy to.
            </param>
            <param name="overwrite">
            <see langword="true"/> to allow an existing file to be overwritten;
            otherwise <see langword="false"/>.
            </param>
            <returns>
            A new file, or an overwrite of an existing file if
            <paramref name="overwrite"/> is <see langword="true"/>. If the file
            exists and <paramref name="overwrite"/> is <see langword="false"/>,
            an <see cref="T:System.IO.IOException"/> is thrown.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="destinationFileName"/> is empty, contains only white
            space, or contains invalid characters.
            </exception>
            <exception cref="T:System.IO.IOException">
            An error occurs, or the destination file already exists and
            <paramref name="overwrite"/> is <see langword="false"/>.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destinationFileName"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            A directory path is passed in, or the file is being moved to a
            differnt drive.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory specified in <paramref name="destinationFileName"/>
            does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceeded the system-defined
            maximum length. For example, on Windows-based platforms, paths must
            be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="overwrite"/> contains a colon (:) in the middle of
            the string.
            </exception>
            <remarks>
            <para>
            Use this method to allow or prevent overwriting of an existing file.
            Use the <see cref="M:Cadru.IO.ExtendedFileInfo.CopyTo(System.String)"/> method to prevent overwriting
            of an existing file by default.
            </para>
            <para type="caution">
            Whenever possible, avoid using short file names (such as
            XXXXXX~1.XXX) with this method. If two files have equivalent short
            file names then this method may fail and raise an exception and/or
            result in undesirable behavior.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns>A new file.</returns>
            <remarks>
            <para>
            By default, full read/write access to new files is granted to all users.
            </para>
            <para>
            This method is a wrapper for the functionality provided by <see cref="M:System.IO.File.Create(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
            <exception cref="T:System.IO.IOException">
            The target file is open or memory-mapped on a computer running
            Microsoft Windows NT.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The path is a directory.
            </exception>
            <remarks>
            <para>If the file does not exist, this method does nothing.</para>
            <para>
            <b>Windows NT 4.0 Platform Note:</b><see cref="M:Cadru.IO.ExtendedFileInfo.Delete"/> does not
            delete a file that is open for normal I/O or a file that is memory-mapped.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.GetAccessControl">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the
            access control list (ACL) entries for the file described by the
            current <see cref="T:Cadru.IO.ExtendedFileInfo"/> object.
            </summary>
            <returns>
            A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access
            control rules for the current file.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating systme is not Microsoft Windows 2000 or later.
            </exception>
            <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">
            The current system account does not have administrative privileges.
            </exception>
            <exception cref="!:SystemException">The file could not be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>This operation is not supported on teh current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>
            <para>
            Use the <see cref="M:Cadru.IO.ExtendedFileInfo.GetAccessControl"/> method to retrieve the
            access control list (ACL) entries for the current file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the
            access control list (ACL) entries for the file described by the
            current <see cref="T:Cadru.IO.ExtendedFileInfo"/> object.
            </summary>
            <param name="includeSections">
            One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies
            which group of access control entries to retrieve.
            </param>
            <returns>
            A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access
            control rules for the current file.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating systme is not Microsoft Windows 2000 or later.
            </exception>
            <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">
            The current system account does not have administrative privileges.
            </exception>
            <exception cref="!:SystemException">The file could not be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>This operation is not supported on teh current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>
            <para>
            Use the <see cref="M:Cadru.IO.ExtendedFileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)"/> method
            to retrieve the access control list (ACL) entries for the current file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to
            specify a new file name.
            </summary>
            <param name="destinationFileName">
            The path to move the file to, which can specify a different file name.
            </param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs, such as the destination file already exists or
            the destination device is not ready.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destinationFileName"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="destinationFileName"/> is empty, contains only white
            space, or contains invalid characters.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="destinationFileName"/> is read-only or is a directory.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceeded the system-defined
            maximum length. For example, on Windows-based platforms, paths must
            be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="destinationFileName"/> contains a colon (:) in the
            middle of the string.
            </exception>
            <remarks>
            <para>
            This method works across disk volumes. For example, the file
            C:\MyFile.txt can be moved to D:\public and renamed NewFile.txt.
            </para>
            <para>
            <b>Windows Mobile for Pocket PC, Windows Mobile for Smartphone,
            Windows CE Platform Note:</b> Some device file systems do not
            support relative paths. Specify absolute path information.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="mode">
            A FileMode constant specifying the mode (for example, Open or
            Append) in which to open the file.
            </param>
            <returns>
            A file opened in the specified mode, with read/write access and unshared.
            </returns>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The file is read-only or is a directory.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.IO.IOException">The file is already open.</exception>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access.
            </summary>
            <param name="mode">
            A FileMode constant specifying the mode (for example, Open or
            Append) in which to open the file.
            </param>
            <param name="access">
            A FileAccess constant specifying whether to open the file with Read,
            Write, or ReadWrite file access.
            </param>
            <returns>
            A FileStream object opened in the specified mode and access, and unshared.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            path is empty or contains only white spaces.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.ArgumentNullException">
            One or more arguments is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path is read-only or is a directory.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.IO.IOException">The file is already open.</exception>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write
            access and the specified sharing option.
            </summary>
            <param name="mode">
            A FileMode constant specifying the mode (for example, Open or
            Append) in which to open the file.
            </param>
            <param name="access">
            A FileAccess constant specifying whether to open the file with Read,
            Write, or ReadWrite file access.
            </param>
            <param name="share">
            A FileShare constant specifying the type of access other FileStream
            objects have to this file.
            </param>
            <returns>
            A FileStream object opened with the specified mode, access, and
            sharing options.
            </returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            path is empty or contains only white spaces.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.ArgumentNullException">
            One or more arguments is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path is read-only or is a directory.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.IO.IOException">The file is already open.</exception>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.OpenRead">
            <summary>
            Creates a read-only FileStream.
            </summary>
            <returns>A new read-only FileStream object.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The path used to construct this <see cref="T:Cadru.IO.ExtendedFileInfo"/>
            instance is read-only or is a directory.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.IO.IOException">The file is already open.</exception>
            <remarks>
            This method returns a read-only FileStream object with the FileShare
            mode set to Read.
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.OpenText">
            <summary>
            Creates a StreamReader with UTF8 encoding that reads from an
            existing text file.
            </summary>
            <returns>A new StreamReader with UTF8 encoding.</returns>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path is read-only or is a directory.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.OpenWrite">
            <summary>
            Creates a write-only FileStream.
            </summary>
            <returns>A new write-only unshared FileStream object.</returns>
            <exception cref="T:System.UnauthorizedAccessException">
            The path used to construct this <see cref="T:Cadru.IO.ExtendedFileInfo"/>
            instance is read-only or is a directory.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, such as being on an unmapped drive.
            </exception>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
            <exception cref="T:System.IO.IOException">
            A device such as a disk drive is not ready.
            </exception>
            <remarks>
            <para>
            FileSystemInfo.Refresh takes a snapshot of the file from the current
            file system. Refresh cannot correct the underlying file system even
            if the file system returns incorrect or outdated information. This
            can happen on platforms such as Windows 98.
            </para>
            <para>
            Calls must be made to Refresh before attempting to get the attribute
            information, or the information will be outdated.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>
            Applies access control list (ACL) entries described by a
            FileSecurity object to the file described by the current FileInfo object.
            </summary>
            <param name="fileSecurity">
            A FileSecurity object that describes an access control list (ACL)
            entry to apply to the current file.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="fileSecurity"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="!:SystemException">
            The file could not be found or modified.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The current process does not have access to open the file.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows 2000 or later.
            </exception>
            <remarks>
            <para>
            The SetAccessControl method applies access control list (ACL)
            entries to the current file that represents the noninherited ACL list.
            </para>
            <para>
            Use the SetAccessControl method whenever you need to add or remove
            ACL entries from a file.
            </para>
            <para type="caution">
            The ACL specified for the fileSecurity parameter replaces the
            existing ACL for the file. To add permissions for a new user, use
            the GetAccessControl method to obtain the existing ACL, modify it,
            and then use SetAccessControl to apply it back to the file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file.
            </para>
            <para>
            The SetAccessControl method persists only FileSecurity objects that
            have been modified after object creation. If a FileSecurity object
            has not been modified, it will not be persisted to a file.
            Therefore, it is not possible to retrieve a FileSecurity object from
            one file and reapply the same object to another file.
            </para>
            <para>To copy ACL information from one file to another:</para>
            <list type="numbered">
            <item>
            Use the GetAccessControl method to retrieve the FileSecurity object
            from the source file.
            </item>
            <item>Create a new FileSecurity object for the destination file.</item>
            <item>
            Use the GetSecurityDescriptorBinaryForm or
            GetSecurityDescriptorSddlForm method of the source FileSecurity
            object to retrieve the ACL information.
            </item>
            <item>
            Use the SetSecurityDescriptorBinaryForm or
            SetSecurityDescriptorSddlForm method to copy the information
            retrieved in step 3 to the destination FileSecurity object.
            </item>
            <item>
            Set the destination FileSecurity object to the destination file
            using the SetAccessControl method.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.ToString">
            <summary>
            Returns the path as a string.
            </summary>
            <returns>A string representing the path.</returns>
            <remarks>
            The string returned by the ToString method represents path that was
            passed to the constructor. When you create a FileInfo object using
            the constructors, the ToString method returns the fully qualified
            path. However, there are cases where the string returned by the
            ToString method does not represent the fully qualified path. For
            example, when you create a FileInfo object using the GetFiles
            method, the ToString method does not represent the fully qualified path.
            </remarks>
        </member>
        <member name="T:Cadru.IO.Interop.Constants">
            <summary>
            An internal class that defines the p/invoke constants required by the
            Win32 API calls that are used inside the library.
            </summary>
        </member>
        <member name="T:Cadru.IO.Interop.SFGAO">
            <summary>
            The attributes that the caller is requesting, when calling IShellFolder::GetAttributesOf.
            </summary>
        </member>
        <member name="T:Cadru.IO.Interop.SHFILEINFO">
            <summary>
            This structure contains information about a file object.
            </summary>
            <remarks>This structure is used with the SHGetFileInfo function.</remarks>
        </member>
        <member name="F:Cadru.IO.Interop.SHFILEINFO.hIcon">
            <summary>
            Handle to the icon that represents the file.
            </summary>
        </member>
        <member name="F:Cadru.IO.Interop.SHFILEINFO.iIcon">
            <summary>
            Index of the icon image within the system image list.
            </summary>
        </member>
        <member name="F:Cadru.IO.Interop.SHFILEINFO.dwAttributes">
            <summary>
            Specifies the attributes of the file object.
            </summary>
        </member>
        <member name="F:Cadru.IO.Interop.SHFILEINFO.szDisplayName">
            <summary>
            Null-terminated string that contains the name of the file as it
            appears in the Windows shell, or the path and name of the file that
            contains the icon representing the file.
            </summary>
        </member>
        <member name="F:Cadru.IO.Interop.SHFILEINFO.szTypeName">
            <summary>
            Null-terminated string that describes the type of file.
            </summary>
        </member>
        <member name="T:Cadru.IO.Interop.SHGFI">
            <summary>
            The attributes that the caller is requesting, when calling IShellFolder::GetAttributesOf.
            </summary>
        </member>
    </members>
</doc>
