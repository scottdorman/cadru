<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cadru.IO</name>
    </assembly>
    <members>
        <member name="T:Cadru.IO.ExecutableType">
            <summary>
            Specifies the executable file type.
            </summary>
        </member>
        <member name="F:Cadru.IO.ExecutableType.Unknown">
            <summary>
            The file executable type is not able to be determined.
            </summary>
        </member>
        <member name="F:Cadru.IO.ExecutableType.DOS">
            <summary>
            The file is an MS-DOS .exe, .com, or .bat file.
            </summary>
        </member>
        <member name="F:Cadru.IO.ExecutableType.Win32Console">
            <summary>
            The file is a Microsoft Win32Â®-based console application.
            </summary>
        </member>
        <member name="F:Cadru.IO.ExecutableType.Windows">
            <summary>
            The file is a Windows application.
            </summary>
        </member>
        <member name="T:Cadru.IO.ExtendedDirectoryInfo">
            <summary>
            Provides an encapsulated implementation of the standard .NET
            <see cref="T:System.IO.DirectoryInfo"/> and the
            <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb762179(v=vs.85).aspx">SHGetFileInfo</see>
            API method.
            </summary>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cadru.IO.ExtendedDirectoryInfo"/> class, which acts as a wrapper
            for a file path.
            </summary>
            <param name="path">
            The fully qualified name of the new file, or the relative file name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is empty, contains only white spaces, or
            contains invalid characters.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Access to fileName is denied.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must
            be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path"/> contains a colon (:) in the middle of the string.
            </exception>
            <remarks>
            You can specify either the fully qualified or the relative file
            name, but the security check gets the fully qualified name.
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Attributes">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Attributes"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.CreateTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTimeUtc"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.CreationTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTime"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.DirectoryOwner">
            <summary>
            Gets the Windows owner associated with the directory.
            </summary>
            <value>
            A string representing the owner of the directory or
            <see langword="null"/> if the owner cannot be determined.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Exists">
            <inheritdoc cref="P:System.IO.DirectoryInfo.Exists"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Extension">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Extension"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.FullName">
            <inheritdoc cref="P:System.IO.FileSystemInfo.FullName"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.LastAccessTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTime"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.LastAccessTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTimeUtc"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.LastWriteTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTime"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.LastWriteTimUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Name">
            <inheritdoc cref="P:System.IO.DirectoryInfo.Name"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Parent">
            <inheritdoc cref="P:System.IO.DirectoryInfo.Parent"/>
        </member>
        <member name="P:Cadru.IO.ExtendedDirectoryInfo.Root">
            <inheritdoc cref="P:System.IO.DirectoryInfo.Root"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.Create">
            <inheritdoc cref="M:System.IO.DirectoryInfo.Create"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.CreateSubdirectory(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.Delete">
            <inheritdoc cref="M:System.IO.DirectoryInfo.Delete"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.Delete(System.Boolean)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.Delete(System.Boolean)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetAccessControl">
            <summary>
            Gets a DirectorySecurity object that encapsulates the access control
            list (ACL) entries for the directory described by the current
            DirectoryInfo object.
            </summary>
            <returns>
            A DirectorySecurity object that encapsulates the access control
            rules for the directory.
            </returns>
            <exception cref="T:System.Exception">
            The directory could not be found or modified.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating systme is not Microsoft Windows 2000 or later.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the directory.
            </exception>
            <exception cref="T:System.Exception">The file could not be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>The current process does not have access to open the directory.</para>
            <para>-or-</para>
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>
            <para>
            Calling this method overload is equivalent to calling the
            GetAccessControl method overload and specifying the access control
            sections AccessControlSections.Access | AccessControlSections.Owner
            | AccessControlSections.Group
            (AccessControlSections.AccessOrAccessControlSections.OwnerOrAccessControlSections.Group
            in Visual Basic).
            </para>
            <para>
            Use the GetAccessControl method to retrieve the access control list
            (ACL) entries for the current file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file or directory. For more
            information, see ACL Technology Overview and How to: Add or Remove
            Access Control List Entries.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a DirectorySecurity object that encapsulates the specified type
            of access control list (ACL) entries for the directory described by
            the current DirectoryInfo object.
            </summary>
            <param name="includeSections">
            One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies
            which group of access control entries to retrieve.
            </param>
            <returns>
            A DirectorySecurity object that encapsulates the access control
            rules for the file described by the path parameter.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating systme is not Microsoft Windows 2000 or later.
            </exception>
            <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">
            The current system account does not have administrative privileges.
            </exception>
            <exception cref="T:System.Exception">The file could not be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>This operation is not supported on teh current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>
            <para>
            Use the GetAccessControl method to retrieve the access control list
            (ACL) entries for the current file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetDirectories">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetDirectories(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories(System.String)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetFiles">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetFiles(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles(System.String)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetFileSystemInfos">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFileSystemInfos"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.GetFileSystemInfos(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.MoveTo(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.MoveTo(System.String)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.Refresh">
            <inheritdoc cref="M:System.IO.FileSystemInfo.Refresh"/>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Applies access control list (ACL) entries described by a
            DirectorySecurity object to the directory described by the current
            DirectoryInfo object.
            </summary>
            <param name="directorySecurity">
            A DirectorySecurity object that describes an ACL entry to apply to
            the directory described by the path parameter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="directorySecurity"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Exception">
            The file could not be found or modified.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The current process does not have access to open the file.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows 2000 or later.
            </exception>
            <remarks>
            <para>
            The SetAccessControl method applies access control list (ACL)
            entries to the current file that represents the noninherited ACL list.
            </para>
            <para>
            Use the SetAccessControl method whenever you need to add or remove
            ACL entries from a file.
            </para>
            <para type="caution">
            The ACL specified for the directorySecurity parameter replaces the
            existing ACL for the file. To add permissions for a new user, use
            the GetAccessControl method to obtain the existing ACL, modify it,
            and then use SetAccessControl to apply it back to the file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file.
            </para>
            <para>
            The SetAccessControl method persists only DirectorySecurity objects
            that have been modified after object creation. If a
            DirectorySecurity object has not been modified, it will not be
            persisted to a file. Therefore, it is not possible to retrieve a
            DirectorySecurity object from one file and reapply the same object
            to another file.
            </para>
            <para>To copy ACL information from one file to another:</para>
            <list type="numbered">
            <item>
            Use the GetAccessControl method to retrieve the DirectorySecurity
            object from the source file.
            </item>
            <item>
            Create a new DirectorySecurity object for the destination file.
            </item>
            <item>
            Use the GetSecurityDescriptorBinaryForm or
            GetSecurityDescriptorSddlForm method of the source FileSecurity
            object to retrieve the ACL information.
            </item>
            <item>
            Use the SetSecurityDescriptorBinaryForm or
            SetSecurityDescriptorSddlForm method to copy the information
            retrieved in step 3 to the destination DirectorySecurity object.
            </item>
            <item>
            Set the destination DirectorySecurity object to the destination file
            using the SetAccessControl method.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedDirectoryInfo.ToString">
            <inheritdoc cref="M:System.IO.DirectoryInfo.ToString"/>
        </member>
        <member name="T:Cadru.IO.ExtendedFileInfo">
            <summary>
            Provides an encapsulated implementation of the standard .NET
            <see cref="T:System.IO.FileInfo"/>, <see cref="T:System.Diagnostics.FileVersionInfo"/> and the
            <see href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb762179(v=vs.85).aspx">SHGetFileInfo</see>
            API method.
            </summary>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.IO.ExtendedFileInfo"/>
            class, which acts as a wrapper for a file path.
            </summary>
            <param name="fileName">
            The fully qualified name of the new file, or the relative file name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileName"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            The file name is empty, contains only white spaces, or contains
            invalid characters.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Access to <paramref name="fileName"/> is denied.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must
            be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="fileName"/> contains a colon (:) in the middle of
            the string.
            </exception>
            <remarks>
            You can specify either the fully qualified or the relative file
            name, but the security check gets the fully qualified name.
            </remarks>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Attributes">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Attributes"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Comments">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.Comments"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.CompanyName">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.CompanyName"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.CreateTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTimeUtc"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.CreationTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTime"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Directory">
            <inheritdoc cref="P:System.IO.FileInfo.Directory"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.DirectoryName">
            <inheritdoc cref="P:System.IO.FileInfo.DirectoryName"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ExecutableType">
            <summary>
            Gets the type of executable that this instance of FileVersionInfo describes.
            </summary>
            <value>
            The type of executable of the file described by this instance of FileVersionInfo.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Exists">
            <inheritdoc cref="P:System.IO.FileInfo.Exists"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Extension">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Extension"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileBuildPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileBuildPart"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileDescription">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileDescription"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileMajorPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileMajorPart"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileMinorPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileMinorPart"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileName">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileName"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileOwner">
            <summary>
            Gets the Windows owner associated with the file.
            </summary>
            <value>
            A string representing the owner of the file or
            <see langword="null"/> if the owner cannot be determined.
            </value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FilePrivatePart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FilePrivatePart"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileType">
            <summary>
            Gets the type of file.
            </summary>
            <value>The type of the file as displayed by the Shell.</value>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FileVersion">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileVersion"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.FullName">
            <inheritdoc cref="P:System.IO.FileSystemInfo.FullName"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.InternalName">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.InternalName"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsDebug">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.IsDebug"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsPatched">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.IsPatched"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsPreRelease">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.IsPreRelease"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsPrivateBuild">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.IsPrivateBuild"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsReadOnly">
            <inheritdoc cref="P:System.IO.FileInfo.IsReadOnly"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.IsSpecialBuild">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.IsSpecialBuild"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Language">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.Language"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LastAccessTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTime"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LastAccessTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTimeUtc"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LastWriteTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTime"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LastWriteTimUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LegalCopyright">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.LegalCopyright"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.LegalTrademarks">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.LegalTrademarks"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Length">
            <inheritdoc cref="P:System.IO.FileInfo.Length"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.Name">
            <inheritdoc cref="P:System.IO.FileInfo.Name"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.OriginalFilename">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.OriginalFilename"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.PrivateBuild">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.PrivateBuild"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductBuildPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.ProductBuildPart"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductMajorPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.ProductMajorPart"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductMinorPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.ProductMinorPart"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductName">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.PrivateBuild"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductPrivatePart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.ProductPrivatePart"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.ProductVersion">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.ProductVersion"/>
        </member>
        <member name="P:Cadru.IO.ExtendedFileInfo.SpecialBuild">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.SpecialBuild"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.AppendText">
            <inheritdoc cref="M:System.IO.FileInfo.AppendText"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.CopyTo(System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.CopyTo(System.String)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.CopyTo(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Create">
            <inheritdoc cref="M:System.IO.FileInfo.Create"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Delete">
            <inheritdoc cref="M:System.IO.FileInfo.Delete"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.GetAccessControl">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the
            access control list (ACL) entries for the file described by the
            current <see cref="T:Cadru.IO.ExtendedFileInfo"/> object.
            </summary>
            <returns>
            A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access
            control rules for the current file.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating systme is not Microsoft Windows 2000 or later.
            </exception>
            <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">
            The current system account does not have administrative privileges.
            </exception>
            <exception cref="T:System.Exception">The file could not be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>This operation is not supported on teh current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>
            <para>
            Use the <see cref="M:Cadru.IO.ExtendedFileInfo.GetAccessControl"/> method to retrieve the
            access control list (ACL) entries for the current file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the
            access control list (ACL) entries for the file described by the
            current <see cref="T:Cadru.IO.ExtendedFileInfo"/> object.
            </summary>
            <param name="includeSections">
            One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies
            which group of access control entries to retrieve.
            </param>
            <returns>
            A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the access
            control rules for the current file.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows 2000 or later.
            </exception>
            <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">
            The current system account does not have administrative privileges.
            </exception>
            <exception cref="T:System.Exception">The file could not be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>This operation is not supported on the current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks>
            <para>
            Use the <see cref="M:Cadru.IO.ExtendedFileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)"/> method
            to retrieve the access control list (ACL) entries for the current file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.MoveTo(System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.MoveTo(System.String)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Open(System.IO.FileMode)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.OpenRead">
            <inheritdoc cref="M:System.IO.FileInfo.OpenRead"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.OpenText">
            <inheritdoc cref="M:System.IO.FileInfo.OpenText"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.OpenWrite">
            <inheritdoc cref="M:System.IO.FileInfo.OpenWrite"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.Refresh">
            <inheritdoc cref="M:System.IO.FileSystemInfo.Refresh"/>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>
            Applies access control list (ACL) entries described by a
            FileSecurity object to the file described by the current FileInfo object.
            </summary>
            <param name="fileSecurity">
            A FileSecurity object that describes an access control list (ACL)
            entry to apply to the current file.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="fileSecurity"/> parameter is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Exception">
            The file could not be found or modified.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The current process does not have access to open the file.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
            The current operating system is not Microsoft Windows 2000 or later.
            </exception>
            <remarks>
            <para>
            The SetAccessControl method applies access control list (ACL)
            entries to the current file that represents the noninherited ACL list.
            </para>
            <para>
            Use the SetAccessControl method whenever you need to add or remove
            ACL entries from a file.
            </para>
            <para type="caution">
            The ACL specified for the fileSecurity parameter replaces the
            existing ACL for the file. To add permissions for a new user, use
            the GetAccessControl method to obtain the existing ACL, modify it,
            and then use SetAccessControl to apply it back to the file.
            </para>
            <para>
            An ACL describes individuals and/or groups who have, or do not have,
            rights to specific actions on the given file.
            </para>
            <para>
            The SetAccessControl method persists only FileSecurity objects that
            have been modified after object creation. If a FileSecurity object
            has not been modified, it will not be persisted to a file.
            Therefore, it is not possible to retrieve a FileSecurity object from
            one file and reapply the same object to another file.
            </para>
            <para>To copy ACL information from one file to another:</para>
            <list type="numbered">
            <item>
            Use the GetAccessControl method to retrieve the FileSecurity object
            from the source file.
            </item>
            <item>Create a new FileSecurity object for the destination file.</item>
            <item>
            Use the GetSecurityDescriptorBinaryForm or
            GetSecurityDescriptorSddlForm method of the source FileSecurity
            object to retrieve the ACL information.
            </item>
            <item>
            Use the SetSecurityDescriptorBinaryForm or
            SetSecurityDescriptorSddlForm method to copy the information
            retrieved in step 3 to the destination FileSecurity object.
            </item>
            <item>
            Set the destination FileSecurity object to the destination file
            using the SetAccessControl method.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Cadru.IO.ExtendedFileInfo.ToString">
            <inheritdoc cref="M:System.IO.FileInfo.ToString"/>
        </member>
        <member name="T:Cadru.IO.Interop.Constants">
            <summary>
            An internal class that defines the p/invoke constants required by the
            Win32 API calls that are used inside the library.
            </summary>
        </member>
        <member name="T:Cadru.IO.Interop.SFGAO">
            <summary>
            The attributes that the caller is requesting, when calling IShellFolder::GetAttributesOf.
            </summary>
        </member>
        <member name="T:Cadru.IO.Interop.SHFILEINFO">
            <summary>
            This structure contains information about a file object.
            </summary>
            <remarks>This structure is used with the SHGetFileInfo function.</remarks>
        </member>
        <member name="F:Cadru.IO.Interop.SHFILEINFO.hIcon">
            <summary>
            Handle to the icon that represents the file.
            </summary>
        </member>
        <member name="F:Cadru.IO.Interop.SHFILEINFO.iIcon">
            <summary>
            Index of the icon image within the system image list.
            </summary>
        </member>
        <member name="F:Cadru.IO.Interop.SHFILEINFO.dwAttributes">
            <summary>
            Specifies the attributes of the file object.
            </summary>
        </member>
        <member name="F:Cadru.IO.Interop.SHFILEINFO.szDisplayName">
            <summary>
            Null-terminated string that contains the name of the file as it
            appears in the Windows shell, or the path and name of the file that
            contains the icon representing the file.
            </summary>
        </member>
        <member name="F:Cadru.IO.Interop.SHFILEINFO.szTypeName">
            <summary>
            Null-terminated string that describes the type of file.
            </summary>
        </member>
        <member name="T:Cadru.IO.Interop.SHGFI">
            <summary>
            The attributes that the caller is requesting, when calling IShellFolder::GetAttributesOf.
            </summary>
        </member>
    </members>
</doc>
