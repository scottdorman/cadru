<?xml version="1.0"?>
<!--
Sample license text.
-->
<doc>
    <assembly>
        <name>Cadru.Extensions.FileProviders</name>
    </assembly>
    <members>
        <member name="T:Cadru.Extensions.FileProviders.ExecutableType">
            <summary>
            Specifies the executable file type.
            </summary>
        </member>
        <member name="F:Cadru.Extensions.FileProviders.ExecutableType.Unknown">
            <summary>
            The file executable type is not able to be determined.
            </summary>
        </member>
        <member name="F:Cadru.Extensions.FileProviders.ExecutableType.DOS">
            <summary>
            The file is an MS-DOS .exe, .com, or .bat file.
            </summary>
        </member>
        <member name="F:Cadru.Extensions.FileProviders.ExecutableType.Win32Console">
            <summary>
            The file is a Microsoft Win32Â®-based console application.
            </summary>
        </member>
        <member name="F:Cadru.Extensions.FileProviders.ExecutableType.Windows">
            <summary>
            The file is a Windows application.
            </summary>
        </member>
        <member name="T:Cadru.Extensions.FileProviders.ExtendedFileInfo">
            <summary>
            Provides properties and instance methods for working with files. This
            class cannot be inherited.
            </summary>
            <remarks>
            This wraps an <see cref="T:System.IO.FileInfo"/> and <see cref="T:System.Diagnostics.FileVersionInfo"/>.
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.#ctor(Microsoft.Extensions.FileProviders.IFileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Cadru.Extensions.FileProviders.ExtendedFileInfo"/> class
            that wraps an instance of <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/>.
            </summary>
            <param name="fileInfo">The <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> representing the file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileInfo"/> is <see langword="null" />. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters. </exception>
            <exception cref="T:System.UnauthorizedAccessException">Access to <paramref name="fileInfo"/> is denied.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="fileInfo"/> contains a colon (:) in the middle of the string.</exception>
            <remarks>You can specify either the fully qualified or the relative file name, but the security check gets the fully qualified name.</remarks>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.Attributes">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Attributes"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.Comments">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.Comments"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.CompanyName">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.CompanyName"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.CreateTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTimeUtc"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.CreationTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTime"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.Directory">
            <inheritdoc cref="P:System.IO.FileInfo.Directory"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.DirectoryName">
            <inheritdoc cref="P:System.IO.FileInfo.DirectoryName"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.Exists">
            <inheritdoc cref="P:System.IO.FileInfo.Exists"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.Extension">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Extension"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.FileBuildPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileBuildPart"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.FileDescription">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileDescription"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.FileMajorPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileMajorPart"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.FileMinorPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileMinorPart"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.FileName">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileName"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.FileOwner">
            <summary>
            Gets the Windows owner associated with the file.
            </summary>
            <value>A string representing the owner of the file or <see langword="null"/> if the owner cannot be determined.</value>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.FilePrivatePart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FilePrivatePart"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.FileVersion">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.FileVersion"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.FullName">
            <inheritdoc cref="P:System.IO.FileSystemInfo.FullName"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.InternalName">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.InternalName"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.IsDebug">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.IsDebug"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.IsPatched">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.IsPatched"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.IsPreRelease">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.IsPreRelease"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.IsPrivateBuild">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.IsPrivateBuild"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.IsReadOnly">
            <inheritdoc cref="P:System.IO.FileInfo.IsReadOnly"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.IsSpecialBuild">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.IsSpecialBuild"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.Language">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.Language"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.LastAccessTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTime"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.LastAccessTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTimeUtc"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.LastWriteTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTime"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.LastWriteTimUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.LegalCopyright">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.LegalCopyright"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.LegalTrademarks">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.LegalTrademarks"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.Length">
            <inheritdoc cref="P:System.IO.FileInfo.Length"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.Name">
            <inheritdoc cref="P:System.IO.FileInfo.Name"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.OriginalFilename">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.OriginalFilename"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.PrivateBuild">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.PrivateBuild"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.ProductBuildPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.ProductBuildPart"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.ProductMajorPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.ProductMajorPart"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.ProductMinorPart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.ProductMinorPart"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.ProductName">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.PrivateBuild"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.ProductPrivatePart">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.ProductPrivatePart"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.ProductVersion">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.ProductVersion"/>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.ExtendedFileInfo.SpecialBuild">
            <inheritdoc cref="P:System.Diagnostics.FileVersionInfo.SpecialBuild"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.AppendText">
            <inheritdoc cref="M:System.IO.FileInfo.AppendText"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.CopyTo(System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.CopyTo(System.String)"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.CopyTo(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.Create">
            <inheritdoc cref="M:System.IO.FileInfo.Create"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.Decrypt">
            <inheritdoc cref="M:System.IO.FileInfo.Decrypt"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.Delete">
            <inheritdoc cref="M:System.IO.FileInfo.Delete"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.Encrypt">
            <inheritdoc cref="M:System.IO.FileInfo.Encrypt"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.GetAccessControl">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the
            access control list (ACL) entries for the file described by the
            current <see cref="T:Cadru.Extensions.FileProviders.ExtendedFileInfo"/> object.
            </summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the
            access control rules for the current file.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening
            the file.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current
            operating systme is not Microsoft Windows 2000 or later.
            </exception>
            <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">The current system
            account does not have administrative privileges.</exception>
            <exception cref="T:System.SystemException">The file could not be
            found.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><para>This operation
            is not supported on teh current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks><para>Use the <see cref="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.GetAccessControl"/> method to
            retrieve the access control list (ACL) entries for the current
            file.</para>
            <para>An ACL describes individuals and/or groups who have, or do
            not have, rights to specific actions on the given file.</para>
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the
            access control list (ACL) entries for the file described by the
            current <see cref="T:Cadru.Extensions.FileProviders.ExtendedFileInfo"/> object.
            </summary>
            <param name="includeSections">One of the
            <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies which
            group of access control entries to retrieve.</param>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"/> object that encapsulates the
            access control rules for the current file.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening
            the file.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current
            operating systme is not Microsoft Windows 2000 or later.
            </exception>
            <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">The current system
            account does not have administrative privileges.</exception>
            <exception cref="T:System.SystemException">The file could not be
            found.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><para>This operation
            is not supported on teh current platform.</para>
            <para>-or-</para>
            <para>The caller does not have the required permission.</para>
            </exception>
            <remarks><para>Use the
            <see cref="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)"/> method to
            retrieve the access control list (ACL) entries for the current
            file.</para>
            <para>An ACL describes individuals and/or groups who have, or do
            not have, rights to specific actions on the given file.</para>
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.MoveTo(System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.MoveTo(System.String)"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.Open(System.IO.FileMode)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode)"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.OpenRead">
            <inheritdoc cref="M:System.IO.FileInfo.OpenRead"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.OpenText">
            <inheritdoc cref="M:System.IO.FileInfo.OpenText"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.OpenWrite">
            <inheritdoc cref="M:System.IO.FileInfo.OpenWrite"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.Refresh">
            <inheritdoc cref="M:System.IO.FileSystemInfo.Refresh"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.Replace(System.String,System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.Replace(System.String,System.String)"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.Replace(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.FileInfo.Replace(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>
            Applies access control list (ACL) entries described by a FileSecurity object to the file described by the current FileInfo object.
            </summary>
            <param name="fileSecurity">A FileSecurity object that describes an access control list (ACL) entry to apply to the current file.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="fileSecurity"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.SystemException">The file could not be found or modified.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <remarks>
            <para>The SetAccessControl method applies access control list (ACL) entries to the current file that represents the noninherited ACL list.</para>
            <para>Use the SetAccessControl method whenever you need to add or remove ACL entries from a file.</para>
            <para type="caution">The ACL specified for the fileSecurity parameter replaces the existing ACL for the file. To add permissions for a new user, use the GetAccessControl method to obtain the existing ACL, modify it, and then use SetAccessControl to apply it back to the file.</para>
            <para>An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file.</para>
            <para>The SetAccessControl method persists only FileSecurity objects that have been modified after object creation.  If a FileSecurity object has not been modified, it will not be persisted to a file.  Therefore, it is not possible to retrieve a FileSecurity object from one file and reapply the same object to another file.</para>
            <para>To copy ACL information from one file to another:</para>
            <list type="numbered">
            <item>Use the GetAccessControl method to retrieve the FileSecurity object from the source file.</item>
            <item>Create a new FileSecurity object for the destination file.</item>
            <item>Use the GetSecurityDescriptorBinaryForm or GetSecurityDescriptorSddlForm method of the source FileSecurity object to retrieve the ACL information.</item>
            <item>Use the SetSecurityDescriptorBinaryForm or SetSecurityDescriptorSddlForm method to copy the information retrieved in step 3 to the destination FileSecurity object.</item>
            <item>Set the destination FileSecurity object to the destination file using the SetAccessControl method.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedFileInfo.ToString">
            <inheritdoc cref="M:System.IO.FileInfo.ToString"/>
        </member>
        <member name="T:Cadru.Extensions.FileProviders.ExtendedPhysicalFileProvider">
            <summary>
            Looks up files or folders using the on-disk file system.
            </summary>
            <remarks>
            <para>
            This extends  <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider"/> and adds support for
            working with files or folders returned as an <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/>.
            </para>
            <para>
            When the environment variable "DOTNET_USE_POLLING_FILE_WATCHER" is set to "1" or "true", calls to
            <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" /> will use <see cref="T:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken" />.
            </para>
            </remarks>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedPhysicalFileProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of a PhysicalFileProvider at the given root directory.
            </summary>
            <param name="root">The root directory. This should be an absolute path.</param>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedPhysicalFileProvider.#ctor(System.String,Microsoft.Extensions.FileProviders.Physical.ExclusionFilters)">
            <summary>
            Initializes a new instance of a PhysicalFileProvider at the given root directory.
            </summary>
            <param name="root">The root directory. This should be an absolute path.</param>
            <param name="filters">Specifies which files or directories are excluded.</param>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedPhysicalFileProvider.CreateDirectory(System.String)">
            <summary>
            Creates a directory at the given path.
            </summary>
            <param name="subpath">A path under the root directory</param>
            <returns>The directory information. Caller must check <see cref="P:Microsoft.Extensions.FileProviders.IFileInfo.Exists"/> property. </returns>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedPhysicalFileProvider.CreateFile(System.String)">
            <summary>
            Creates a file at the given path.
            </summary>
            <param name="subpath">A path under the root directory</param>
            <returns>The file information. Caller must check <see cref="P:Microsoft.Extensions.FileProviders.IFileInfo.Exists"/> property. </returns>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.ExtendedPhysicalFileProvider.GetDirectoryInfo(System.String)">
            <summary>
            Locate a directory at the given path by directly mapping path segments to physical directories.
            </summary>
            <param name="subpath">A path under the root directory</param>
            <returns>The directory information. Caller must check <see cref="P:Microsoft.Extensions.FileProviders.IFileInfo.Exists"/> property.</returns>
        </member>
        <member name="T:Cadru.Extensions.FileProviders.FileName">
            <summary>
            Provides static methods for working with file names on disk.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.FileName.NextAvailableFilename(System.String)">
            <summary>
            Gets a unique folder name or file name, based on the given path.
            </summary>
            <param name="path">The initial folder or file name.</param>
            <returns>A unique folder or file name.</returns>
            <remarks><see cref="M:Cadru.Extensions.FileProviders.FileName.NextAvailableFilename(System.String)"/> does not create a file.</remarks>
        </member>
        <member name="T:Cadru.Extensions.FileProviders.IFileInfoExtensions">
            <summary>
            Extension methods for working with <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> instances.
            </summary>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.IFileInfoExtensions.ReadAllText(Microsoft.Extensions.FileProviders.IFileInfo)">
            <summary>
            Opens the file, reads all the text in the file into a string, and then closes the file.
            </summary>
            <param name="fileInfo">The <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> representing the file.</param>
            <returns>A string containing all the text in the file.</returns>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.IFileInfoExtensions.ToExtendedFileInfo(Microsoft.Extensions.FileProviders.IFileInfo)">
            <summary>
            Creates an <see cref="T:Cadru.Extensions.FileProviders.ExtendedFileInfo"/> wrapper around the given <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/>.
            </summary>
            <param name="fileInfo">The <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> representing the file.</param>
            <returns>An <see cref="T:Cadru.Extensions.FileProviders.ExtendedFileInfo"/> wrapper around the given <paramref name="fileInfo"/>.</returns>
        </member>
        <member name="M:Cadru.Extensions.FileProviders.IFileInfoExtensions.ToUri(Microsoft.Extensions.FileProviders.IFileInfo)">
            <summary>
            Returns the path as a uniform resource identifier (URI).
            </summary>
            <param name="fileInfo">The <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> representing the file.</param>
            <returns>A <see cref="T:System.Uri"/> representing the path.</returns>
        </member>
        <member name="T:Cadru.Extensions.FileProviders.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.Resources.Strings.FileName_ArgumentException_InvalidPattern">
            <summary>
              Looks up a localized string similar to The pattern must include an index place-holder.
            </summary>
        </member>
        <member name="P:Cadru.Extensions.FileProviders.Resources.Strings.FileName_NumberPattern">
            <summary>
              Looks up a localized string similar to  ({0}).
            </summary>
        </member>
    </members>
</doc>
